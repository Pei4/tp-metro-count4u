{"ast":null,"code":"import React, { createContext, useContext, useEffect, useState, useCallback, useMemo, useRef, useReducer, memo, cloneElement, forwardRef } from 'react';\nimport { createPortal, unstable_batchedUpdates } from 'react-dom';\nimport { useUniqueId, getEventCoordinates, getWindow, isDocument, isHTMLElement, isSVGElement, canUseDOM, isWindow, isNode, getOwnerDocument, add, isKeyboardEvent, subtract, useLazyMemo, useInterval, usePrevious, useLatestValue, useEvent, useIsomorphicLayoutEffect, useNodeRef, findFirstFocusableNode, CSS } from '@dnd-kit/utilities';\nimport { useAnnouncement, HiddenText, LiveRegion } from '@dnd-kit/accessibility';\nconst DndMonitorContext = /*#__PURE__*/createContext(null);\n\nfunction useDndMonitor(listener) {\n  const registerListener = useContext(DndMonitorContext);\n  useEffect(() => {\n    if (!registerListener) {\n      throw new Error('useDndMonitor must be used within a children of <DndContext>');\n    }\n\n    const unsubscribe = registerListener(listener);\n    return unsubscribe;\n  }, [listener, registerListener]);\n}\n\nfunction useDndMonitorProvider() {\n  const [listeners] = useState(() => new Set());\n  const registerListener = useCallback(listener => {\n    listeners.add(listener);\n    return () => listeners.delete(listener);\n  }, [listeners]);\n  const dispatch = useCallback(_ref => {\n    let {\n      type,\n      event\n    } = _ref;\n    listeners.forEach(listener => {\n      var _listener$type;\n\n      return (_listener$type = listener[type]) == null ? void 0 : _listener$type.call(listener, event);\n    });\n  }, [listeners]);\n  return [dispatch, registerListener];\n}\n\nconst defaultScreenReaderInstructions = {\n  draggable: \"\\n    To pick up a draggable item, press the space bar.\\n    While dragging, use the arrow keys to move the item.\\n    Press space again to drop the item in its new position, or press escape to cancel.\\n  \"\n};\nconst defaultAnnouncements = {\n  onDragStart(_ref) {\n    let {\n      active\n    } = _ref;\n    return \"Picked up draggable item \" + active.id + \".\";\n  },\n\n  onDragOver(_ref2) {\n    let {\n      active,\n      over\n    } = _ref2;\n\n    if (over) {\n      return \"Draggable item \" + active.id + \" was moved over droppable area \" + over.id + \".\";\n    }\n\n    return \"Draggable item \" + active.id + \" is no longer over a droppable area.\";\n  },\n\n  onDragEnd(_ref3) {\n    let {\n      active,\n      over\n    } = _ref3;\n\n    if (over) {\n      return \"Draggable item \" + active.id + \" was dropped over droppable area \" + over.id;\n    }\n\n    return \"Draggable item \" + active.id + \" was dropped.\";\n  },\n\n  onDragCancel(_ref4) {\n    let {\n      active\n    } = _ref4;\n    return \"Dragging was cancelled. Draggable item \" + active.id + \" was dropped.\";\n  }\n\n};\n\nfunction Accessibility(_ref) {\n  let {\n    announcements = defaultAnnouncements,\n    container,\n    hiddenTextDescribedById,\n    screenReaderInstructions = defaultScreenReaderInstructions\n  } = _ref;\n  const {\n    announce,\n    announcement\n  } = useAnnouncement();\n  const liveRegionId = useUniqueId(\"DndLiveRegion\");\n  const [mounted, setMounted] = useState(false);\n  useEffect(() => {\n    setMounted(true);\n  }, []);\n  useDndMonitor(useMemo(() => ({\n    onDragStart(_ref2) {\n      let {\n        active\n      } = _ref2;\n      announce(announcements.onDragStart({\n        active\n      }));\n    },\n\n    onDragMove(_ref3) {\n      let {\n        active,\n        over\n      } = _ref3;\n\n      if (announcements.onDragMove) {\n        announce(announcements.onDragMove({\n          active,\n          over\n        }));\n      }\n    },\n\n    onDragOver(_ref4) {\n      let {\n        active,\n        over\n      } = _ref4;\n      announce(announcements.onDragOver({\n        active,\n        over\n      }));\n    },\n\n    onDragEnd(_ref5) {\n      let {\n        active,\n        over\n      } = _ref5;\n      announce(announcements.onDragEnd({\n        active,\n        over\n      }));\n    },\n\n    onDragCancel(_ref6) {\n      let {\n        active,\n        over\n      } = _ref6;\n      announce(announcements.onDragCancel({\n        active,\n        over\n      }));\n    }\n\n  }), [announce, announcements]));\n\n  if (!mounted) {\n    return null;\n  }\n\n  const markup = React.createElement(React.Fragment, null, React.createElement(HiddenText, {\n    id: hiddenTextDescribedById,\n    value: screenReaderInstructions.draggable\n  }), React.createElement(LiveRegion, {\n    id: liveRegionId,\n    announcement: announcement\n  }));\n  return container ? createPortal(markup, container) : markup;\n}\n\nvar Action;\n\n(function (Action) {\n  Action[\"DragStart\"] = \"dragStart\";\n  Action[\"DragMove\"] = \"dragMove\";\n  Action[\"DragEnd\"] = \"dragEnd\";\n  Action[\"DragCancel\"] = \"dragCancel\";\n  Action[\"DragOver\"] = \"dragOver\";\n  Action[\"RegisterDroppable\"] = \"registerDroppable\";\n  Action[\"SetDroppableDisabled\"] = \"setDroppableDisabled\";\n  Action[\"UnregisterDroppable\"] = \"unregisterDroppable\";\n})(Action || (Action = {}));\n\nfunction noop() {}\n\nfunction useSensor(sensor, options) {\n  return useMemo(() => ({\n    sensor,\n    options: options != null ? options : {}\n  }), // eslint-disable-next-line react-hooks/exhaustive-deps\n  [sensor, options]);\n}\n\nfunction useSensors() {\n  for (var _len = arguments.length, sensors = new Array(_len), _key = 0; _key < _len; _key++) {\n    sensors[_key] = arguments[_key];\n  }\n\n  return useMemo(() => [...sensors].filter(sensor => sensor != null), // eslint-disable-next-line react-hooks/exhaustive-deps\n  [...sensors]);\n}\n\nconst defaultCoordinates = /*#__PURE__*/Object.freeze({\n  x: 0,\n  y: 0\n});\n/**\r\n * Returns the distance between two points\r\n */\n\nfunction distanceBetween(p1, p2) {\n  return Math.sqrt(Math.pow(p1.x - p2.x, 2) + Math.pow(p1.y - p2.y, 2));\n}\n\nfunction getRelativeTransformOrigin(event, rect) {\n  const eventCoordinates = getEventCoordinates(event);\n\n  if (!eventCoordinates) {\n    return '0 0';\n  }\n\n  const transformOrigin = {\n    x: (eventCoordinates.x - rect.left) / rect.width * 100,\n    y: (eventCoordinates.y - rect.top) / rect.height * 100\n  };\n  return transformOrigin.x + \"% \" + transformOrigin.y + \"%\";\n}\n/**\r\n * Sort collisions from smallest to greatest value\r\n */\n\n\nfunction sortCollisionsAsc(_ref, _ref2) {\n  let {\n    data: {\n      value: a\n    }\n  } = _ref;\n  let {\n    data: {\n      value: b\n    }\n  } = _ref2;\n  return a - b;\n}\n/**\r\n * Sort collisions from greatest to smallest value\r\n */\n\n\nfunction sortCollisionsDesc(_ref3, _ref4) {\n  let {\n    data: {\n      value: a\n    }\n  } = _ref3;\n  let {\n    data: {\n      value: b\n    }\n  } = _ref4;\n  return b - a;\n}\n/**\r\n * Returns the coordinates of the corners of a given rectangle:\r\n * [TopLeft {x, y}, TopRight {x, y}, BottomLeft {x, y}, BottomRight {x, y}]\r\n */\n\n\nfunction cornersOfRectangle(_ref5) {\n  let {\n    left,\n    top,\n    height,\n    width\n  } = _ref5;\n  return [{\n    x: left,\n    y: top\n  }, {\n    x: left + width,\n    y: top\n  }, {\n    x: left,\n    y: top + height\n  }, {\n    x: left + width,\n    y: top + height\n  }];\n}\n\nfunction getFirstCollision(collisions, property) {\n  if (!collisions || collisions.length === 0) {\n    return null;\n  }\n\n  const [firstCollision] = collisions;\n  return property ? firstCollision[property] : firstCollision;\n}\n/**\r\n * Returns the coordinates of the center of a given ClientRect\r\n */\n\n\nfunction centerOfRectangle(rect, left, top) {\n  if (left === void 0) {\n    left = rect.left;\n  }\n\n  if (top === void 0) {\n    top = rect.top;\n  }\n\n  return {\n    x: left + rect.width * 0.5,\n    y: top + rect.height * 0.5\n  };\n}\n/**\r\n * Returns the closest rectangles from an array of rectangles to the center of a given\r\n * rectangle.\r\n */\n\n\nconst closestCenter = _ref => {\n  let {\n    collisionRect,\n    droppableRects,\n    droppableContainers\n  } = _ref;\n  const centerRect = centerOfRectangle(collisionRect, collisionRect.left, collisionRect.top);\n  const collisions = [];\n\n  for (const droppableContainer of droppableContainers) {\n    const {\n      id\n    } = droppableContainer;\n    const rect = droppableRects.get(id);\n\n    if (rect) {\n      const distBetween = distanceBetween(centerOfRectangle(rect), centerRect);\n      collisions.push({\n        id,\n        data: {\n          droppableContainer,\n          value: distBetween\n        }\n      });\n    }\n  }\n\n  return collisions.sort(sortCollisionsAsc);\n};\n/**\r\n * Returns the closest rectangles from an array of rectangles to the corners of\r\n * another rectangle.\r\n */\n\n\nconst closestCorners = _ref => {\n  let {\n    collisionRect,\n    droppableRects,\n    droppableContainers\n  } = _ref;\n  const corners = cornersOfRectangle(collisionRect);\n  const collisions = [];\n\n  for (const droppableContainer of droppableContainers) {\n    const {\n      id\n    } = droppableContainer;\n    const rect = droppableRects.get(id);\n\n    if (rect) {\n      const rectCorners = cornersOfRectangle(rect);\n      const distances = corners.reduce((accumulator, corner, index) => {\n        return accumulator + distanceBetween(rectCorners[index], corner);\n      }, 0);\n      const effectiveDistance = Number((distances / 4).toFixed(4));\n      collisions.push({\n        id,\n        data: {\n          droppableContainer,\n          value: effectiveDistance\n        }\n      });\n    }\n  }\n\n  return collisions.sort(sortCollisionsAsc);\n};\n/**\r\n * Returns the intersecting rectangle area between two rectangles\r\n */\n\n\nfunction getIntersectionRatio(entry, target) {\n  const top = Math.max(target.top, entry.top);\n  const left = Math.max(target.left, entry.left);\n  const right = Math.min(target.left + target.width, entry.left + entry.width);\n  const bottom = Math.min(target.top + target.height, entry.top + entry.height);\n  const width = right - left;\n  const height = bottom - top;\n\n  if (left < right && top < bottom) {\n    const targetArea = target.width * target.height;\n    const entryArea = entry.width * entry.height;\n    const intersectionArea = width * height;\n    const intersectionRatio = intersectionArea / (targetArea + entryArea - intersectionArea);\n    return Number(intersectionRatio.toFixed(4));\n  } // Rectangles do not overlap, or overlap has an area of zero (edge/corner overlap)\n\n\n  return 0;\n}\n/**\r\n * Returns the rectangles that has the greatest intersection area with a given\r\n * rectangle in an array of rectangles.\r\n */\n\n\nconst rectIntersection = _ref => {\n  let {\n    collisionRect,\n    droppableRects,\n    droppableContainers\n  } = _ref;\n  const collisions = [];\n\n  for (const droppableContainer of droppableContainers) {\n    const {\n      id\n    } = droppableContainer;\n    const rect = droppableRects.get(id);\n\n    if (rect) {\n      const intersectionRatio = getIntersectionRatio(rect, collisionRect);\n\n      if (intersectionRatio > 0) {\n        collisions.push({\n          id,\n          data: {\n            droppableContainer,\n            value: intersectionRatio\n          }\n        });\n      }\n    }\n  }\n\n  return collisions.sort(sortCollisionsDesc);\n};\n/**\r\n * Check if a given point is contained within a bounding rectangle\r\n */\n\n\nfunction isPointWithinRect(point, rect) {\n  const {\n    top,\n    left,\n    bottom,\n    right\n  } = rect;\n  return top <= point.y && point.y <= bottom && left <= point.x && point.x <= right;\n}\n/**\r\n * Returns the rectangles that the pointer is hovering over\r\n */\n\n\nconst pointerWithin = _ref => {\n  let {\n    droppableContainers,\n    droppableRects,\n    pointerCoordinates\n  } = _ref;\n\n  if (!pointerCoordinates) {\n    return [];\n  }\n\n  const collisions = [];\n\n  for (const droppableContainer of droppableContainers) {\n    const {\n      id\n    } = droppableContainer;\n    const rect = droppableRects.get(id);\n\n    if (rect && isPointWithinRect(pointerCoordinates, rect)) {\n      /* There may be more than a single rectangle intersecting\r\n       * with the pointer coordinates. In order to sort the\r\n       * colliding rectangles, we measure the distance between\r\n       * the pointer and the corners of the intersecting rectangle\r\n       */\n      const corners = cornersOfRectangle(rect);\n      const distances = corners.reduce((accumulator, corner) => {\n        return accumulator + distanceBetween(pointerCoordinates, corner);\n      }, 0);\n      const effectiveDistance = Number((distances / 4).toFixed(4));\n      collisions.push({\n        id,\n        data: {\n          droppableContainer,\n          value: effectiveDistance\n        }\n      });\n    }\n  }\n\n  return collisions.sort(sortCollisionsAsc);\n};\n\nfunction adjustScale(transform, rect1, rect2) {\n  return { ...transform,\n    scaleX: rect1 && rect2 ? rect1.width / rect2.width : 1,\n    scaleY: rect1 && rect2 ? rect1.height / rect2.height : 1\n  };\n}\n\nfunction getRectDelta(rect1, rect2) {\n  return rect1 && rect2 ? {\n    x: rect1.left - rect2.left,\n    y: rect1.top - rect2.top\n  } : defaultCoordinates;\n}\n\nfunction createRectAdjustmentFn(modifier) {\n  return function adjustClientRect(rect) {\n    for (var _len = arguments.length, adjustments = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      adjustments[_key - 1] = arguments[_key];\n    }\n\n    return adjustments.reduce((acc, adjustment) => ({ ...acc,\n      top: acc.top + modifier * adjustment.y,\n      bottom: acc.bottom + modifier * adjustment.y,\n      left: acc.left + modifier * adjustment.x,\n      right: acc.right + modifier * adjustment.x\n    }), { ...rect\n    });\n  };\n}\n\nconst getAdjustedRect = /*#__PURE__*/createRectAdjustmentFn(1);\n\nfunction parseTransform(transform) {\n  if (transform.startsWith('matrix3d(')) {\n    const transformArray = transform.slice(9, -1).split(/, /);\n    return {\n      x: +transformArray[12],\n      y: +transformArray[13],\n      scaleX: +transformArray[0],\n      scaleY: +transformArray[5]\n    };\n  } else if (transform.startsWith('matrix(')) {\n    const transformArray = transform.slice(7, -1).split(/, /);\n    return {\n      x: +transformArray[4],\n      y: +transformArray[5],\n      scaleX: +transformArray[0],\n      scaleY: +transformArray[3]\n    };\n  }\n\n  return null;\n}\n\nfunction inverseTransform(rect, transform, transformOrigin) {\n  const parsedTransform = parseTransform(transform);\n\n  if (!parsedTransform) {\n    return rect;\n  }\n\n  const {\n    scaleX,\n    scaleY,\n    x: translateX,\n    y: translateY\n  } = parsedTransform;\n  const x = rect.left - translateX - (1 - scaleX) * parseFloat(transformOrigin);\n  const y = rect.top - translateY - (1 - scaleY) * parseFloat(transformOrigin.slice(transformOrigin.indexOf(' ') + 1));\n  const w = scaleX ? rect.width / scaleX : rect.width;\n  const h = scaleY ? rect.height / scaleY : rect.height;\n  return {\n    width: w,\n    height: h,\n    top: y,\n    right: x + w,\n    bottom: y + h,\n    left: x\n  };\n}\n\nconst defaultOptions = {\n  ignoreTransform: false\n};\n/**\r\n * Returns the bounding client rect of an element relative to the viewport.\r\n */\n\nfunction getClientRect(element, options) {\n  if (options === void 0) {\n    options = defaultOptions;\n  }\n\n  let rect = element.getBoundingClientRect();\n\n  if (options.ignoreTransform) {\n    const {\n      getComputedStyle\n    } = getWindow(element);\n    const {\n      transform,\n      transformOrigin\n    } = getComputedStyle(element);\n\n    if (transform) {\n      rect = inverseTransform(rect, transform, transformOrigin);\n    }\n  }\n\n  const {\n    top,\n    left,\n    width,\n    height,\n    bottom,\n    right\n  } = rect;\n  return {\n    top,\n    left,\n    width,\n    height,\n    bottom,\n    right\n  };\n}\n/**\r\n * Returns the bounding client rect of an element relative to the viewport.\r\n *\r\n * @remarks\r\n * The ClientRect returned by this method does not take into account transforms\r\n * applied to the element it measures.\r\n *\r\n */\n\n\nfunction getTransformAgnosticClientRect(element) {\n  return getClientRect(element, {\n    ignoreTransform: true\n  });\n}\n\nfunction getWindowClientRect(element) {\n  const width = element.innerWidth;\n  const height = element.innerHeight;\n  return {\n    top: 0,\n    left: 0,\n    right: width,\n    bottom: height,\n    width,\n    height\n  };\n}\n\nfunction isFixed(node, computedStyle) {\n  if (computedStyle === void 0) {\n    computedStyle = getWindow(node).getComputedStyle(node);\n  }\n\n  return computedStyle.position === 'fixed';\n}\n\nfunction isScrollable(element, computedStyle) {\n  if (computedStyle === void 0) {\n    computedStyle = getWindow(element).getComputedStyle(element);\n  }\n\n  const overflowRegex = /(auto|scroll|overlay)/;\n  const properties = ['overflow', 'overflowX', 'overflowY'];\n  return properties.some(property => {\n    const value = computedStyle[property];\n    return typeof value === 'string' ? overflowRegex.test(value) : false;\n  });\n}\n\nfunction getScrollableAncestors(element, limit) {\n  const scrollParents = [];\n\n  function findScrollableAncestors(node) {\n    if (limit != null && scrollParents.length >= limit) {\n      return scrollParents;\n    }\n\n    if (!node) {\n      return scrollParents;\n    }\n\n    if (isDocument(node) && node.scrollingElement != null && !scrollParents.includes(node.scrollingElement)) {\n      scrollParents.push(node.scrollingElement);\n      return scrollParents;\n    }\n\n    if (!isHTMLElement(node) || isSVGElement(node)) {\n      return scrollParents;\n    }\n\n    if (scrollParents.includes(node)) {\n      return scrollParents;\n    }\n\n    const {\n      getComputedStyle\n    } = getWindow(node);\n    const computedStyle = getComputedStyle(node);\n\n    if (node !== element) {\n      if (isScrollable(node, computedStyle)) {\n        scrollParents.push(node);\n      }\n    }\n\n    if (isFixed(node, computedStyle)) {\n      return scrollParents;\n    }\n\n    return findScrollableAncestors(node.parentNode);\n  }\n\n  if (!element) {\n    return scrollParents;\n  }\n\n  return findScrollableAncestors(element);\n}\n\nfunction getFirstScrollableAncestor(node) {\n  const [firstScrollableAncestor] = getScrollableAncestors(node, 1);\n  return firstScrollableAncestor != null ? firstScrollableAncestor : null;\n}\n\nfunction getScrollableElement(element) {\n  if (!canUseDOM || !element) {\n    return null;\n  }\n\n  if (isWindow(element)) {\n    return element;\n  }\n\n  if (!isNode(element)) {\n    return null;\n  }\n\n  if (isDocument(element) || element === getOwnerDocument(element).scrollingElement) {\n    return window;\n  }\n\n  if (isHTMLElement(element)) {\n    return element;\n  }\n\n  return null;\n}\n\nfunction getScrollXCoordinate(element) {\n  if (isWindow(element)) {\n    return element.scrollX;\n  }\n\n  return element.scrollLeft;\n}\n\nfunction getScrollYCoordinate(element) {\n  if (isWindow(element)) {\n    return element.scrollY;\n  }\n\n  return element.scrollTop;\n}\n\nfunction getScrollCoordinates(element) {\n  return {\n    x: getScrollXCoordinate(element),\n    y: getScrollYCoordinate(element)\n  };\n}\n\nvar Direction;\n\n(function (Direction) {\n  Direction[Direction[\"Forward\"] = 1] = \"Forward\";\n  Direction[Direction[\"Backward\"] = -1] = \"Backward\";\n})(Direction || (Direction = {}));\n\nfunction isDocumentScrollingElement(element) {\n  if (!canUseDOM || !element) {\n    return false;\n  }\n\n  return element === document.scrollingElement;\n}\n\nfunction getScrollPosition(scrollingContainer) {\n  const minScroll = {\n    x: 0,\n    y: 0\n  };\n  const dimensions = isDocumentScrollingElement(scrollingContainer) ? {\n    height: window.innerHeight,\n    width: window.innerWidth\n  } : {\n    height: scrollingContainer.clientHeight,\n    width: scrollingContainer.clientWidth\n  };\n  const maxScroll = {\n    x: scrollingContainer.scrollWidth - dimensions.width,\n    y: scrollingContainer.scrollHeight - dimensions.height\n  };\n  const isTop = scrollingContainer.scrollTop <= minScroll.y;\n  const isLeft = scrollingContainer.scrollLeft <= minScroll.x;\n  const isBottom = scrollingContainer.scrollTop >= maxScroll.y;\n  const isRight = scrollingContainer.scrollLeft >= maxScroll.x;\n  return {\n    isTop,\n    isLeft,\n    isBottom,\n    isRight,\n    maxScroll,\n    minScroll\n  };\n}\n\nconst defaultThreshold = {\n  x: 0.2,\n  y: 0.2\n};\n\nfunction getScrollDirectionAndSpeed(scrollContainer, scrollContainerRect, _ref, acceleration, thresholdPercentage) {\n  let {\n    top,\n    left,\n    right,\n    bottom\n  } = _ref;\n\n  if (acceleration === void 0) {\n    acceleration = 10;\n  }\n\n  if (thresholdPercentage === void 0) {\n    thresholdPercentage = defaultThreshold;\n  }\n\n  const {\n    isTop,\n    isBottom,\n    isLeft,\n    isRight\n  } = getScrollPosition(scrollContainer);\n  const direction = {\n    x: 0,\n    y: 0\n  };\n  const speed = {\n    x: 0,\n    y: 0\n  };\n  const threshold = {\n    height: scrollContainerRect.height * thresholdPercentage.y,\n    width: scrollContainerRect.width * thresholdPercentage.x\n  };\n\n  if (!isTop && top <= scrollContainerRect.top + threshold.height) {\n    // Scroll Up\n    direction.y = Direction.Backward;\n    speed.y = acceleration * Math.abs((scrollContainerRect.top + threshold.height - top) / threshold.height);\n  } else if (!isBottom && bottom >= scrollContainerRect.bottom - threshold.height) {\n    // Scroll Down\n    direction.y = Direction.Forward;\n    speed.y = acceleration * Math.abs((scrollContainerRect.bottom - threshold.height - bottom) / threshold.height);\n  }\n\n  if (!isRight && right >= scrollContainerRect.right - threshold.width) {\n    // Scroll Right\n    direction.x = Direction.Forward;\n    speed.x = acceleration * Math.abs((scrollContainerRect.right - threshold.width - right) / threshold.width);\n  } else if (!isLeft && left <= scrollContainerRect.left + threshold.width) {\n    // Scroll Left\n    direction.x = Direction.Backward;\n    speed.x = acceleration * Math.abs((scrollContainerRect.left + threshold.width - left) / threshold.width);\n  }\n\n  return {\n    direction,\n    speed\n  };\n}\n\nfunction getScrollElementRect(element) {\n  if (element === document.scrollingElement) {\n    const {\n      innerWidth,\n      innerHeight\n    } = window;\n    return {\n      top: 0,\n      left: 0,\n      right: innerWidth,\n      bottom: innerHeight,\n      width: innerWidth,\n      height: innerHeight\n    };\n  }\n\n  const {\n    top,\n    left,\n    right,\n    bottom\n  } = element.getBoundingClientRect();\n  return {\n    top,\n    left,\n    right,\n    bottom,\n    width: element.clientWidth,\n    height: element.clientHeight\n  };\n}\n\nfunction getScrollOffsets(scrollableAncestors) {\n  return scrollableAncestors.reduce((acc, node) => {\n    return add(acc, getScrollCoordinates(node));\n  }, defaultCoordinates);\n}\n\nfunction getScrollXOffset(scrollableAncestors) {\n  return scrollableAncestors.reduce((acc, node) => {\n    return acc + getScrollXCoordinate(node);\n  }, 0);\n}\n\nfunction getScrollYOffset(scrollableAncestors) {\n  return scrollableAncestors.reduce((acc, node) => {\n    return acc + getScrollYCoordinate(node);\n  }, 0);\n}\n\nfunction scrollIntoViewIfNeeded(element, measure) {\n  if (measure === void 0) {\n    measure = getClientRect;\n  }\n\n  if (!element) {\n    return;\n  }\n\n  const {\n    top,\n    left,\n    bottom,\n    right\n  } = measure(element);\n  const firstScrollableAncestor = getFirstScrollableAncestor(element);\n\n  if (!firstScrollableAncestor) {\n    return;\n  }\n\n  if (bottom <= 0 || right <= 0 || top >= window.innerHeight || left >= window.innerWidth) {\n    element.scrollIntoView({\n      block: 'center',\n      inline: 'center'\n    });\n  }\n}\n\nconst properties = [['x', ['left', 'right'], getScrollXOffset], ['y', ['top', 'bottom'], getScrollYOffset]];\n\nclass Rect {\n  constructor(rect, element) {\n    this.rect = void 0;\n    this.width = void 0;\n    this.height = void 0;\n    this.top = void 0;\n    this.bottom = void 0;\n    this.right = void 0;\n    this.left = void 0;\n    const scrollableAncestors = getScrollableAncestors(element);\n    const scrollOffsets = getScrollOffsets(scrollableAncestors);\n    this.rect = { ...rect\n    };\n    this.width = rect.width;\n    this.height = rect.height;\n\n    for (const [axis, keys, getScrollOffset] of properties) {\n      for (const key of keys) {\n        Object.defineProperty(this, key, {\n          get: () => {\n            const currentOffsets = getScrollOffset(scrollableAncestors);\n            const scrollOffsetsDeltla = scrollOffsets[axis] - currentOffsets;\n            return this.rect[key] + scrollOffsetsDeltla;\n          },\n          enumerable: true\n        });\n      }\n    }\n\n    Object.defineProperty(this, 'rect', {\n      enumerable: false\n    });\n  }\n\n}\n\nclass Listeners {\n  constructor(target) {\n    this.target = void 0;\n    this.listeners = [];\n\n    this.removeAll = () => {\n      this.listeners.forEach(listener => {\n        var _this$target;\n\n        return (_this$target = this.target) == null ? void 0 : _this$target.removeEventListener(...listener);\n      });\n    };\n\n    this.target = target;\n  }\n\n  add(eventName, handler, options) {\n    var _this$target2;\n\n    (_this$target2 = this.target) == null ? void 0 : _this$target2.addEventListener(eventName, handler, options);\n    this.listeners.push([eventName, handler, options]);\n  }\n\n}\n\nfunction getEventListenerTarget(target) {\n  // If the `event.target` element is removed from the document events will still be targeted\n  // at it, and hence won't always bubble up to the window or document anymore.\n  // If there is any risk of an element being removed while it is being dragged,\n  // the best practice is to attach the event listeners directly to the target.\n  // https://developer.mozilla.org/en-US/docs/Web/API/EventTarget\n  const {\n    EventTarget\n  } = getWindow(target);\n  return target instanceof EventTarget ? target : getOwnerDocument(target);\n}\n\nfunction hasExceededDistance(delta, measurement) {\n  const dx = Math.abs(delta.x);\n  const dy = Math.abs(delta.y);\n\n  if (typeof measurement === 'number') {\n    return Math.sqrt(dx ** 2 + dy ** 2) > measurement;\n  }\n\n  if ('x' in measurement && 'y' in measurement) {\n    return dx > measurement.x && dy > measurement.y;\n  }\n\n  if ('x' in measurement) {\n    return dx > measurement.x;\n  }\n\n  if ('y' in measurement) {\n    return dy > measurement.y;\n  }\n\n  return false;\n}\n\nvar EventName;\n\n(function (EventName) {\n  EventName[\"Click\"] = \"click\";\n  EventName[\"DragStart\"] = \"dragstart\";\n  EventName[\"Keydown\"] = \"keydown\";\n  EventName[\"ContextMenu\"] = \"contextmenu\";\n  EventName[\"Resize\"] = \"resize\";\n  EventName[\"SelectionChange\"] = \"selectionchange\";\n  EventName[\"VisibilityChange\"] = \"visibilitychange\";\n})(EventName || (EventName = {}));\n\nfunction preventDefault(event) {\n  event.preventDefault();\n}\n\nfunction stopPropagation(event) {\n  event.stopPropagation();\n}\n\nvar KeyboardCode;\n\n(function (KeyboardCode) {\n  KeyboardCode[\"Space\"] = \"Space\";\n  KeyboardCode[\"Down\"] = \"ArrowDown\";\n  KeyboardCode[\"Right\"] = \"ArrowRight\";\n  KeyboardCode[\"Left\"] = \"ArrowLeft\";\n  KeyboardCode[\"Up\"] = \"ArrowUp\";\n  KeyboardCode[\"Esc\"] = \"Escape\";\n  KeyboardCode[\"Enter\"] = \"Enter\";\n})(KeyboardCode || (KeyboardCode = {}));\n\nconst defaultKeyboardCodes = {\n  start: [KeyboardCode.Space, KeyboardCode.Enter],\n  cancel: [KeyboardCode.Esc],\n  end: [KeyboardCode.Space, KeyboardCode.Enter]\n};\n\nconst defaultKeyboardCoordinateGetter = (event, _ref) => {\n  let {\n    currentCoordinates\n  } = _ref;\n\n  switch (event.code) {\n    case KeyboardCode.Right:\n      return { ...currentCoordinates,\n        x: currentCoordinates.x + 25\n      };\n\n    case KeyboardCode.Left:\n      return { ...currentCoordinates,\n        x: currentCoordinates.x - 25\n      };\n\n    case KeyboardCode.Down:\n      return { ...currentCoordinates,\n        y: currentCoordinates.y + 25\n      };\n\n    case KeyboardCode.Up:\n      return { ...currentCoordinates,\n        y: currentCoordinates.y - 25\n      };\n  }\n\n  return undefined;\n};\n\nclass KeyboardSensor {\n  constructor(props) {\n    this.props = void 0;\n    this.autoScrollEnabled = false;\n    this.referenceCoordinates = void 0;\n    this.listeners = void 0;\n    this.windowListeners = void 0;\n    this.props = props;\n    const {\n      event: {\n        target\n      }\n    } = props;\n    this.props = props;\n    this.listeners = new Listeners(getOwnerDocument(target));\n    this.windowListeners = new Listeners(getWindow(target));\n    this.handleKeyDown = this.handleKeyDown.bind(this);\n    this.handleCancel = this.handleCancel.bind(this);\n    this.attach();\n  }\n\n  attach() {\n    this.handleStart();\n    this.windowListeners.add(EventName.Resize, this.handleCancel);\n    this.windowListeners.add(EventName.VisibilityChange, this.handleCancel);\n    setTimeout(() => this.listeners.add(EventName.Keydown, this.handleKeyDown));\n  }\n\n  handleStart() {\n    const {\n      activeNode,\n      onStart\n    } = this.props;\n    const node = activeNode.node.current;\n\n    if (node) {\n      scrollIntoViewIfNeeded(node);\n    }\n\n    onStart(defaultCoordinates);\n  }\n\n  handleKeyDown(event) {\n    if (isKeyboardEvent(event)) {\n      const {\n        active,\n        context,\n        options\n      } = this.props;\n      const {\n        keyboardCodes = defaultKeyboardCodes,\n        coordinateGetter = defaultKeyboardCoordinateGetter,\n        scrollBehavior = 'smooth'\n      } = options;\n      const {\n        code\n      } = event;\n\n      if (keyboardCodes.end.includes(code)) {\n        this.handleEnd(event);\n        return;\n      }\n\n      if (keyboardCodes.cancel.includes(code)) {\n        this.handleCancel(event);\n        return;\n      }\n\n      const {\n        collisionRect\n      } = context.current;\n      const currentCoordinates = collisionRect ? {\n        x: collisionRect.left,\n        y: collisionRect.top\n      } : defaultCoordinates;\n\n      if (!this.referenceCoordinates) {\n        this.referenceCoordinates = currentCoordinates;\n      }\n\n      const newCoordinates = coordinateGetter(event, {\n        active,\n        context: context.current,\n        currentCoordinates\n      });\n\n      if (newCoordinates) {\n        const coordinatesDelta = subtract(newCoordinates, currentCoordinates);\n        const scrollDelta = {\n          x: 0,\n          y: 0\n        };\n        const {\n          scrollableAncestors\n        } = context.current;\n\n        for (const scrollContainer of scrollableAncestors) {\n          const direction = event.code;\n          const {\n            isTop,\n            isRight,\n            isLeft,\n            isBottom,\n            maxScroll,\n            minScroll\n          } = getScrollPosition(scrollContainer);\n          const scrollElementRect = getScrollElementRect(scrollContainer);\n          const clampedCoordinates = {\n            x: Math.min(direction === KeyboardCode.Right ? scrollElementRect.right - scrollElementRect.width / 2 : scrollElementRect.right, Math.max(direction === KeyboardCode.Right ? scrollElementRect.left : scrollElementRect.left + scrollElementRect.width / 2, newCoordinates.x)),\n            y: Math.min(direction === KeyboardCode.Down ? scrollElementRect.bottom - scrollElementRect.height / 2 : scrollElementRect.bottom, Math.max(direction === KeyboardCode.Down ? scrollElementRect.top : scrollElementRect.top + scrollElementRect.height / 2, newCoordinates.y))\n          };\n          const canScrollX = direction === KeyboardCode.Right && !isRight || direction === KeyboardCode.Left && !isLeft;\n          const canScrollY = direction === KeyboardCode.Down && !isBottom || direction === KeyboardCode.Up && !isTop;\n\n          if (canScrollX && clampedCoordinates.x !== newCoordinates.x) {\n            const newScrollCoordinates = scrollContainer.scrollLeft + coordinatesDelta.x;\n            const canFullyScrollToNewCoordinates = direction === KeyboardCode.Right && newScrollCoordinates <= maxScroll.x || direction === KeyboardCode.Left && newScrollCoordinates >= minScroll.x;\n\n            if (canFullyScrollToNewCoordinates && !coordinatesDelta.y) {\n              // We don't need to update coordinates, the scroll adjustment alone will trigger\n              // logic to auto-detect the new container we are over\n              scrollContainer.scrollTo({\n                left: newScrollCoordinates,\n                behavior: scrollBehavior\n              });\n              return;\n            }\n\n            scrollDelta.x = direction === KeyboardCode.Right ? scrollContainer.scrollLeft - maxScroll.x : scrollContainer.scrollLeft - minScroll.x;\n            scrollContainer.scrollBy({\n              left: -scrollDelta.x,\n              behavior: scrollBehavior\n            });\n            break;\n          } else if (canScrollY && clampedCoordinates.y !== newCoordinates.y) {\n            const newScrollCoordinates = scrollContainer.scrollTop + coordinatesDelta.y;\n            const canFullyScrollToNewCoordinates = direction === KeyboardCode.Down && newScrollCoordinates <= maxScroll.y || direction === KeyboardCode.Up && newScrollCoordinates >= minScroll.y;\n\n            if (canFullyScrollToNewCoordinates && !coordinatesDelta.x) {\n              // We don't need to update coordinates, the scroll adjustment alone will trigger\n              // logic to auto-detect the new container we are over\n              scrollContainer.scrollTo({\n                top: newScrollCoordinates,\n                behavior: scrollBehavior\n              });\n              return;\n            }\n\n            scrollDelta.y = direction === KeyboardCode.Down ? scrollContainer.scrollTop - maxScroll.y : scrollContainer.scrollTop - minScroll.y;\n            scrollContainer.scrollBy({\n              top: -scrollDelta.y,\n              behavior: scrollBehavior\n            });\n            break;\n          }\n        }\n\n        this.handleMove(event, add(subtract(newCoordinates, this.referenceCoordinates), scrollDelta));\n      }\n    }\n  }\n\n  handleMove(event, coordinates) {\n    const {\n      onMove\n    } = this.props;\n    event.preventDefault();\n    onMove(coordinates);\n  }\n\n  handleEnd(event) {\n    const {\n      onEnd\n    } = this.props;\n    event.preventDefault();\n    this.detach();\n    onEnd();\n  }\n\n  handleCancel(event) {\n    const {\n      onCancel\n    } = this.props;\n    event.preventDefault();\n    this.detach();\n    onCancel();\n  }\n\n  detach() {\n    this.listeners.removeAll();\n    this.windowListeners.removeAll();\n  }\n\n}\n\nKeyboardSensor.activators = [{\n  eventName: 'onKeyDown',\n  handler: (event, _ref, _ref2) => {\n    let {\n      keyboardCodes = defaultKeyboardCodes,\n      onActivation\n    } = _ref;\n    let {\n      active\n    } = _ref2;\n    const {\n      code\n    } = event.nativeEvent;\n\n    if (keyboardCodes.start.includes(code)) {\n      const activator = active.activatorNode.current;\n\n      if (activator && event.target !== activator) {\n        return false;\n      }\n\n      event.preventDefault();\n      onActivation == null ? void 0 : onActivation({\n        event: event.nativeEvent\n      });\n      return true;\n    }\n\n    return false;\n  }\n}];\n\nfunction isDistanceConstraint(constraint) {\n  return Boolean(constraint && 'distance' in constraint);\n}\n\nfunction isDelayConstraint(constraint) {\n  return Boolean(constraint && 'delay' in constraint);\n}\n\nclass AbstractPointerSensor {\n  constructor(props, events, listenerTarget) {\n    var _getEventCoordinates;\n\n    if (listenerTarget === void 0) {\n      listenerTarget = getEventListenerTarget(props.event.target);\n    }\n\n    this.props = void 0;\n    this.events = void 0;\n    this.autoScrollEnabled = true;\n    this.document = void 0;\n    this.activated = false;\n    this.initialCoordinates = void 0;\n    this.timeoutId = null;\n    this.listeners = void 0;\n    this.documentListeners = void 0;\n    this.windowListeners = void 0;\n    this.props = props;\n    this.events = events;\n    const {\n      event\n    } = props;\n    const {\n      target\n    } = event;\n    this.props = props;\n    this.events = events;\n    this.document = getOwnerDocument(target);\n    this.documentListeners = new Listeners(this.document);\n    this.listeners = new Listeners(listenerTarget);\n    this.windowListeners = new Listeners(getWindow(target));\n    this.initialCoordinates = (_getEventCoordinates = getEventCoordinates(event)) != null ? _getEventCoordinates : defaultCoordinates;\n    this.handleStart = this.handleStart.bind(this);\n    this.handleMove = this.handleMove.bind(this);\n    this.handleEnd = this.handleEnd.bind(this);\n    this.handleCancel = this.handleCancel.bind(this);\n    this.handleKeydown = this.handleKeydown.bind(this);\n    this.removeTextSelection = this.removeTextSelection.bind(this);\n    this.attach();\n  }\n\n  attach() {\n    const {\n      events,\n      props: {\n        options: {\n          activationConstraint\n        }\n      }\n    } = this;\n    this.listeners.add(events.move.name, this.handleMove, {\n      passive: false\n    });\n    this.listeners.add(events.end.name, this.handleEnd);\n    this.windowListeners.add(EventName.Resize, this.handleCancel);\n    this.windowListeners.add(EventName.DragStart, preventDefault);\n    this.windowListeners.add(EventName.VisibilityChange, this.handleCancel);\n    this.windowListeners.add(EventName.ContextMenu, preventDefault);\n    this.documentListeners.add(EventName.Keydown, this.handleKeydown);\n\n    if (activationConstraint) {\n      if (isDistanceConstraint(activationConstraint)) {\n        return;\n      }\n\n      if (isDelayConstraint(activationConstraint)) {\n        this.timeoutId = setTimeout(this.handleStart, activationConstraint.delay);\n        return;\n      }\n    }\n\n    this.handleStart();\n  }\n\n  detach() {\n    this.listeners.removeAll();\n    this.windowListeners.removeAll(); // Wait until the next event loop before removing document listeners\n    // This is necessary because we listen for `click` and `selection` events on the document\n\n    setTimeout(this.documentListeners.removeAll, 50);\n\n    if (this.timeoutId !== null) {\n      clearTimeout(this.timeoutId);\n      this.timeoutId = null;\n    }\n  }\n\n  handleStart() {\n    const {\n      initialCoordinates\n    } = this;\n    const {\n      onStart\n    } = this.props;\n\n    if (initialCoordinates) {\n      this.activated = true; // Stop propagation of click events once activation constraints are met\n\n      this.documentListeners.add(EventName.Click, stopPropagation, {\n        capture: true\n      }); // Remove any text selection from the document\n\n      this.removeTextSelection(); // Prevent further text selection while dragging\n\n      this.documentListeners.add(EventName.SelectionChange, this.removeTextSelection);\n      onStart(initialCoordinates);\n    }\n  }\n\n  handleMove(event) {\n    var _getEventCoordinates2;\n\n    const {\n      activated,\n      initialCoordinates,\n      props\n    } = this;\n    const {\n      onMove,\n      options: {\n        activationConstraint\n      }\n    } = props;\n\n    if (!initialCoordinates) {\n      return;\n    }\n\n    const coordinates = (_getEventCoordinates2 = getEventCoordinates(event)) != null ? _getEventCoordinates2 : defaultCoordinates;\n    const delta = subtract(initialCoordinates, coordinates);\n\n    if (!activated && activationConstraint) {\n      // Constraint validation\n      if (isDelayConstraint(activationConstraint)) {\n        if (hasExceededDistance(delta, activationConstraint.tolerance)) {\n          return this.handleCancel();\n        }\n\n        return;\n      }\n\n      if (isDistanceConstraint(activationConstraint)) {\n        if (activationConstraint.tolerance != null && hasExceededDistance(delta, activationConstraint.tolerance)) {\n          return this.handleCancel();\n        }\n\n        if (hasExceededDistance(delta, activationConstraint.distance)) {\n          return this.handleStart();\n        }\n\n        return;\n      }\n    }\n\n    if (event.cancelable) {\n      event.preventDefault();\n    }\n\n    onMove(coordinates);\n  }\n\n  handleEnd() {\n    const {\n      onEnd\n    } = this.props;\n    this.detach();\n    onEnd();\n  }\n\n  handleCancel() {\n    const {\n      onCancel\n    } = this.props;\n    this.detach();\n    onCancel();\n  }\n\n  handleKeydown(event) {\n    if (event.code === KeyboardCode.Esc) {\n      this.handleCancel();\n    }\n  }\n\n  removeTextSelection() {\n    var _this$document$getSel;\n\n    (_this$document$getSel = this.document.getSelection()) == null ? void 0 : _this$document$getSel.removeAllRanges();\n  }\n\n}\n\nconst events = {\n  move: {\n    name: 'pointermove'\n  },\n  end: {\n    name: 'pointerup'\n  }\n};\n\nclass PointerSensor extends AbstractPointerSensor {\n  constructor(props) {\n    const {\n      event\n    } = props; // Pointer events stop firing if the target is unmounted while dragging\n    // Therefore we attach listeners to the owner document instead\n\n    const listenerTarget = getOwnerDocument(event.target);\n    super(props, events, listenerTarget);\n  }\n\n}\n\nPointerSensor.activators = [{\n  eventName: 'onPointerDown',\n  handler: (_ref, _ref2) => {\n    let {\n      nativeEvent: event\n    } = _ref;\n    let {\n      onActivation\n    } = _ref2;\n\n    if (!event.isPrimary || event.button !== 0) {\n      return false;\n    }\n\n    onActivation == null ? void 0 : onActivation({\n      event\n    });\n    return true;\n  }\n}];\nconst events$1 = {\n  move: {\n    name: 'mousemove'\n  },\n  end: {\n    name: 'mouseup'\n  }\n};\nvar MouseButton;\n\n(function (MouseButton) {\n  MouseButton[MouseButton[\"RightClick\"] = 2] = \"RightClick\";\n})(MouseButton || (MouseButton = {}));\n\nclass MouseSensor extends AbstractPointerSensor {\n  constructor(props) {\n    super(props, events$1, getOwnerDocument(props.event.target));\n  }\n\n}\n\nMouseSensor.activators = [{\n  eventName: 'onMouseDown',\n  handler: (_ref, _ref2) => {\n    let {\n      nativeEvent: event\n    } = _ref;\n    let {\n      onActivation\n    } = _ref2;\n\n    if (event.button === MouseButton.RightClick) {\n      return false;\n    }\n\n    onActivation == null ? void 0 : onActivation({\n      event\n    });\n    return true;\n  }\n}];\nconst events$2 = {\n  move: {\n    name: 'touchmove'\n  },\n  end: {\n    name: 'touchend'\n  }\n};\n\nclass TouchSensor extends AbstractPointerSensor {\n  constructor(props) {\n    super(props, events$2);\n  }\n\n  static setup() {\n    // Adding a non-capture and non-passive `touchmove` listener in order\n    // to force `event.preventDefault()` calls to work in dynamically added\n    // touchmove event handlers. This is required for iOS Safari.\n    window.addEventListener(events$2.move.name, noop, {\n      capture: false,\n      passive: false\n    });\n    return function teardown() {\n      window.removeEventListener(events$2.move.name, noop);\n    }; // We create a new handler because the teardown function of another sensor\n    // could remove our event listener if we use a referentially equal listener.\n\n    function noop() {}\n  }\n\n}\n\nTouchSensor.activators = [{\n  eventName: 'onTouchStart',\n  handler: (_ref, _ref2) => {\n    let {\n      nativeEvent: event\n    } = _ref;\n    let {\n      onActivation\n    } = _ref2;\n    const {\n      touches\n    } = event;\n\n    if (touches.length > 1) {\n      return false;\n    }\n\n    onActivation == null ? void 0 : onActivation({\n      event\n    });\n    return true;\n  }\n}];\nvar AutoScrollActivator;\n\n(function (AutoScrollActivator) {\n  AutoScrollActivator[AutoScrollActivator[\"Pointer\"] = 0] = \"Pointer\";\n  AutoScrollActivator[AutoScrollActivator[\"DraggableRect\"] = 1] = \"DraggableRect\";\n})(AutoScrollActivator || (AutoScrollActivator = {}));\n\nvar TraversalOrder;\n\n(function (TraversalOrder) {\n  TraversalOrder[TraversalOrder[\"TreeOrder\"] = 0] = \"TreeOrder\";\n  TraversalOrder[TraversalOrder[\"ReversedTreeOrder\"] = 1] = \"ReversedTreeOrder\";\n})(TraversalOrder || (TraversalOrder = {}));\n\nfunction useAutoScroller(_ref) {\n  let {\n    acceleration,\n    activator = AutoScrollActivator.Pointer,\n    canScroll,\n    draggingRect,\n    enabled,\n    interval = 5,\n    order = TraversalOrder.TreeOrder,\n    pointerCoordinates,\n    scrollableAncestors,\n    scrollableAncestorRects,\n    delta,\n    threshold\n  } = _ref;\n  const scrollIntent = useScrollIntent({\n    delta,\n    disabled: !enabled\n  });\n  const [setAutoScrollInterval, clearAutoScrollInterval] = useInterval();\n  const scrollSpeed = useRef({\n    x: 0,\n    y: 0\n  });\n  const scrollDirection = useRef({\n    x: 0,\n    y: 0\n  });\n  const rect = useMemo(() => {\n    switch (activator) {\n      case AutoScrollActivator.Pointer:\n        return pointerCoordinates ? {\n          top: pointerCoordinates.y,\n          bottom: pointerCoordinates.y,\n          left: pointerCoordinates.x,\n          right: pointerCoordinates.x\n        } : null;\n\n      case AutoScrollActivator.DraggableRect:\n        return draggingRect;\n    }\n  }, [activator, draggingRect, pointerCoordinates]);\n  const scrollContainerRef = useRef(null);\n  const autoScroll = useCallback(() => {\n    const scrollContainer = scrollContainerRef.current;\n\n    if (!scrollContainer) {\n      return;\n    }\n\n    const scrollLeft = scrollSpeed.current.x * scrollDirection.current.x;\n    const scrollTop = scrollSpeed.current.y * scrollDirection.current.y;\n    scrollContainer.scrollBy(scrollLeft, scrollTop);\n  }, []);\n  const sortedScrollableAncestors = useMemo(() => order === TraversalOrder.TreeOrder ? [...scrollableAncestors].reverse() : scrollableAncestors, [order, scrollableAncestors]);\n  useEffect(() => {\n    if (!enabled || !scrollableAncestors.length || !rect) {\n      clearAutoScrollInterval();\n      return;\n    }\n\n    for (const scrollContainer of sortedScrollableAncestors) {\n      if ((canScroll == null ? void 0 : canScroll(scrollContainer)) === false) {\n        continue;\n      }\n\n      const index = scrollableAncestors.indexOf(scrollContainer);\n      const scrollContainerRect = scrollableAncestorRects[index];\n\n      if (!scrollContainerRect) {\n        continue;\n      }\n\n      const {\n        direction,\n        speed\n      } = getScrollDirectionAndSpeed(scrollContainer, scrollContainerRect, rect, acceleration, threshold);\n\n      for (const axis of ['x', 'y']) {\n        if (!scrollIntent[axis][direction[axis]]) {\n          speed[axis] = 0;\n          direction[axis] = 0;\n        }\n      }\n\n      if (speed.x > 0 || speed.y > 0) {\n        clearAutoScrollInterval();\n        scrollContainerRef.current = scrollContainer;\n        setAutoScrollInterval(autoScroll, interval);\n        scrollSpeed.current = speed;\n        scrollDirection.current = direction;\n        return;\n      }\n    }\n\n    scrollSpeed.current = {\n      x: 0,\n      y: 0\n    };\n    scrollDirection.current = {\n      x: 0,\n      y: 0\n    };\n    clearAutoScrollInterval();\n  }, // eslint-disable-next-line react-hooks/exhaustive-deps\n  [acceleration, autoScroll, canScroll, clearAutoScrollInterval, enabled, interval, // eslint-disable-next-line react-hooks/exhaustive-deps\n  JSON.stringify(rect), // eslint-disable-next-line react-hooks/exhaustive-deps\n  JSON.stringify(scrollIntent), setAutoScrollInterval, scrollableAncestors, sortedScrollableAncestors, scrollableAncestorRects, // eslint-disable-next-line react-hooks/exhaustive-deps\n  JSON.stringify(threshold)]);\n}\n\nconst defaultScrollIntent = {\n  x: {\n    [Direction.Backward]: false,\n    [Direction.Forward]: false\n  },\n  y: {\n    [Direction.Backward]: false,\n    [Direction.Forward]: false\n  }\n};\n\nfunction useScrollIntent(_ref2) {\n  let {\n    delta,\n    disabled\n  } = _ref2;\n  const previousDelta = usePrevious(delta);\n  return useLazyMemo(previousIntent => {\n    if (disabled || !previousDelta || !previousIntent) {\n      // Reset scroll intent tracking when auto-scrolling is disabled\n      return defaultScrollIntent;\n    }\n\n    const direction = {\n      x: Math.sign(delta.x - previousDelta.x),\n      y: Math.sign(delta.y - previousDelta.y)\n    }; // Keep track of the user intent to scroll in each direction for both axis\n\n    return {\n      x: {\n        [Direction.Backward]: previousIntent.x[Direction.Backward] || direction.x === -1,\n        [Direction.Forward]: previousIntent.x[Direction.Forward] || direction.x === 1\n      },\n      y: {\n        [Direction.Backward]: previousIntent.y[Direction.Backward] || direction.y === -1,\n        [Direction.Forward]: previousIntent.y[Direction.Forward] || direction.y === 1\n      }\n    };\n  }, [disabled, delta, previousDelta]);\n}\n\nfunction useCachedNode(draggableNodes, id) {\n  const draggableNode = id !== null ? draggableNodes.get(id) : undefined;\n  const node = draggableNode ? draggableNode.node.current : null;\n  return useLazyMemo(cachedNode => {\n    var _ref;\n\n    if (id === null) {\n      return null;\n    } // In some cases, the draggable node can unmount while dragging\n    // This is the case for virtualized lists. In those situations,\n    // we fall back to the last known value for that node.\n\n\n    return (_ref = node != null ? node : cachedNode) != null ? _ref : null;\n  }, [node, id]);\n}\n\nfunction useCombineActivators(sensors, getSyntheticHandler) {\n  return useMemo(() => sensors.reduce((accumulator, sensor) => {\n    const {\n      sensor: Sensor\n    } = sensor;\n    const sensorActivators = Sensor.activators.map(activator => ({\n      eventName: activator.eventName,\n      handler: getSyntheticHandler(activator.handler, sensor)\n    }));\n    return [...accumulator, ...sensorActivators];\n  }, []), [sensors, getSyntheticHandler]);\n}\n\nvar MeasuringStrategy;\n\n(function (MeasuringStrategy) {\n  MeasuringStrategy[MeasuringStrategy[\"Always\"] = 0] = \"Always\";\n  MeasuringStrategy[MeasuringStrategy[\"BeforeDragging\"] = 1] = \"BeforeDragging\";\n  MeasuringStrategy[MeasuringStrategy[\"WhileDragging\"] = 2] = \"WhileDragging\";\n})(MeasuringStrategy || (MeasuringStrategy = {}));\n\nvar MeasuringFrequency;\n\n(function (MeasuringFrequency) {\n  MeasuringFrequency[\"Optimized\"] = \"optimized\";\n})(MeasuringFrequency || (MeasuringFrequency = {}));\n\nconst defaultValue = /*#__PURE__*/new Map();\n\nfunction useDroppableMeasuring(containers, _ref) {\n  let {\n    dragging,\n    dependencies,\n    config\n  } = _ref;\n  const [containerIdsScheduledForMeasurement, setContainerIdsScheduledForMeasurement] = useState(null);\n  const measuringScheduled = containerIdsScheduledForMeasurement != null;\n  const {\n    frequency,\n    measure,\n    strategy\n  } = config;\n  const containersRef = useRef(containers);\n  const disabled = isDisabled();\n  const disabledRef = useLatestValue(disabled);\n  const measureDroppableContainers = useCallback(function (ids) {\n    if (ids === void 0) {\n      ids = [];\n    }\n\n    if (disabledRef.current) {\n      return;\n    }\n\n    setContainerIdsScheduledForMeasurement(value => value ? value.concat(ids) : ids);\n  }, [disabledRef]);\n  const timeoutId = useRef(null);\n  const droppableRects = useLazyMemo(previousValue => {\n    if (disabled && !dragging) {\n      return defaultValue;\n    }\n\n    const ids = containerIdsScheduledForMeasurement;\n\n    if (!previousValue || previousValue === defaultValue || containersRef.current !== containers || ids != null) {\n      const map = new Map();\n\n      for (let container of containers) {\n        if (!container) {\n          continue;\n        }\n\n        if (ids && ids.length > 0 && !ids.includes(container.id) && container.rect.current) {\n          // This container does not need to be re-measured\n          map.set(container.id, container.rect.current);\n          continue;\n        }\n\n        const node = container.node.current;\n        const rect = node ? new Rect(measure(node), node) : null;\n        container.rect.current = rect;\n\n        if (rect) {\n          map.set(container.id, rect);\n        }\n      }\n\n      return map;\n    }\n\n    return previousValue;\n  }, [containers, containerIdsScheduledForMeasurement, dragging, disabled, measure]);\n  useEffect(() => {\n    containersRef.current = containers;\n  }, [containers]);\n  useEffect(() => {\n    if (disabled) {\n      return;\n    }\n\n    requestAnimationFrame(() => measureDroppableContainers());\n  }, // eslint-disable-next-line react-hooks/exhaustive-deps\n  [dragging, disabled]);\n  useEffect(() => {\n    if (measuringScheduled) {\n      setContainerIdsScheduledForMeasurement(null);\n    }\n  }, [measuringScheduled]);\n  useEffect(() => {\n    if (disabled || typeof frequency !== 'number' || timeoutId.current !== null) {\n      return;\n    }\n\n    timeoutId.current = setTimeout(() => {\n      measureDroppableContainers();\n      timeoutId.current = null;\n    }, frequency);\n  }, // eslint-disable-next-line react-hooks/exhaustive-deps\n  [frequency, disabled, measureDroppableContainers, ...dependencies]);\n  return {\n    droppableRects,\n    measureDroppableContainers,\n    measuringScheduled\n  };\n\n  function isDisabled() {\n    switch (strategy) {\n      case MeasuringStrategy.Always:\n        return false;\n\n      case MeasuringStrategy.BeforeDragging:\n        return dragging;\n\n      default:\n        return !dragging;\n    }\n  }\n}\n\nfunction useInitialValue(value, computeFn) {\n  return useLazyMemo(previousValue => {\n    if (!value) {\n      return null;\n    }\n\n    if (previousValue) {\n      return previousValue;\n    }\n\n    return typeof computeFn === 'function' ? computeFn(value) : value;\n  }, [computeFn, value]);\n}\n\nfunction useInitialRect(node, measure) {\n  return useInitialValue(node, measure);\n}\n/**\r\n * Returns a new MutationObserver instance.\r\n * If `MutationObserver` is undefined in the execution environment, returns `undefined`.\r\n */\n\n\nfunction useMutationObserver(_ref) {\n  let {\n    callback,\n    disabled\n  } = _ref;\n  const handleMutations = useEvent(callback);\n  const mutationObserver = useMemo(() => {\n    if (disabled || typeof window === 'undefined' || typeof window.MutationObserver === 'undefined') {\n      return undefined;\n    }\n\n    const {\n      MutationObserver\n    } = window;\n    return new MutationObserver(handleMutations);\n  }, [handleMutations, disabled]);\n  useEffect(() => {\n    return () => mutationObserver == null ? void 0 : mutationObserver.disconnect();\n  }, [mutationObserver]);\n  return mutationObserver;\n}\n/**\r\n * Returns a new ResizeObserver instance bound to the `onResize` callback.\r\n * If `ResizeObserver` is undefined in the execution environment, returns `undefined`.\r\n */\n\n\nfunction useResizeObserver(_ref) {\n  let {\n    callback,\n    disabled\n  } = _ref;\n  const handleResize = useEvent(callback);\n  const resizeObserver = useMemo(() => {\n    if (disabled || typeof window === 'undefined' || typeof window.ResizeObserver === 'undefined') {\n      return undefined;\n    }\n\n    const {\n      ResizeObserver\n    } = window;\n    return new ResizeObserver(handleResize);\n  }, // eslint-disable-next-line react-hooks/exhaustive-deps\n  [disabled]);\n  useEffect(() => {\n    return () => resizeObserver == null ? void 0 : resizeObserver.disconnect();\n  }, [resizeObserver]);\n  return resizeObserver;\n}\n\nfunction defaultMeasure(element) {\n  return new Rect(getClientRect(element), element);\n}\n\nfunction useRect(element, measure, fallbackRect) {\n  if (measure === void 0) {\n    measure = defaultMeasure;\n  }\n\n  const [rect, measureRect] = useReducer(reducer, null);\n  const mutationObserver = useMutationObserver({\n    callback(records) {\n      if (!element) {\n        return;\n      }\n\n      for (const record of records) {\n        const {\n          type,\n          target\n        } = record;\n\n        if (type === 'childList' && target instanceof HTMLElement && target.contains(element)) {\n          measureRect();\n          break;\n        }\n      }\n    }\n\n  });\n  const resizeObserver = useResizeObserver({\n    callback: measureRect\n  });\n  useIsomorphicLayoutEffect(() => {\n    measureRect();\n\n    if (element) {\n      resizeObserver == null ? void 0 : resizeObserver.observe(element);\n      mutationObserver == null ? void 0 : mutationObserver.observe(document.body, {\n        childList: true,\n        subtree: true\n      });\n    } else {\n      resizeObserver == null ? void 0 : resizeObserver.disconnect();\n      mutationObserver == null ? void 0 : mutationObserver.disconnect();\n    }\n  }, [element]);\n  return rect;\n\n  function reducer(currentRect) {\n    if (!element) {\n      return null;\n    }\n\n    if (element.isConnected === false) {\n      var _ref; // Fall back to last rect we measured if the element is\n      // no longer connected to the DOM.\n\n\n      return (_ref = currentRect != null ? currentRect : fallbackRect) != null ? _ref : null;\n    }\n\n    const newRect = measure(element);\n\n    if (JSON.stringify(currentRect) === JSON.stringify(newRect)) {\n      return currentRect;\n    }\n\n    return newRect;\n  }\n}\n\nfunction useRectDelta(rect) {\n  const initialRect = useInitialValue(rect);\n  return getRectDelta(rect, initialRect);\n}\n\nconst defaultValue$1 = [];\n\nfunction useScrollableAncestors(node) {\n  const previousNode = useRef(node);\n  const ancestors = useLazyMemo(previousValue => {\n    if (!node) {\n      return defaultValue$1;\n    }\n\n    if (previousValue && previousValue !== defaultValue$1 && node && previousNode.current && node.parentNode === previousNode.current.parentNode) {\n      return previousValue;\n    }\n\n    return getScrollableAncestors(node);\n  }, [node]);\n  useEffect(() => {\n    previousNode.current = node;\n  }, [node]);\n  return ancestors;\n}\n\nfunction useScrollOffsets(elements) {\n  const [scrollCoordinates, setScrollCoordinates] = useState(null);\n  const prevElements = useRef(elements); // To-do: Throttle the handleScroll callback\n\n  const handleScroll = useCallback(event => {\n    const scrollingElement = getScrollableElement(event.target);\n\n    if (!scrollingElement) {\n      return;\n    }\n\n    setScrollCoordinates(scrollCoordinates => {\n      if (!scrollCoordinates) {\n        return null;\n      }\n\n      scrollCoordinates.set(scrollingElement, getScrollCoordinates(scrollingElement));\n      return new Map(scrollCoordinates);\n    });\n  }, []);\n  useEffect(() => {\n    const previousElements = prevElements.current;\n\n    if (elements !== previousElements) {\n      cleanup(previousElements);\n      const entries = elements.map(element => {\n        const scrollableElement = getScrollableElement(element);\n\n        if (scrollableElement) {\n          scrollableElement.addEventListener('scroll', handleScroll, {\n            passive: true\n          });\n          return [scrollableElement, getScrollCoordinates(scrollableElement)];\n        }\n\n        return null;\n      }).filter(entry => entry != null);\n      setScrollCoordinates(entries.length ? new Map(entries) : null);\n      prevElements.current = elements;\n    }\n\n    return () => {\n      cleanup(elements);\n      cleanup(previousElements);\n    };\n\n    function cleanup(elements) {\n      elements.forEach(element => {\n        const scrollableElement = getScrollableElement(element);\n        scrollableElement == null ? void 0 : scrollableElement.removeEventListener('scroll', handleScroll);\n      });\n    }\n  }, [handleScroll, elements]);\n  return useMemo(() => {\n    if (elements.length) {\n      return scrollCoordinates ? Array.from(scrollCoordinates.values()).reduce((acc, coordinates) => add(acc, coordinates), defaultCoordinates) : getScrollOffsets(elements);\n    }\n\n    return defaultCoordinates;\n  }, [elements, scrollCoordinates]);\n}\n\nfunction useScrollOffsetsDelta(scrollOffsets, dependencies) {\n  if (dependencies === void 0) {\n    dependencies = [];\n  }\n\n  const initialScrollOffsets = useRef(null);\n  useEffect(() => {\n    initialScrollOffsets.current = null;\n  }, // eslint-disable-next-line react-hooks/exhaustive-deps\n  dependencies);\n  useEffect(() => {\n    const hasScrollOffsets = scrollOffsets !== defaultCoordinates;\n\n    if (hasScrollOffsets && !initialScrollOffsets.current) {\n      initialScrollOffsets.current = scrollOffsets;\n    }\n\n    if (!hasScrollOffsets && initialScrollOffsets.current) {\n      initialScrollOffsets.current = null;\n    }\n  }, [scrollOffsets]);\n  return initialScrollOffsets.current ? subtract(scrollOffsets, initialScrollOffsets.current) : defaultCoordinates;\n}\n\nfunction useSensorSetup(sensors) {\n  useEffect(() => {\n    if (!canUseDOM) {\n      return;\n    }\n\n    const teardownFns = sensors.map(_ref => {\n      let {\n        sensor\n      } = _ref;\n      return sensor.setup == null ? void 0 : sensor.setup();\n    });\n    return () => {\n      for (const teardown of teardownFns) {\n        teardown == null ? void 0 : teardown();\n      }\n    };\n  }, // TO-DO: Sensors length could theoretically change which would not be a valid dependency\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  sensors.map(_ref2 => {\n    let {\n      sensor\n    } = _ref2;\n    return sensor;\n  }));\n}\n\nfunction useSyntheticListeners(listeners, id) {\n  return useMemo(() => {\n    return listeners.reduce((acc, _ref) => {\n      let {\n        eventName,\n        handler\n      } = _ref;\n\n      acc[eventName] = event => {\n        handler(event, id);\n      };\n\n      return acc;\n    }, {});\n  }, [listeners, id]);\n}\n\nfunction useWindowRect(element) {\n  return useMemo(() => element ? getWindowClientRect(element) : null, [element]);\n}\n\nconst defaultValue$2 = [];\n\nfunction useRects(elements, measure) {\n  if (measure === void 0) {\n    measure = getClientRect;\n  }\n\n  const [firstElement] = elements;\n  const windowRect = useWindowRect(firstElement ? getWindow(firstElement) : null);\n  const [rects, measureRects] = useReducer(reducer, defaultValue$2);\n  const resizeObserver = useResizeObserver({\n    callback: measureRects\n  });\n\n  if (elements.length > 0 && rects === defaultValue$2) {\n    measureRects();\n  }\n\n  useIsomorphicLayoutEffect(() => {\n    if (elements.length) {\n      elements.forEach(element => resizeObserver == null ? void 0 : resizeObserver.observe(element));\n    } else {\n      resizeObserver == null ? void 0 : resizeObserver.disconnect();\n      measureRects();\n    }\n  }, [elements]);\n  return rects;\n\n  function reducer() {\n    if (!elements.length) {\n      return defaultValue$2;\n    }\n\n    return elements.map(element => isDocumentScrollingElement(element) ? windowRect : new Rect(measure(element), element));\n  }\n}\n\nfunction getMeasurableNode(node) {\n  if (!node) {\n    return null;\n  }\n\n  if (node.children.length > 1) {\n    return node;\n  }\n\n  const firstChild = node.children[0];\n  return isHTMLElement(firstChild) ? firstChild : node;\n}\n\nfunction useDragOverlayMeasuring(_ref) {\n  let {\n    measure\n  } = _ref;\n  const [rect, setRect] = useState(null);\n  const handleResize = useCallback(entries => {\n    for (const {\n      target\n    } of entries) {\n      if (isHTMLElement(target)) {\n        setRect(rect => {\n          const newRect = measure(target);\n          return rect ? { ...rect,\n            width: newRect.width,\n            height: newRect.height\n          } : newRect;\n        });\n        break;\n      }\n    }\n  }, [measure]);\n  const resizeObserver = useResizeObserver({\n    callback: handleResize\n  });\n  const handleNodeChange = useCallback(element => {\n    const node = getMeasurableNode(element);\n    resizeObserver == null ? void 0 : resizeObserver.disconnect();\n\n    if (node) {\n      resizeObserver == null ? void 0 : resizeObserver.observe(node);\n    }\n\n    setRect(node ? measure(node) : null);\n  }, [measure, resizeObserver]);\n  const [nodeRef, setRef] = useNodeRef(handleNodeChange);\n  return useMemo(() => ({\n    nodeRef,\n    rect,\n    setRef\n  }), [rect, nodeRef, setRef]);\n}\n\nconst defaultSensors = [{\n  sensor: PointerSensor,\n  options: {}\n}, {\n  sensor: KeyboardSensor,\n  options: {}\n}];\nconst defaultData = {\n  current: {}\n};\nconst defaultMeasuringConfiguration = {\n  draggable: {\n    measure: getTransformAgnosticClientRect\n  },\n  droppable: {\n    measure: getTransformAgnosticClientRect,\n    strategy: MeasuringStrategy.WhileDragging,\n    frequency: MeasuringFrequency.Optimized\n  },\n  dragOverlay: {\n    measure: getClientRect\n  }\n};\n\nclass DroppableContainersMap extends Map {\n  get(id) {\n    var _super$get;\n\n    return id != null ? (_super$get = super.get(id)) != null ? _super$get : undefined : undefined;\n  }\n\n  toArray() {\n    return Array.from(this.values());\n  }\n\n  getEnabled() {\n    return this.toArray().filter(_ref => {\n      let {\n        disabled\n      } = _ref;\n      return !disabled;\n    });\n  }\n\n  getNodeFor(id) {\n    var _this$get$node$curren, _this$get;\n\n    return (_this$get$node$curren = (_this$get = this.get(id)) == null ? void 0 : _this$get.node.current) != null ? _this$get$node$curren : undefined;\n  }\n\n}\n\nconst defaultPublicContext = {\n  activatorEvent: null,\n  active: null,\n  activeNode: null,\n  activeNodeRect: null,\n  collisions: null,\n  containerNodeRect: null,\n  draggableNodes: /*#__PURE__*/new Map(),\n  droppableRects: /*#__PURE__*/new Map(),\n  droppableContainers: /*#__PURE__*/new DroppableContainersMap(),\n  over: null,\n  dragOverlay: {\n    nodeRef: {\n      current: null\n    },\n    rect: null,\n    setRef: noop\n  },\n  scrollableAncestors: [],\n  scrollableAncestorRects: [],\n  measuringConfiguration: defaultMeasuringConfiguration,\n  measureDroppableContainers: noop,\n  windowRect: null,\n  measuringScheduled: false\n};\nconst defaultInternalContext = {\n  activatorEvent: null,\n  activators: [],\n  active: null,\n  activeNodeRect: null,\n  ariaDescribedById: {\n    draggable: ''\n  },\n  dispatch: noop,\n  draggableNodes: /*#__PURE__*/new Map(),\n  over: null,\n  measureDroppableContainers: noop\n};\nconst InternalContext = /*#__PURE__*/createContext(defaultInternalContext);\nconst PublicContext = /*#__PURE__*/createContext(defaultPublicContext);\n\nfunction getInitialState() {\n  return {\n    draggable: {\n      active: null,\n      initialCoordinates: {\n        x: 0,\n        y: 0\n      },\n      nodes: new Map(),\n      translate: {\n        x: 0,\n        y: 0\n      }\n    },\n    droppable: {\n      containers: new DroppableContainersMap()\n    }\n  };\n}\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case Action.DragStart:\n      return { ...state,\n        draggable: { ...state.draggable,\n          initialCoordinates: action.initialCoordinates,\n          active: action.active\n        }\n      };\n\n    case Action.DragMove:\n      if (!state.draggable.active) {\n        return state;\n      }\n\n      return { ...state,\n        draggable: { ...state.draggable,\n          translate: {\n            x: action.coordinates.x - state.draggable.initialCoordinates.x,\n            y: action.coordinates.y - state.draggable.initialCoordinates.y\n          }\n        }\n      };\n\n    case Action.DragEnd:\n    case Action.DragCancel:\n      return { ...state,\n        draggable: { ...state.draggable,\n          active: null,\n          initialCoordinates: {\n            x: 0,\n            y: 0\n          },\n          translate: {\n            x: 0,\n            y: 0\n          }\n        }\n      };\n\n    case Action.RegisterDroppable:\n      {\n        const {\n          element\n        } = action;\n        const {\n          id\n        } = element;\n        const containers = new DroppableContainersMap(state.droppable.containers);\n        containers.set(id, element);\n        return { ...state,\n          droppable: { ...state.droppable,\n            containers\n          }\n        };\n      }\n\n    case Action.SetDroppableDisabled:\n      {\n        const {\n          id,\n          key,\n          disabled\n        } = action;\n        const element = state.droppable.containers.get(id);\n\n        if (!element || key !== element.key) {\n          return state;\n        }\n\n        const containers = new DroppableContainersMap(state.droppable.containers);\n        containers.set(id, { ...element,\n          disabled\n        });\n        return { ...state,\n          droppable: { ...state.droppable,\n            containers\n          }\n        };\n      }\n\n    case Action.UnregisterDroppable:\n      {\n        const {\n          id,\n          key\n        } = action;\n        const element = state.droppable.containers.get(id);\n\n        if (!element || key !== element.key) {\n          return state;\n        }\n\n        const containers = new DroppableContainersMap(state.droppable.containers);\n        containers.delete(id);\n        return { ...state,\n          droppable: { ...state.droppable,\n            containers\n          }\n        };\n      }\n\n    default:\n      {\n        return state;\n      }\n  }\n}\n\nfunction RestoreFocus(_ref) {\n  let {\n    disabled\n  } = _ref;\n  const {\n    active,\n    activatorEvent,\n    draggableNodes\n  } = useContext(InternalContext);\n  const previousActivatorEvent = usePrevious(activatorEvent);\n  const previousActiveId = usePrevious(active == null ? void 0 : active.id); // Restore keyboard focus on the activator node\n\n  useEffect(() => {\n    if (disabled) {\n      return;\n    }\n\n    if (!activatorEvent && previousActivatorEvent && previousActiveId != null) {\n      if (!isKeyboardEvent(previousActivatorEvent)) {\n        return;\n      }\n\n      if (document.activeElement === previousActivatorEvent.target) {\n        // No need to restore focus\n        return;\n      }\n\n      const draggableNode = draggableNodes.get(previousActiveId);\n\n      if (!draggableNode) {\n        return;\n      }\n\n      const {\n        activatorNode,\n        node\n      } = draggableNode;\n\n      if (!activatorNode.current && !node.current) {\n        return;\n      }\n\n      requestAnimationFrame(() => {\n        for (const element of [activatorNode.current, node.current]) {\n          if (!element) {\n            continue;\n          }\n\n          const focusableNode = findFirstFocusableNode(element);\n\n          if (focusableNode) {\n            focusableNode.focus();\n            break;\n          }\n        }\n      });\n    }\n  }, [activatorEvent, disabled, draggableNodes, previousActiveId, previousActivatorEvent]);\n  return null;\n}\n\nfunction applyModifiers(modifiers, _ref) {\n  let {\n    transform,\n    ...args\n  } = _ref;\n  return modifiers != null && modifiers.length ? modifiers.reduce((accumulator, modifier) => {\n    return modifier({\n      transform: accumulator,\n      ...args\n    });\n  }, transform) : transform;\n}\n\nfunction useMeasuringConfiguration(config) {\n  return useMemo(() => ({\n    draggable: { ...defaultMeasuringConfiguration.draggable,\n      ...(config == null ? void 0 : config.draggable)\n    },\n    droppable: { ...defaultMeasuringConfiguration.droppable,\n      ...(config == null ? void 0 : config.droppable)\n    },\n    dragOverlay: { ...defaultMeasuringConfiguration.dragOverlay,\n      ...(config == null ? void 0 : config.dragOverlay)\n    }\n  }), // eslint-disable-next-line react-hooks/exhaustive-deps\n  [config == null ? void 0 : config.draggable, config == null ? void 0 : config.droppable, config == null ? void 0 : config.dragOverlay]);\n}\n\nfunction useLayoutShiftScrollCompensation(_ref) {\n  let {\n    activeNode,\n    measure,\n    initialRect,\n    config = true\n  } = _ref;\n  const initialized = useRef(false);\n  const {\n    x,\n    y\n  } = typeof config === 'boolean' ? {\n    x: config,\n    y: config\n  } : config;\n  useIsomorphicLayoutEffect(() => {\n    const disabled = !x && !y;\n\n    if (disabled || !activeNode) {\n      initialized.current = false;\n      return;\n    }\n\n    if (initialized.current || !initialRect) {\n      // Return early if layout shift scroll compensation was already attempted\n      // or if there is no initialRect to compare to.\n      return;\n    } // Get the most up to date node ref for the active draggable\n\n\n    const node = activeNode == null ? void 0 : activeNode.node.current;\n\n    if (!node || node.isConnected === false) {\n      // Return early if there is no attached node ref or if the node is\n      // disconnected from the document.\n      return;\n    }\n\n    const rect = measure(node);\n    const rectDelta = getRectDelta(rect, initialRect);\n\n    if (!x) {\n      rectDelta.x = 0;\n    }\n\n    if (!y) {\n      rectDelta.y = 0;\n    } // Only perform layout shift scroll compensation once\n\n\n    initialized.current = true;\n\n    if (Math.abs(rectDelta.x) > 0 || Math.abs(rectDelta.y) > 0) {\n      const firstScrollableAncestor = getFirstScrollableAncestor(node);\n\n      if (firstScrollableAncestor) {\n        firstScrollableAncestor.scrollBy({\n          top: rectDelta.y,\n          left: rectDelta.x\n        });\n      }\n    }\n  }, [activeNode, x, y, initialRect, measure]);\n}\n\nconst ActiveDraggableContext = /*#__PURE__*/createContext({ ...defaultCoordinates,\n  scaleX: 1,\n  scaleY: 1\n});\nvar Status;\n\n(function (Status) {\n  Status[Status[\"Uninitialized\"] = 0] = \"Uninitialized\";\n  Status[Status[\"Initializing\"] = 1] = \"Initializing\";\n  Status[Status[\"Initialized\"] = 2] = \"Initialized\";\n})(Status || (Status = {}));\n\nconst DndContext = /*#__PURE__*/memo(function DndContext(_ref) {\n  var _sensorContext$curren, _dragOverlay$nodeRef$, _dragOverlay$rect, _over$rect;\n\n  let {\n    id,\n    accessibility,\n    autoScroll = true,\n    children,\n    sensors = defaultSensors,\n    collisionDetection = rectIntersection,\n    measuring,\n    modifiers,\n    ...props\n  } = _ref;\n  const store = useReducer(reducer, undefined, getInitialState);\n  const [state, dispatch] = store;\n  const [dispatchMonitorEvent, registerMonitorListener] = useDndMonitorProvider();\n  const [status, setStatus] = useState(Status.Uninitialized);\n  const isInitialized = status === Status.Initialized;\n  const {\n    draggable: {\n      active: activeId,\n      nodes: draggableNodes,\n      translate\n    },\n    droppable: {\n      containers: droppableContainers\n    }\n  } = state;\n  const node = activeId ? draggableNodes.get(activeId) : null;\n  const activeRects = useRef({\n    initial: null,\n    translated: null\n  });\n  const active = useMemo(() => {\n    var _node$data;\n\n    return activeId != null ? {\n      id: activeId,\n      // It's possible for the active node to unmount while dragging\n      data: (_node$data = node == null ? void 0 : node.data) != null ? _node$data : defaultData,\n      rect: activeRects\n    } : null;\n  }, [activeId, node]);\n  const activeRef = useRef(null);\n  const [activeSensor, setActiveSensor] = useState(null);\n  const [activatorEvent, setActivatorEvent] = useState(null);\n  const latestProps = useLatestValue(props, Object.values(props));\n  const draggableDescribedById = useUniqueId(\"DndDescribedBy\", id);\n  const enabledDroppableContainers = useMemo(() => droppableContainers.getEnabled(), [droppableContainers]);\n  const measuringConfiguration = useMeasuringConfiguration(measuring);\n  const {\n    droppableRects,\n    measureDroppableContainers,\n    measuringScheduled\n  } = useDroppableMeasuring(enabledDroppableContainers, {\n    dragging: isInitialized,\n    dependencies: [translate.x, translate.y],\n    config: measuringConfiguration.droppable\n  });\n  const activeNode = useCachedNode(draggableNodes, activeId);\n  const activationCoordinates = useMemo(() => activatorEvent ? getEventCoordinates(activatorEvent) : null, [activatorEvent]);\n  const autoScrollOptions = getAutoScrollerOptions();\n  const initialActiveNodeRect = useInitialRect(activeNode, measuringConfiguration.draggable.measure);\n  useLayoutShiftScrollCompensation({\n    activeNode: activeId ? draggableNodes.get(activeId) : null,\n    config: autoScrollOptions.layoutShiftCompensation,\n    initialRect: initialActiveNodeRect,\n    measure: measuringConfiguration.draggable.measure\n  });\n  const activeNodeRect = useRect(activeNode, measuringConfiguration.draggable.measure, initialActiveNodeRect);\n  const containerNodeRect = useRect(activeNode ? activeNode.parentElement : null);\n  const sensorContext = useRef({\n    activatorEvent: null,\n    active: null,\n    activeNode,\n    collisionRect: null,\n    collisions: null,\n    droppableRects,\n    draggableNodes,\n    draggingNode: null,\n    draggingNodeRect: null,\n    droppableContainers,\n    over: null,\n    scrollableAncestors: [],\n    scrollAdjustedTranslate: null\n  });\n  const overNode = droppableContainers.getNodeFor((_sensorContext$curren = sensorContext.current.over) == null ? void 0 : _sensorContext$curren.id);\n  const dragOverlay = useDragOverlayMeasuring({\n    measure: measuringConfiguration.dragOverlay.measure\n  }); // Use the rect of the drag overlay if it is mounted\n\n  const draggingNode = (_dragOverlay$nodeRef$ = dragOverlay.nodeRef.current) != null ? _dragOverlay$nodeRef$ : activeNode;\n  const draggingNodeRect = isInitialized ? (_dragOverlay$rect = dragOverlay.rect) != null ? _dragOverlay$rect : activeNodeRect : null;\n  const usesDragOverlay = Boolean(dragOverlay.nodeRef.current && dragOverlay.rect); // The delta between the previous and new position of the draggable node\n  // is only relevant when there is no drag overlay\n\n  const nodeRectDelta = useRectDelta(usesDragOverlay ? null : activeNodeRect); // Get the window rect of the dragging node\n\n  const windowRect = useWindowRect(draggingNode ? getWindow(draggingNode) : null); // Get scrollable ancestors of the dragging node\n\n  const scrollableAncestors = useScrollableAncestors(isInitialized ? overNode != null ? overNode : activeNode : null);\n  const scrollableAncestorRects = useRects(scrollableAncestors); // Apply modifiers\n\n  const modifiedTranslate = applyModifiers(modifiers, {\n    transform: {\n      x: translate.x - nodeRectDelta.x,\n      y: translate.y - nodeRectDelta.y,\n      scaleX: 1,\n      scaleY: 1\n    },\n    activatorEvent,\n    active,\n    activeNodeRect,\n    containerNodeRect,\n    draggingNodeRect,\n    over: sensorContext.current.over,\n    overlayNodeRect: dragOverlay.rect,\n    scrollableAncestors,\n    scrollableAncestorRects,\n    windowRect\n  });\n  const pointerCoordinates = activationCoordinates ? add(activationCoordinates, translate) : null;\n  const scrollOffsets = useScrollOffsets(scrollableAncestors); // Represents the scroll delta since dragging was initiated\n\n  const scrollAdjustment = useScrollOffsetsDelta(scrollOffsets); // Represents the scroll delta since the last time the active node rect was measured\n\n  const activeNodeScrollDelta = useScrollOffsetsDelta(scrollOffsets, [activeNodeRect]);\n  const scrollAdjustedTranslate = add(modifiedTranslate, scrollAdjustment);\n  const collisionRect = draggingNodeRect ? getAdjustedRect(draggingNodeRect, modifiedTranslate) : null;\n  const collisions = active && collisionRect ? collisionDetection({\n    active,\n    collisionRect,\n    droppableRects,\n    droppableContainers: enabledDroppableContainers,\n    pointerCoordinates\n  }) : null;\n  const overId = getFirstCollision(collisions, 'id');\n  const [over, setOver] = useState(null); // When there is no drag overlay used, we need to account for the\n  // window scroll delta\n\n  const appliedTranslate = usesDragOverlay ? modifiedTranslate : add(modifiedTranslate, activeNodeScrollDelta);\n  const transform = adjustScale(appliedTranslate, (_over$rect = over == null ? void 0 : over.rect) != null ? _over$rect : null, activeNodeRect);\n  const instantiateSensor = useCallback((event, _ref2) => {\n    let {\n      sensor: Sensor,\n      options\n    } = _ref2;\n\n    if (activeRef.current == null) {\n      return;\n    }\n\n    const activeNode = draggableNodes.get(activeRef.current);\n\n    if (!activeNode) {\n      return;\n    }\n\n    const activatorEvent = event.nativeEvent;\n    const sensorInstance = new Sensor({\n      active: activeRef.current,\n      activeNode,\n      event: activatorEvent,\n      options,\n      // Sensors need to be instantiated with refs for arguments that change over time\n      // otherwise they are frozen in time with the stale arguments\n      context: sensorContext,\n\n      onStart(initialCoordinates) {\n        const id = activeRef.current;\n\n        if (id == null) {\n          return;\n        }\n\n        const draggableNode = draggableNodes.get(id);\n\n        if (!draggableNode) {\n          return;\n        }\n\n        const {\n          onDragStart\n        } = latestProps.current;\n        const event = {\n          active: {\n            id,\n            data: draggableNode.data,\n            rect: activeRects\n          }\n        };\n        unstable_batchedUpdates(() => {\n          onDragStart == null ? void 0 : onDragStart(event);\n          setStatus(Status.Initializing);\n          dispatch({\n            type: Action.DragStart,\n            initialCoordinates,\n            active: id\n          });\n          dispatchMonitorEvent({\n            type: 'onDragStart',\n            event\n          });\n        });\n      },\n\n      onMove(coordinates) {\n        dispatch({\n          type: Action.DragMove,\n          coordinates\n        });\n      },\n\n      onEnd: createHandler(Action.DragEnd),\n      onCancel: createHandler(Action.DragCancel)\n    });\n    unstable_batchedUpdates(() => {\n      setActiveSensor(sensorInstance);\n      setActivatorEvent(event.nativeEvent);\n    });\n\n    function createHandler(type) {\n      return async function handler() {\n        const {\n          active,\n          collisions,\n          over,\n          scrollAdjustedTranslate\n        } = sensorContext.current;\n        let event = null;\n\n        if (active && scrollAdjustedTranslate) {\n          const {\n            cancelDrop\n          } = latestProps.current;\n          event = {\n            activatorEvent,\n            active: active,\n            collisions,\n            delta: scrollAdjustedTranslate,\n            over\n          };\n\n          if (type === Action.DragEnd && typeof cancelDrop === 'function') {\n            const shouldCancel = await Promise.resolve(cancelDrop(event));\n\n            if (shouldCancel) {\n              type = Action.DragCancel;\n            }\n          }\n        }\n\n        activeRef.current = null;\n        unstable_batchedUpdates(() => {\n          dispatch({\n            type\n          });\n          setStatus(Status.Uninitialized);\n          setOver(null);\n          setActiveSensor(null);\n          setActivatorEvent(null);\n          const eventName = type === Action.DragEnd ? 'onDragEnd' : 'onDragCancel';\n\n          if (event) {\n            const handler = latestProps.current[eventName];\n            handler == null ? void 0 : handler(event);\n            dispatchMonitorEvent({\n              type: eventName,\n              event\n            });\n          }\n        });\n      };\n    }\n  }, // eslint-disable-next-line react-hooks/exhaustive-deps\n  [draggableNodes]);\n  const bindActivatorToSensorInstantiator = useCallback((handler, sensor) => {\n    return (event, active) => {\n      const nativeEvent = event.nativeEvent;\n      const activeDraggableNode = draggableNodes.get(active);\n\n      if ( // Another sensor is already instantiating\n      activeRef.current !== null || // No active draggable\n      !activeDraggableNode || // Event has already been captured\n      nativeEvent.dndKit || nativeEvent.defaultPrevented) {\n        return;\n      }\n\n      const activationContext = {\n        active: activeDraggableNode\n      };\n      const shouldActivate = handler(event, sensor.options, activationContext);\n\n      if (shouldActivate === true) {\n        nativeEvent.dndKit = {\n          capturedBy: sensor.sensor\n        };\n        activeRef.current = active;\n        instantiateSensor(event, sensor);\n      }\n    };\n  }, [draggableNodes, instantiateSensor]);\n  const activators = useCombineActivators(sensors, bindActivatorToSensorInstantiator);\n  useSensorSetup(sensors);\n  useIsomorphicLayoutEffect(() => {\n    if (activeNodeRect && status === Status.Initializing) {\n      setStatus(Status.Initialized);\n    }\n  }, [activeNodeRect, status]);\n  useEffect(() => {\n    const {\n      onDragMove\n    } = latestProps.current;\n    const {\n      active,\n      activatorEvent,\n      collisions,\n      over\n    } = sensorContext.current;\n\n    if (!active || !activatorEvent) {\n      return;\n    }\n\n    const event = {\n      active,\n      activatorEvent,\n      collisions,\n      delta: {\n        x: scrollAdjustedTranslate.x,\n        y: scrollAdjustedTranslate.y\n      },\n      over\n    };\n    unstable_batchedUpdates(() => {\n      onDragMove == null ? void 0 : onDragMove(event);\n      dispatchMonitorEvent({\n        type: 'onDragMove',\n        event\n      });\n    });\n  }, // eslint-disable-next-line react-hooks/exhaustive-deps\n  [scrollAdjustedTranslate.x, scrollAdjustedTranslate.y]);\n  useEffect(() => {\n    const {\n      active,\n      activatorEvent,\n      collisions,\n      droppableContainers,\n      scrollAdjustedTranslate\n    } = sensorContext.current;\n\n    if (!active || activeRef.current == null || !activatorEvent || !scrollAdjustedTranslate) {\n      return;\n    }\n\n    const {\n      onDragOver\n    } = latestProps.current;\n    const overContainer = droppableContainers.get(overId);\n    const over = overContainer && overContainer.rect.current ? {\n      id: overContainer.id,\n      rect: overContainer.rect.current,\n      data: overContainer.data,\n      disabled: overContainer.disabled\n    } : null;\n    const event = {\n      active,\n      activatorEvent,\n      collisions,\n      delta: {\n        x: scrollAdjustedTranslate.x,\n        y: scrollAdjustedTranslate.y\n      },\n      over\n    };\n    unstable_batchedUpdates(() => {\n      setOver(over);\n      onDragOver == null ? void 0 : onDragOver(event);\n      dispatchMonitorEvent({\n        type: 'onDragOver',\n        event\n      });\n    });\n  }, // eslint-disable-next-line react-hooks/exhaustive-deps\n  [overId]);\n  useIsomorphicLayoutEffect(() => {\n    sensorContext.current = {\n      activatorEvent,\n      active,\n      activeNode,\n      collisionRect,\n      collisions,\n      droppableRects,\n      draggableNodes,\n      draggingNode,\n      draggingNodeRect,\n      droppableContainers,\n      over,\n      scrollableAncestors,\n      scrollAdjustedTranslate\n    };\n    activeRects.current = {\n      initial: draggingNodeRect,\n      translated: collisionRect\n    };\n  }, [active, activeNode, collisions, collisionRect, draggableNodes, draggingNode, draggingNodeRect, droppableRects, droppableContainers, over, scrollableAncestors, scrollAdjustedTranslate]);\n  useAutoScroller({ ...autoScrollOptions,\n    delta: translate,\n    draggingRect: collisionRect,\n    pointerCoordinates,\n    scrollableAncestors,\n    scrollableAncestorRects\n  });\n  const publicContext = useMemo(() => {\n    const context = {\n      active,\n      activeNode,\n      activeNodeRect,\n      activatorEvent,\n      collisions,\n      containerNodeRect,\n      dragOverlay,\n      draggableNodes,\n      droppableContainers,\n      droppableRects,\n      over,\n      measureDroppableContainers,\n      scrollableAncestors,\n      scrollableAncestorRects,\n      measuringConfiguration,\n      measuringScheduled,\n      windowRect\n    };\n    return context;\n  }, [active, activeNode, activeNodeRect, activatorEvent, collisions, containerNodeRect, dragOverlay, draggableNodes, droppableContainers, droppableRects, over, measureDroppableContainers, scrollableAncestors, scrollableAncestorRects, measuringConfiguration, measuringScheduled, windowRect]);\n  const internalContext = useMemo(() => {\n    const context = {\n      activatorEvent,\n      activators,\n      active,\n      activeNodeRect,\n      ariaDescribedById: {\n        draggable: draggableDescribedById\n      },\n      dispatch,\n      draggableNodes,\n      over,\n      measureDroppableContainers\n    };\n    return context;\n  }, [activatorEvent, activators, active, activeNodeRect, dispatch, draggableDescribedById, draggableNodes, over, measureDroppableContainers]);\n  return React.createElement(DndMonitorContext.Provider, {\n    value: registerMonitorListener\n  }, React.createElement(InternalContext.Provider, {\n    value: internalContext\n  }, React.createElement(PublicContext.Provider, {\n    value: publicContext\n  }, React.createElement(ActiveDraggableContext.Provider, {\n    value: transform\n  }, children)), React.createElement(RestoreFocus, {\n    disabled: (accessibility == null ? void 0 : accessibility.restoreFocus) === false\n  })), React.createElement(Accessibility, { ...accessibility,\n    hiddenTextDescribedById: draggableDescribedById\n  }));\n\n  function getAutoScrollerOptions() {\n    const activeSensorDisablesAutoscroll = (activeSensor == null ? void 0 : activeSensor.autoScrollEnabled) === false;\n    const autoScrollGloballyDisabled = typeof autoScroll === 'object' ? autoScroll.enabled === false : autoScroll === false;\n    const enabled = isInitialized && !activeSensorDisablesAutoscroll && !autoScrollGloballyDisabled;\n\n    if (typeof autoScroll === 'object') {\n      return { ...autoScroll,\n        enabled\n      };\n    }\n\n    return {\n      enabled\n    };\n  }\n});\nconst NullContext = /*#__PURE__*/createContext(null);\nconst defaultRole = 'button';\nconst ID_PREFIX = 'Droppable';\n\nfunction useDraggable(_ref) {\n  let {\n    id,\n    data,\n    disabled = false,\n    attributes\n  } = _ref;\n  const key = useUniqueId(ID_PREFIX);\n  const {\n    activators,\n    activatorEvent,\n    active,\n    activeNodeRect,\n    ariaDescribedById,\n    draggableNodes,\n    over\n  } = useContext(InternalContext);\n  const {\n    role = defaultRole,\n    roleDescription = 'draggable',\n    tabIndex = 0\n  } = attributes != null ? attributes : {};\n  const isDragging = (active == null ? void 0 : active.id) === id;\n  const transform = useContext(isDragging ? ActiveDraggableContext : NullContext);\n  const [node, setNodeRef] = useNodeRef();\n  const [activatorNode, setActivatorNodeRef] = useNodeRef();\n  const listeners = useSyntheticListeners(activators, id);\n  const dataRef = useLatestValue(data);\n  useIsomorphicLayoutEffect(() => {\n    draggableNodes.set(id, {\n      id,\n      key,\n      node,\n      activatorNode,\n      data: dataRef\n    });\n    return () => {\n      const node = draggableNodes.get(id);\n\n      if (node && node.key === key) {\n        draggableNodes.delete(id);\n      }\n    };\n  }, // eslint-disable-next-line react-hooks/exhaustive-deps\n  [draggableNodes, id]);\n  const memoizedAttributes = useMemo(() => ({\n    role,\n    tabIndex,\n    'aria-disabled': disabled,\n    'aria-pressed': isDragging && role === defaultRole ? true : undefined,\n    'aria-roledescription': roleDescription,\n    'aria-describedby': ariaDescribedById.draggable\n  }), [disabled, role, tabIndex, isDragging, roleDescription, ariaDescribedById.draggable]);\n  return {\n    active,\n    activatorEvent,\n    activeNodeRect,\n    attributes: memoizedAttributes,\n    isDragging,\n    listeners: disabled ? undefined : listeners,\n    node,\n    over,\n    setNodeRef,\n    setActivatorNodeRef,\n    transform\n  };\n}\n\nfunction useDndContext() {\n  return useContext(PublicContext);\n}\n\nconst ID_PREFIX$1 = 'Droppable';\nconst defaultResizeObserverConfig = {\n  timeout: 25\n};\n\nfunction useDroppable(_ref) {\n  let {\n    data,\n    disabled = false,\n    id,\n    resizeObserverConfig\n  } = _ref;\n  const key = useUniqueId(ID_PREFIX$1);\n  const {\n    active,\n    dispatch,\n    over,\n    measureDroppableContainers\n  } = useContext(InternalContext);\n  const previous = useRef({\n    disabled\n  });\n  const resizeObserverConnected = useRef(false);\n  const rect = useRef(null);\n  const callbackId = useRef(null);\n  const {\n    disabled: resizeObserverDisabled,\n    updateMeasurementsFor,\n    timeout: resizeObserverTimeout\n  } = { ...defaultResizeObserverConfig,\n    ...resizeObserverConfig\n  };\n  const ids = useLatestValue(updateMeasurementsFor != null ? updateMeasurementsFor : id);\n  const handleResize = useCallback(() => {\n    if (!resizeObserverConnected.current) {\n      // ResizeObserver invokes the `handleResize` callback as soon as `observe` is called,\n      // assuming the element is rendered and displayed.\n      resizeObserverConnected.current = true;\n      return;\n    }\n\n    if (callbackId.current != null) {\n      clearTimeout(callbackId.current);\n    }\n\n    callbackId.current = setTimeout(() => {\n      measureDroppableContainers(Array.isArray(ids.current) ? ids.current : [ids.current]);\n      callbackId.current = null;\n    }, resizeObserverTimeout);\n  }, //eslint-disable-next-line react-hooks/exhaustive-deps\n  [resizeObserverTimeout]);\n  const resizeObserver = useResizeObserver({\n    callback: handleResize,\n    disabled: resizeObserverDisabled || !active\n  });\n  const handleNodeChange = useCallback((newElement, previousElement) => {\n    if (!resizeObserver) {\n      return;\n    }\n\n    if (previousElement) {\n      resizeObserver.unobserve(previousElement);\n      resizeObserverConnected.current = false;\n    }\n\n    if (newElement) {\n      resizeObserver.observe(newElement);\n    }\n  }, [resizeObserver]);\n  const [nodeRef, setNodeRef] = useNodeRef(handleNodeChange);\n  const dataRef = useLatestValue(data);\n  useEffect(() => {\n    if (!resizeObserver || !nodeRef.current) {\n      return;\n    }\n\n    resizeObserver.disconnect();\n    resizeObserverConnected.current = false;\n    resizeObserver.observe(nodeRef.current);\n  }, [nodeRef, resizeObserver]);\n  useIsomorphicLayoutEffect(() => {\n    dispatch({\n      type: Action.RegisterDroppable,\n      element: {\n        id,\n        key,\n        disabled,\n        node: nodeRef,\n        rect,\n        data: dataRef\n      }\n    });\n    return () => dispatch({\n      type: Action.UnregisterDroppable,\n      key,\n      id\n    });\n  }, // eslint-disable-next-line react-hooks/exhaustive-deps\n  [id]);\n  useEffect(() => {\n    if (disabled !== previous.current.disabled) {\n      dispatch({\n        type: Action.SetDroppableDisabled,\n        id,\n        key,\n        disabled\n      });\n      previous.current.disabled = disabled;\n    }\n  }, [id, key, disabled, dispatch]);\n  return {\n    active,\n    rect,\n    isOver: (over == null ? void 0 : over.id) === id,\n    node: nodeRef,\n    over,\n    setNodeRef\n  };\n}\n\nfunction AnimationManager(_ref) {\n  let {\n    animation,\n    children\n  } = _ref;\n  const [clonedChildren, setClonedChildren] = useState(null);\n  const [element, setElement] = useState(null);\n  const previousChildren = usePrevious(children);\n\n  if (!children && !clonedChildren && previousChildren) {\n    setClonedChildren(previousChildren);\n  }\n\n  useIsomorphicLayoutEffect(() => {\n    if (!element) {\n      return;\n    }\n\n    const key = clonedChildren == null ? void 0 : clonedChildren.key;\n    const id = clonedChildren == null ? void 0 : clonedChildren.props.id;\n\n    if (key == null || id == null) {\n      setClonedChildren(null);\n      return;\n    }\n\n    Promise.resolve(animation(id, element)).then(() => {\n      setClonedChildren(null);\n    });\n  }, [animation, clonedChildren, element]);\n  return React.createElement(React.Fragment, null, children, clonedChildren ? cloneElement(clonedChildren, {\n    ref: setElement\n  }) : null);\n}\n\nconst defaultTransform = {\n  x: 0,\n  y: 0,\n  scaleX: 1,\n  scaleY: 1\n};\n\nfunction NullifiedContextProvider(_ref) {\n  let {\n    children\n  } = _ref;\n  return React.createElement(InternalContext.Provider, {\n    value: defaultInternalContext\n  }, React.createElement(ActiveDraggableContext.Provider, {\n    value: defaultTransform\n  }, children));\n}\n\nconst baseStyles = {\n  position: 'fixed',\n  touchAction: 'none'\n};\n\nconst defaultTransition = activatorEvent => {\n  const isKeyboardActivator = isKeyboardEvent(activatorEvent);\n  return isKeyboardActivator ? 'transform 250ms ease' : undefined;\n};\n\nconst PositionedOverlay = /*#__PURE__*/forwardRef((_ref, ref) => {\n  let {\n    as,\n    activatorEvent,\n    adjustScale,\n    children,\n    className,\n    rect,\n    style,\n    transform,\n    transition = defaultTransition\n  } = _ref;\n\n  if (!rect) {\n    return null;\n  }\n\n  const scaleAdjustedTransform = adjustScale ? transform : { ...transform,\n    scaleX: 1,\n    scaleY: 1\n  };\n  const styles = { ...baseStyles,\n    width: rect.width,\n    height: rect.height,\n    top: rect.top,\n    left: rect.left,\n    transform: CSS.Transform.toString(scaleAdjustedTransform),\n    transformOrigin: adjustScale && activatorEvent ? getRelativeTransformOrigin(activatorEvent, rect) : undefined,\n    transition: typeof transition === 'function' ? transition(activatorEvent) : transition,\n    ...style\n  };\n  return React.createElement(as, {\n    className,\n    style: styles,\n    ref\n  }, children);\n});\n\nconst defaultDropAnimationSideEffects = options => _ref => {\n  let {\n    active,\n    dragOverlay\n  } = _ref;\n  const originalStyles = {};\n  const {\n    styles,\n    className\n  } = options;\n\n  if (styles != null && styles.active) {\n    for (const [key, value] of Object.entries(styles.active)) {\n      if (value === undefined) {\n        continue;\n      }\n\n      originalStyles[key] = active.node.style.getPropertyValue(key);\n      active.node.style.setProperty(key, value);\n    }\n  }\n\n  if (styles != null && styles.dragOverlay) {\n    for (const [key, value] of Object.entries(styles.dragOverlay)) {\n      if (value === undefined) {\n        continue;\n      }\n\n      dragOverlay.node.style.setProperty(key, value);\n    }\n  }\n\n  if (className != null && className.active) {\n    active.node.classList.add(className.active);\n  }\n\n  if (className != null && className.dragOverlay) {\n    dragOverlay.node.classList.add(className.dragOverlay);\n  }\n\n  return function cleanup() {\n    for (const [key, value] of Object.entries(originalStyles)) {\n      active.node.style.setProperty(key, value);\n    }\n\n    if (className != null && className.active) {\n      active.node.classList.remove(className.active);\n    }\n  };\n};\n\nconst defaultKeyframeResolver = _ref2 => {\n  let {\n    transform: {\n      initial,\n      final\n    }\n  } = _ref2;\n  return [{\n    transform: CSS.Transform.toString(initial)\n  }, {\n    transform: CSS.Transform.toString(final)\n  }];\n};\n\nconst defaultDropAnimationConfiguration = {\n  duration: 250,\n  easing: 'ease',\n  keyframes: defaultKeyframeResolver,\n  sideEffects: /*#__PURE__*/defaultDropAnimationSideEffects({\n    styles: {\n      active: {\n        opacity: '0'\n      }\n    }\n  })\n};\n\nfunction useDropAnimation(_ref3) {\n  let {\n    config,\n    draggableNodes,\n    droppableContainers,\n    measuringConfiguration\n  } = _ref3;\n  return useEvent((id, node) => {\n    if (config === null) {\n      return;\n    }\n\n    const activeDraggable = draggableNodes.get(id);\n\n    if (!activeDraggable) {\n      return;\n    }\n\n    const activeNode = activeDraggable.node.current;\n\n    if (!activeNode) {\n      return;\n    }\n\n    const measurableNode = getMeasurableNode(node);\n\n    if (!measurableNode) {\n      return;\n    }\n\n    const {\n      transform\n    } = getWindow(node).getComputedStyle(node);\n    const parsedTransform = parseTransform(transform);\n\n    if (!parsedTransform) {\n      return;\n    }\n\n    const animation = typeof config === 'function' ? config : createDefaultDropAnimation(config);\n    scrollIntoViewIfNeeded(activeNode, measuringConfiguration.draggable.measure);\n    return animation({\n      active: {\n        id,\n        data: activeDraggable.data,\n        node: activeNode,\n        rect: measuringConfiguration.draggable.measure(activeNode)\n      },\n      draggableNodes,\n      dragOverlay: {\n        node,\n        rect: measuringConfiguration.dragOverlay.measure(measurableNode)\n      },\n      droppableContainers,\n      measuringConfiguration,\n      transform: parsedTransform\n    });\n  });\n}\n\nfunction createDefaultDropAnimation(options) {\n  const {\n    duration,\n    easing,\n    sideEffects,\n    keyframes\n  } = { ...defaultDropAnimationConfiguration,\n    ...options\n  };\n  return _ref4 => {\n    let {\n      active,\n      dragOverlay,\n      transform,\n      ...rest\n    } = _ref4;\n\n    if (!duration) {\n      // Do not animate if animation duration is zero.\n      return;\n    }\n\n    const delta = {\n      x: dragOverlay.rect.left - active.rect.left,\n      y: dragOverlay.rect.top - active.rect.top\n    };\n    const scale = {\n      scaleX: transform.scaleX !== 1 ? active.rect.width * transform.scaleX / dragOverlay.rect.width : 1,\n      scaleY: transform.scaleY !== 1 ? active.rect.height * transform.scaleY / dragOverlay.rect.height : 1\n    };\n    const finalTransform = {\n      x: transform.x - delta.x,\n      y: transform.y - delta.y,\n      ...scale\n    };\n    const animationKeyframes = keyframes({ ...rest,\n      active,\n      dragOverlay,\n      transform: {\n        initial: transform,\n        final: finalTransform\n      }\n    });\n    const [firstKeyframe] = animationKeyframes;\n    const lastKeyframe = animationKeyframes[animationKeyframes.length - 1];\n\n    if (JSON.stringify(firstKeyframe) === JSON.stringify(lastKeyframe)) {\n      // The start and end keyframes are the same, infer that there is no animation needed.\n      return;\n    }\n\n    const cleanup = sideEffects == null ? void 0 : sideEffects({\n      active,\n      dragOverlay,\n      ...rest\n    });\n    const animation = dragOverlay.node.animate(animationKeyframes, {\n      duration,\n      easing,\n      fill: 'forwards'\n    });\n    return new Promise(resolve => {\n      animation.onfinish = () => {\n        cleanup == null ? void 0 : cleanup();\n        resolve();\n      };\n    });\n  };\n}\n\nlet key = 0;\n\nfunction useKey(id) {\n  return useMemo(() => {\n    if (id == null) {\n      return;\n    }\n\n    key++;\n    return key;\n  }, [id]);\n}\n\nconst DragOverlay = /*#__PURE__*/React.memo(_ref => {\n  let {\n    adjustScale = false,\n    children,\n    dropAnimation: dropAnimationConfig,\n    style,\n    transition,\n    modifiers,\n    wrapperElement = 'div',\n    className,\n    zIndex = 999\n  } = _ref;\n  const {\n    activatorEvent,\n    active,\n    activeNodeRect,\n    containerNodeRect,\n    draggableNodes,\n    droppableContainers,\n    dragOverlay,\n    over,\n    measuringConfiguration,\n    scrollableAncestors,\n    scrollableAncestorRects,\n    windowRect\n  } = useDndContext();\n  const transform = useContext(ActiveDraggableContext);\n  const key = useKey(active == null ? void 0 : active.id);\n  const modifiedTransform = applyModifiers(modifiers, {\n    activatorEvent,\n    active,\n    activeNodeRect,\n    containerNodeRect,\n    draggingNodeRect: dragOverlay.rect,\n    over,\n    overlayNodeRect: dragOverlay.rect,\n    scrollableAncestors,\n    scrollableAncestorRects,\n    transform,\n    windowRect\n  });\n  const initialRect = useInitialValue(activeNodeRect);\n  const dropAnimation = useDropAnimation({\n    config: dropAnimationConfig,\n    draggableNodes,\n    droppableContainers,\n    measuringConfiguration\n  }); // We need to wait for the active node to be measured before connecting the drag overlay ref\n  // otherwise collisions can be computed against a mispositioned drag overlay\n\n  const ref = initialRect ? dragOverlay.setRef : undefined;\n  return React.createElement(NullifiedContextProvider, null, React.createElement(AnimationManager, {\n    animation: dropAnimation\n  }, active && key ? React.createElement(PositionedOverlay, {\n    key: key,\n    id: active.id,\n    ref: ref,\n    as: wrapperElement,\n    activatorEvent: activatorEvent,\n    adjustScale: adjustScale,\n    className: className,\n    transition: transition,\n    rect: initialRect,\n    style: {\n      zIndex,\n      ...style\n    },\n    transform: modifiedTransform\n  }, children) : null));\n});\nexport { AutoScrollActivator, DndContext, DragOverlay, KeyboardCode, KeyboardSensor, MeasuringFrequency, MeasuringStrategy, MouseSensor, PointerSensor, TouchSensor, TraversalOrder, applyModifiers, closestCenter, closestCorners, defaultAnnouncements, defaultCoordinates, defaultDropAnimationConfiguration as defaultDropAnimation, defaultDropAnimationSideEffects, defaultScreenReaderInstructions, getClientRect, getFirstCollision, getScrollableAncestors, pointerWithin, rectIntersection, useDndContext, useDndMonitor, useDraggable, useDroppable, useSensor, useSensors };","map":{"version":3,"mappings":"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","names":["DndMonitorContext","createContext","useDndMonitor","listener","registerListener","useContext","useEffect","Error","unsubscribe","useDndMonitorProvider","listeners","useState","Set","useCallback","add","delete","dispatch","_ref","type","event","forEach","_listener$type","defaultScreenReaderInstructions","draggable","defaultAnnouncements","onDragStart","active","id","onDragOver","over","onDragEnd","onDragCancel","Accessibility","announcements","container","hiddenTextDescribedById","screenReaderInstructions","announce","announcement","useAnnouncement","liveRegionId","useUniqueId","mounted","setMounted","useMemo","onDragMove","markup","React","HiddenText","value","LiveRegion","createPortal","Action","noop","useSensor","sensor","options","useSensors","sensors","filter","defaultCoordinates","Object","freeze","x","y","distanceBetween","p1","p2","Math","sqrt","pow","getRelativeTransformOrigin","rect","eventCoordinates","getEventCoordinates","transformOrigin","left","width","top","height","sortCollisionsAsc","data","a","b","sortCollisionsDesc","cornersOfRectangle","getFirstCollision","collisions","property","length","firstCollision","centerOfRectangle","closestCenter","collisionRect","droppableRects","droppableContainers","centerRect","droppableContainer","get","distBetween","push","sort","closestCorners","corners","rectCorners","distances","reduce","accumulator","corner","index","effectiveDistance","Number","toFixed","getIntersectionRatio","entry","target","max","right","min","bottom","targetArea","entryArea","intersectionArea","intersectionRatio","rectIntersection","isPointWithinRect","point","pointerWithin","pointerCoordinates","adjustScale","transform","rect1","rect2","scaleX","scaleY","getRectDelta","createRectAdjustmentFn","modifier","adjustClientRect","adjustments","acc","adjustment","getAdjustedRect","parseTransform","startsWith","transformArray","slice","split","inverseTransform","parsedTransform","translateX","translateY","parseFloat","indexOf","w","h","defaultOptions","ignoreTransform","getClientRect","element","getBoundingClientRect","getComputedStyle","getWindow","getTransformAgnosticClientRect","getWindowClientRect","innerWidth","innerHeight","isFixed","node","computedStyle","position","isScrollable","overflowRegex","properties","some","test","getScrollableAncestors","limit","scrollParents","findScrollableAncestors","isDocument","scrollingElement","includes","isHTMLElement","isSVGElement","parentNode","getFirstScrollableAncestor","firstScrollableAncestor","getScrollableElement","canUseDOM","isWindow","isNode","getOwnerDocument","window","getScrollXCoordinate","scrollX","scrollLeft","getScrollYCoordinate","scrollY","scrollTop","getScrollCoordinates","Direction","isDocumentScrollingElement","document","getScrollPosition","scrollingContainer","minScroll","dimensions","clientHeight","clientWidth","maxScroll","scrollWidth","scrollHeight","isTop","isLeft","isBottom","isRight","defaultThreshold","getScrollDirectionAndSpeed","scrollContainer","scrollContainerRect","acceleration","thresholdPercentage","direction","speed","threshold","Backward","abs","Forward","getScrollElementRect","getScrollOffsets","scrollableAncestors","getScrollXOffset","getScrollYOffset","scrollIntoViewIfNeeded","measure","scrollIntoView","block","inline","Rect","constructor","scrollOffsets","axis","keys","getScrollOffset","key","defineProperty","currentOffsets","scrollOffsetsDeltla","enumerable","Listeners","removeAll","_this$target","removeEventListener","eventName","handler","addEventListener","getEventListenerTarget","EventTarget","hasExceededDistance","delta","measurement","dx","dy","EventName","preventDefault","stopPropagation","KeyboardCode","defaultKeyboardCodes","start","Space","Enter","cancel","Esc","end","defaultKeyboardCoordinateGetter","currentCoordinates","code","Right","Left","Down","Up","undefined","KeyboardSensor","props","autoScrollEnabled","referenceCoordinates","windowListeners","handleKeyDown","bind","handleCancel","attach","handleStart","Resize","VisibilityChange","setTimeout","Keydown","activeNode","onStart","current","isKeyboardEvent","context","keyboardCodes","coordinateGetter","scrollBehavior","handleEnd","newCoordinates","coordinatesDelta","getCoordinatesDelta","scrollDelta","scrollElementRect","clampedCoordinates","canScrollX","canScrollY","newScrollCoordinates","canFullyScrollToNewCoordinates","scrollTo","behavior","scrollBy","handleMove","getAdjustedCoordinates","coordinates","onMove","onEnd","detach","onCancel","activators","onActivation","nativeEvent","activator","activatorNode","isDistanceConstraint","constraint","Boolean","isDelayConstraint","AbstractPointerSensor","events","listenerTarget","activated","initialCoordinates","timeoutId","documentListeners","handleKeydown","removeTextSelection","activationConstraint","move","name","passive","DragStart","ContextMenu","delay","clearTimeout","Click","capture","SelectionChange","tolerance","distance","cancelable","getSelection","removeAllRanges","PointerSensor","isPrimary","button","MouseButton","MouseSensor","RightClick","TouchSensor","setup","teardown","touches","AutoScrollActivator","TraversalOrder","useAutoScroller","Pointer","canScroll","draggingRect","enabled","interval","order","TreeOrder","scrollableAncestorRects","scrollIntent","useScrollIntent","disabled","setAutoScrollInterval","clearAutoScrollInterval","useInterval","scrollSpeed","useRef","scrollDirection","DraggableRect","scrollContainerRef","autoScroll","sortedScrollableAncestors","reverse","JSON","stringify","defaultScrollIntent","previousDelta","usePrevious","useLazyMemo","previousIntent","sign","useCachedNode","draggableNodes","draggableNode","cachedNode","useCombineActivators","getSyntheticHandler","Sensor","sensorActivators","map","MeasuringStrategy","MeasuringFrequency","defaultValue","Map","useDroppableMeasuring","containers","dragging","dependencies","config","containerIdsScheduledForMeasurement","setContainerIdsScheduledForMeasurement","measuringScheduled","frequency","strategy","containersRef","isDisabled","disabledRef","useLatestValue","measureDroppableContainers","ids","concat","previousValue","set","requestAnimationFrame","Always","BeforeDragging","useInitialValue","computeFn","useInitialRect","useMutationObserver","callback","handleMutations","useEvent","mutationObserver","MutationObserver","disconnect","useResizeObserver","handleResize","resizeObserver","ResizeObserver","defaultMeasure","useRect","fallbackRect","measureRect","useReducer","reducer","records","record","HTMLElement","contains","useIsomorphicLayoutEffect","observe","body","childList","subtree","currentRect","isConnected","newRect","useRectDelta","initialRect","useScrollableAncestors","previousNode","ancestors","useScrollOffsets","elements","scrollCoordinates","setScrollCoordinates","prevElements","handleScroll","previousElements","cleanup","entries","scrollableElement","Array","from","values","useScrollOffsetsDelta","initialScrollOffsets","hasScrollOffsets","subtract","useSensorSetup","teardownFns","_ref2","useSyntheticListeners","useWindowRect","useRects","firstElement","windowRect","rects","measureRects","getMeasurableNode","children","firstChild","useDragOverlayMeasuring","setRect","handleNodeChange","nodeRef","setRef","useNodeRef","defaultSensors","defaultData","defaultMeasuringConfiguration","droppable","WhileDragging","Optimized","dragOverlay","DroppableContainersMap","toArray","getEnabled","getNodeFor","_this$get","defaultPublicContext","activatorEvent","activeNodeRect","containerNodeRect","measuringConfiguration","defaultInternalContext","ariaDescribedById","InternalContext","PublicContext","getInitialState","nodes","translate","state","action","DragMove","DragEnd","DragCancel","RegisterDroppable","SetDroppableDisabled","UnregisterDroppable","RestoreFocus","previousActivatorEvent","previousActiveId","activeElement","focusableNode","findFirstFocusableNode","focus","applyModifiers","modifiers","args","useMeasuringConfiguration","useLayoutShiftScrollCompensation","initialized","rectDelta","ActiveDraggableContext","Status","DndContext","memo","accessibility","collisionDetection","measuring","store","dispatchMonitorEvent","registerMonitorListener","status","setStatus","Uninitialized","isInitialized","Initialized","activeId","activeRects","initial","translated","activeRef","activeSensor","setActiveSensor","setActivatorEvent","latestProps","draggableDescribedById","enabledDroppableContainers","activationCoordinates","autoScrollOptions","getAutoScrollerOptions","initialActiveNodeRect","layoutShiftCompensation","parentElement","sensorContext","draggingNode","draggingNodeRect","scrollAdjustedTranslate","overNode","_sensorContext$curren","usesDragOverlay","nodeRectDelta","modifiedTranslate","overlayNodeRect","scrollAdjustment","activeNodeScrollDelta","overId","setOver","appliedTranslate","instantiateSensor","sensorInstance","unstable_batchedUpdates","Initializing","createHandler","cancelDrop","shouldCancel","Promise","resolve","bindActivatorToSensorInstantiator","activeDraggableNode","dndKit","defaultPrevented","activationContext","shouldActivate","capturedBy","overContainer","publicContext","internalContext","Provider","restoreFocus","activeSensorDisablesAutoscroll","autoScrollGloballyDisabled","NullContext","defaultRole","ID_PREFIX","useDraggable","attributes","role","roleDescription","tabIndex","isDragging","setNodeRef","setActivatorNodeRef","dataRef","memoizedAttributes","useDndContext","defaultResizeObserverConfig","timeout","useDroppable","resizeObserverConfig","previous","resizeObserverConnected","callbackId","resizeObserverDisabled","updateMeasurementsFor","resizeObserverTimeout","isArray","newElement","previousElement","unobserve","isOver","AnimationManager","animation","clonedChildren","setClonedChildren","setElement","previousChildren","then","cloneElement","ref","defaultTransform","NullifiedContextProvider","baseStyles","touchAction","defaultTransition","isKeyboardActivator","PositionedOverlay","forwardRef","as","className","style","transition","scaleAdjustedTransform","styles","CSS","Transform","toString","createElement","defaultDropAnimationSideEffects","originalStyles","getPropertyValue","setProperty","classList","remove","defaultKeyframeResolver","final","defaultDropAnimationConfiguration","duration","easing","keyframes","sideEffects","opacity","useDropAnimation","activeDraggable","measurableNode","createDefaultDropAnimation","_ref4","rest","scale","finalTransform","animationKeyframes","firstKeyframe","lastKeyframe","animate","fill","onfinish","useKey","DragOverlay","dropAnimation","dropAnimationConfig","wrapperElement","zIndex","modifiedTransform"],"sources":["/Users/patrice/node_modules/@dnd-kit/core/src/components/DndMonitor/context.ts","/Users/patrice/node_modules/@dnd-kit/core/src/components/DndMonitor/useDndMonitor.ts","/Users/patrice/node_modules/@dnd-kit/core/src/components/DndMonitor/useDndMonitorProvider.tsx","/Users/patrice/node_modules/@dnd-kit/core/src/components/Accessibility/defaults.ts","/Users/patrice/node_modules/@dnd-kit/core/src/components/Accessibility/Accessibility.tsx","/Users/patrice/node_modules/@dnd-kit/core/src/store/actions.ts","/Users/patrice/node_modules/@dnd-kit/core/src/utilities/other/noop.ts","/Users/patrice/node_modules/@dnd-kit/core/src/sensors/useSensor.ts","/Users/patrice/node_modules/@dnd-kit/core/src/sensors/useSensors.ts","/Users/patrice/node_modules/@dnd-kit/core/src/utilities/coordinates/constants.ts","/Users/patrice/node_modules/@dnd-kit/core/src/utilities/coordinates/distanceBetweenPoints.ts","/Users/patrice/node_modules/@dnd-kit/core/src/utilities/coordinates/getRelativeTransformOrigin.ts","/Users/patrice/node_modules/@dnd-kit/core/src/utilities/algorithms/helpers.ts","/Users/patrice/node_modules/@dnd-kit/core/src/utilities/algorithms/closestCenter.ts","/Users/patrice/node_modules/@dnd-kit/core/src/utilities/algorithms/closestCorners.ts","/Users/patrice/node_modules/@dnd-kit/core/src/utilities/algorithms/rectIntersection.ts","/Users/patrice/node_modules/@dnd-kit/core/src/utilities/algorithms/pointerWithin.ts","/Users/patrice/node_modules/@dnd-kit/core/src/utilities/rect/adjustScale.ts","/Users/patrice/node_modules/@dnd-kit/core/src/utilities/rect/getRectDelta.ts","/Users/patrice/node_modules/@dnd-kit/core/src/utilities/rect/rectAdjustment.ts","/Users/patrice/node_modules/@dnd-kit/core/src/utilities/transform/parseTransform.ts","/Users/patrice/node_modules/@dnd-kit/core/src/utilities/transform/inverseTransform.ts","/Users/patrice/node_modules/@dnd-kit/core/src/utilities/rect/getRect.ts","/Users/patrice/node_modules/@dnd-kit/core/src/utilities/rect/getWindowClientRect.ts","/Users/patrice/node_modules/@dnd-kit/core/src/utilities/scroll/isFixed.ts","/Users/patrice/node_modules/@dnd-kit/core/src/utilities/scroll/isScrollable.ts","/Users/patrice/node_modules/@dnd-kit/core/src/utilities/scroll/getScrollableAncestors.ts","/Users/patrice/node_modules/@dnd-kit/core/src/utilities/scroll/getScrollableElement.ts","/Users/patrice/node_modules/@dnd-kit/core/src/utilities/scroll/getScrollCoordinates.ts","/Users/patrice/node_modules/@dnd-kit/core/src/types/direction.ts","/Users/patrice/node_modules/@dnd-kit/core/src/utilities/scroll/documentScrollingElement.ts","/Users/patrice/node_modules/@dnd-kit/core/src/utilities/scroll/getScrollPosition.ts","/Users/patrice/node_modules/@dnd-kit/core/src/utilities/scroll/getScrollDirectionAndSpeed.ts","/Users/patrice/node_modules/@dnd-kit/core/src/utilities/scroll/getScrollElementRect.ts","/Users/patrice/node_modules/@dnd-kit/core/src/utilities/scroll/getScrollOffsets.ts","/Users/patrice/node_modules/@dnd-kit/core/src/utilities/scroll/scrollIntoViewIfNeeded.ts","/Users/patrice/node_modules/@dnd-kit/core/src/utilities/rect/Rect.ts","/Users/patrice/node_modules/@dnd-kit/core/src/sensors/utilities/Listeners.ts","/Users/patrice/node_modules/@dnd-kit/core/src/sensors/utilities/getEventListenerTarget.ts","/Users/patrice/node_modules/@dnd-kit/core/src/sensors/utilities/hasExceededDistance.ts","/Users/patrice/node_modules/@dnd-kit/core/src/sensors/events.ts","/Users/patrice/node_modules/@dnd-kit/core/src/sensors/keyboard/types.ts","/Users/patrice/node_modules/@dnd-kit/core/src/sensors/keyboard/defaults.ts","/Users/patrice/node_modules/@dnd-kit/core/src/sensors/keyboard/KeyboardSensor.ts","/Users/patrice/node_modules/@dnd-kit/core/src/sensors/pointer/AbstractPointerSensor.ts","/Users/patrice/node_modules/@dnd-kit/core/src/sensors/pointer/PointerSensor.ts","/Users/patrice/node_modules/@dnd-kit/core/src/sensors/mouse/MouseSensor.ts","/Users/patrice/node_modules/@dnd-kit/core/src/sensors/touch/TouchSensor.ts","/Users/patrice/node_modules/@dnd-kit/core/src/hooks/utilities/useAutoScroller.ts","/Users/patrice/node_modules/@dnd-kit/core/src/hooks/utilities/useCachedNode.ts","/Users/patrice/node_modules/@dnd-kit/core/src/hooks/utilities/useCombineActivators.ts","/Users/patrice/node_modules/@dnd-kit/core/src/hooks/utilities/useDroppableMeasuring.ts","/Users/patrice/node_modules/@dnd-kit/core/src/hooks/utilities/useInitialValue.ts","/Users/patrice/node_modules/@dnd-kit/core/src/hooks/utilities/useInitialRect.ts","/Users/patrice/node_modules/@dnd-kit/core/src/hooks/utilities/useMutationObserver.ts","/Users/patrice/node_modules/@dnd-kit/core/src/hooks/utilities/useResizeObserver.ts","/Users/patrice/node_modules/@dnd-kit/core/src/hooks/utilities/useRect.ts","/Users/patrice/node_modules/@dnd-kit/core/src/hooks/utilities/useRectDelta.ts","/Users/patrice/node_modules/@dnd-kit/core/src/hooks/utilities/useScrollableAncestors.ts","/Users/patrice/node_modules/@dnd-kit/core/src/hooks/utilities/useScrollOffsets.ts","/Users/patrice/node_modules/@dnd-kit/core/src/hooks/utilities/useScrollOffsetsDelta.ts","/Users/patrice/node_modules/@dnd-kit/core/src/hooks/utilities/useSensorSetup.ts","/Users/patrice/node_modules/@dnd-kit/core/src/hooks/utilities/useSyntheticListeners.ts","/Users/patrice/node_modules/@dnd-kit/core/src/hooks/utilities/useWindowRect.ts","/Users/patrice/node_modules/@dnd-kit/core/src/hooks/utilities/useRects.ts","/Users/patrice/node_modules/@dnd-kit/core/src/utilities/nodes/getMeasurableNode.ts","/Users/patrice/node_modules/@dnd-kit/core/src/hooks/utilities/useDragOverlayMeasuring.ts","/Users/patrice/node_modules/@dnd-kit/core/src/components/DndContext/defaults.ts","/Users/patrice/node_modules/@dnd-kit/core/src/store/constructors.ts","/Users/patrice/node_modules/@dnd-kit/core/src/store/context.ts","/Users/patrice/node_modules/@dnd-kit/core/src/store/reducer.ts","/Users/patrice/node_modules/@dnd-kit/core/src/components/Accessibility/components/RestoreFocus.tsx","/Users/patrice/node_modules/@dnd-kit/core/src/modifiers/applyModifiers.ts","/Users/patrice/node_modules/@dnd-kit/core/src/components/DndContext/hooks/useMeasuringConfiguration.ts","/Users/patrice/node_modules/@dnd-kit/core/src/components/DndContext/hooks/useLayoutShiftScrollCompensation.ts","/Users/patrice/node_modules/@dnd-kit/core/src/components/DndContext/DndContext.tsx","/Users/patrice/node_modules/@dnd-kit/core/src/hooks/useDraggable.ts","/Users/patrice/node_modules/@dnd-kit/core/src/hooks/useDndContext.ts","/Users/patrice/node_modules/@dnd-kit/core/src/hooks/useDroppable.ts","/Users/patrice/node_modules/@dnd-kit/core/src/components/DragOverlay/components/AnimationManager/AnimationManager.tsx","/Users/patrice/node_modules/@dnd-kit/core/src/components/DragOverlay/components/NullifiedContextProvider/NullifiedContextProvider.tsx","/Users/patrice/node_modules/@dnd-kit/core/src/components/DragOverlay/components/PositionedOverlay/PositionedOverlay.tsx","/Users/patrice/node_modules/@dnd-kit/core/src/components/DragOverlay/hooks/useDropAnimation.ts","/Users/patrice/node_modules/@dnd-kit/core/src/components/DragOverlay/hooks/useKey.ts","/Users/patrice/node_modules/@dnd-kit/core/src/components/DragOverlay/DragOverlay.tsx"],"sourcesContent":["import {createContext} from 'react';\n\nimport type {RegisterListener} from './types';\n\nexport const DndMonitorContext = createContext<RegisterListener | null>(null);\n","import {useContext, useEffect} from 'react';\n\nimport {DndMonitorContext} from './context';\nimport type {DndMonitorListener} from './types';\n\nexport function useDndMonitor(listener: DndMonitorListener) {\n  const registerListener = useContext(DndMonitorContext);\n\n  useEffect(() => {\n    if (!registerListener) {\n      throw new Error(\n        'useDndMonitor must be used within a children of <DndContext>'\n      );\n    }\n\n    const unsubscribe = registerListener(listener);\n\n    return unsubscribe;\n  }, [listener, registerListener]);\n}\n","import {useCallback, useState} from 'react';\n\nimport type {DndMonitorListener, DndMonitorEvent} from './types';\n\nexport function useDndMonitorProvider() {\n  const [listeners] = useState(() => new Set<DndMonitorListener>());\n\n  const registerListener = useCallback(\n    (listener) => {\n      listeners.add(listener);\n      return () => listeners.delete(listener);\n    },\n    [listeners]\n  );\n\n  const dispatch = useCallback(\n    ({type, event}: DndMonitorEvent) => {\n      listeners.forEach((listener) => listener[type]?.(event as any));\n    },\n    [listeners]\n  );\n\n  return [dispatch, registerListener] as const;\n}\n","import type {Announcements, ScreenReaderInstructions} from './types';\n\nexport const defaultScreenReaderInstructions: ScreenReaderInstructions = {\n  draggable: `\n    To pick up a draggable item, press the space bar.\n    While dragging, use the arrow keys to move the item.\n    Press space again to drop the item in its new position, or press escape to cancel.\n  `,\n};\n\nexport const defaultAnnouncements: Announcements = {\n  onDragStart({active}) {\n    return `Picked up draggable item ${active.id}.`;\n  },\n  onDragOver({active, over}) {\n    if (over) {\n      return `Draggable item ${active.id} was moved over droppable area ${over.id}.`;\n    }\n\n    return `Draggable item ${active.id} is no longer over a droppable area.`;\n  },\n  onDragEnd({active, over}) {\n    if (over) {\n      return `Draggable item ${active.id} was dropped over droppable area ${over.id}`;\n    }\n\n    return `Draggable item ${active.id} was dropped.`;\n  },\n  onDragCancel({active}) {\n    return `Dragging was cancelled. Draggable item ${active.id} was dropped.`;\n  },\n};\n","import React, {useEffect, useMemo, useState} from 'react';\nimport {createPortal} from 'react-dom';\nimport {useUniqueId} from '@dnd-kit/utilities';\nimport {HiddenText, LiveRegion, useAnnouncement} from '@dnd-kit/accessibility';\n\nimport {DndMonitorListener, useDndMonitor} from '../DndMonitor';\n\nimport type {Announcements, ScreenReaderInstructions} from './types';\nimport {\n  defaultAnnouncements,\n  defaultScreenReaderInstructions,\n} from './defaults';\n\ninterface Props {\n  announcements?: Announcements;\n  container?: Element;\n  screenReaderInstructions?: ScreenReaderInstructions;\n  hiddenTextDescribedById: string;\n}\n\nexport function Accessibility({\n  announcements = defaultAnnouncements,\n  container,\n  hiddenTextDescribedById,\n  screenReaderInstructions = defaultScreenReaderInstructions,\n}: Props) {\n  const {announce, announcement} = useAnnouncement();\n  const liveRegionId = useUniqueId(`DndLiveRegion`);\n  const [mounted, setMounted] = useState(false);\n\n  useEffect(() => {\n    setMounted(true);\n  }, []);\n\n  useDndMonitor(\n    useMemo<DndMonitorListener>(\n      () => ({\n        onDragStart({active}) {\n          announce(announcements.onDragStart({active}));\n        },\n        onDragMove({active, over}) {\n          if (announcements.onDragMove) {\n            announce(announcements.onDragMove({active, over}));\n          }\n        },\n        onDragOver({active, over}) {\n          announce(announcements.onDragOver({active, over}));\n        },\n        onDragEnd({active, over}) {\n          announce(announcements.onDragEnd({active, over}));\n        },\n        onDragCancel({active, over}) {\n          announce(announcements.onDragCancel({active, over}));\n        },\n      }),\n      [announce, announcements]\n    )\n  );\n\n  if (!mounted) {\n    return null;\n  }\n\n  const markup = (\n    <>\n      <HiddenText\n        id={hiddenTextDescribedById}\n        value={screenReaderInstructions.draggable}\n      />\n      <LiveRegion id={liveRegionId} announcement={announcement} />\n    </>\n  );\n\n  return container ? createPortal(markup, container) : markup;\n}\n","import type {Coordinates, UniqueIdentifier} from '../types';\nimport type {DroppableContainer} from './types';\n\nexport enum Action {\n  DragStart = 'dragStart',\n  DragMove = 'dragMove',\n  DragEnd = 'dragEnd',\n  DragCancel = 'dragCancel',\n  DragOver = 'dragOver',\n  RegisterDroppable = 'registerDroppable',\n  SetDroppableDisabled = 'setDroppableDisabled',\n  UnregisterDroppable = 'unregisterDroppable',\n}\n\nexport type Actions =\n  | {\n      type: Action.DragStart;\n      active: UniqueIdentifier;\n      initialCoordinates: Coordinates;\n    }\n  | {type: Action.DragMove; coordinates: Coordinates}\n  | {type: Action.DragEnd}\n  | {type: Action.DragCancel}\n  | {\n      type: Action.RegisterDroppable;\n      element: DroppableContainer;\n    }\n  | {\n      type: Action.SetDroppableDisabled;\n      id: UniqueIdentifier;\n      key: UniqueIdentifier;\n      disabled: boolean;\n    }\n  | {\n      type: Action.UnregisterDroppable;\n      id: UniqueIdentifier;\n      key: UniqueIdentifier;\n    };\n","export function noop(..._args: any) {}\n","import {useMemo} from 'react';\n\nimport type {Sensor, SensorDescriptor, SensorOptions} from './types';\n\nexport function useSensor<T extends SensorOptions>(\n  sensor: Sensor<T>,\n  options?: T\n): SensorDescriptor<T> {\n  return useMemo(\n    () => ({\n      sensor,\n      options: options ?? ({} as T),\n    }),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [sensor, options]\n  );\n}\n","import {useMemo} from 'react';\n\nimport type {SensorDescriptor, SensorOptions} from './types';\n\nexport function useSensors(\n  ...sensors: (SensorDescriptor<any> | undefined | null)[]\n): SensorDescriptor<SensorOptions>[] {\n  return useMemo(\n    () =>\n      [...sensors].filter(\n        (sensor): sensor is SensorDescriptor<any> => sensor != null\n      ),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [...sensors]\n  );\n}\n","import type {Coordinates} from '../../types';\n\nexport const defaultCoordinates: Coordinates = Object.freeze({\n  x: 0,\n  y: 0,\n});\n","import type {Coordinates} from '../../types';\n\n/**\n * Returns the distance between two points\n */\nexport function distanceBetween(p1: Coordinates, p2: Coordinates) {\n  return Math.sqrt(Math.pow(p1.x - p2.x, 2) + Math.pow(p1.y - p2.y, 2));\n}\n","import {getEventCoordinates} from '@dnd-kit/utilities';\nimport type {ClientRect} from '../../types';\n\nexport function getRelativeTransformOrigin(\n  event: MouseEvent | TouchEvent | KeyboardEvent,\n  rect: ClientRect\n) {\n  const eventCoordinates = getEventCoordinates(event);\n\n  if (!eventCoordinates) {\n    return '0 0';\n  }\n\n  const transformOrigin = {\n    x: ((eventCoordinates.x - rect.left) / rect.width) * 100,\n    y: ((eventCoordinates.y - rect.top) / rect.height) * 100,\n  };\n\n  return `${transformOrigin.x}% ${transformOrigin.y}%`;\n}\n","/* eslint-disable no-redeclare */\nimport type {ClientRect} from '../../types';\n\nimport type {Collision, CollisionDescriptor} from './types';\n\n/**\n * Sort collisions from smallest to greatest value\n */\nexport function sortCollisionsAsc(\n  {data: {value: a}}: CollisionDescriptor,\n  {data: {value: b}}: CollisionDescriptor\n) {\n  return a - b;\n}\n\n/**\n * Sort collisions from greatest to smallest value\n */\nexport function sortCollisionsDesc(\n  {data: {value: a}}: CollisionDescriptor,\n  {data: {value: b}}: CollisionDescriptor\n) {\n  return b - a;\n}\n\n/**\n * Returns the coordinates of the corners of a given rectangle:\n * [TopLeft {x, y}, TopRight {x, y}, BottomLeft {x, y}, BottomRight {x, y}]\n */\nexport function cornersOfRectangle({left, top, height, width}: ClientRect) {\n  return [\n    {\n      x: left,\n      y: top,\n    },\n    {\n      x: left + width,\n      y: top,\n    },\n    {\n      x: left,\n      y: top + height,\n    },\n    {\n      x: left + width,\n      y: top + height,\n    },\n  ];\n}\n\n/**\n * Returns the first collision, or null if there isn't one.\n * If a property is specified, returns the specified property of the first collision.\n */\nexport function getFirstCollision(\n  collisions: Collision[] | null | undefined\n): Collision | null;\nexport function getFirstCollision<T extends keyof Collision>(\n  collisions: Collision[] | null | undefined,\n  property: T\n): Collision[T] | null;\nexport function getFirstCollision(\n  collisions: Collision[] | null | undefined,\n  property?: keyof Collision\n) {\n  if (!collisions || collisions.length === 0) {\n    return null;\n  }\n\n  const [firstCollision] = collisions;\n\n  return property ? firstCollision[property] : firstCollision;\n}\n","import {distanceBetween} from '../coordinates';\nimport type {Coordinates, ClientRect} from '../../types';\n\nimport type {CollisionDescriptor, CollisionDetection} from './types';\nimport {sortCollisionsAsc} from './helpers';\n\n/**\n * Returns the coordinates of the center of a given ClientRect\n */\nfunction centerOfRectangle(\n  rect: ClientRect,\n  left = rect.left,\n  top = rect.top\n): Coordinates {\n  return {\n    x: left + rect.width * 0.5,\n    y: top + rect.height * 0.5,\n  };\n}\n\n/**\n * Returns the closest rectangles from an array of rectangles to the center of a given\n * rectangle.\n */\nexport const closestCenter: CollisionDetection = ({\n  collisionRect,\n  droppableRects,\n  droppableContainers,\n}) => {\n  const centerRect = centerOfRectangle(\n    collisionRect,\n    collisionRect.left,\n    collisionRect.top\n  );\n  const collisions: CollisionDescriptor[] = [];\n\n  for (const droppableContainer of droppableContainers) {\n    const {id} = droppableContainer;\n    const rect = droppableRects.get(id);\n\n    if (rect) {\n      const distBetween = distanceBetween(centerOfRectangle(rect), centerRect);\n\n      collisions.push({id, data: {droppableContainer, value: distBetween}});\n    }\n  }\n\n  return collisions.sort(sortCollisionsAsc);\n};\n","import {distanceBetween} from '../coordinates';\n\nimport type {CollisionDescriptor, CollisionDetection} from './types';\nimport {cornersOfRectangle, sortCollisionsAsc} from './helpers';\n\n/**\n * Returns the closest rectangles from an array of rectangles to the corners of\n * another rectangle.\n */\nexport const closestCorners: CollisionDetection = ({\n  collisionRect,\n  droppableRects,\n  droppableContainers,\n}) => {\n  const corners = cornersOfRectangle(collisionRect);\n  const collisions: CollisionDescriptor[] = [];\n\n  for (const droppableContainer of droppableContainers) {\n    const {id} = droppableContainer;\n    const rect = droppableRects.get(id);\n\n    if (rect) {\n      const rectCorners = cornersOfRectangle(rect);\n      const distances = corners.reduce((accumulator, corner, index) => {\n        return accumulator + distanceBetween(rectCorners[index], corner);\n      }, 0);\n      const effectiveDistance = Number((distances / 4).toFixed(4));\n\n      collisions.push({\n        id,\n        data: {droppableContainer, value: effectiveDistance},\n      });\n    }\n  }\n\n  return collisions.sort(sortCollisionsAsc);\n};\n","import type {ClientRect} from '../../types';\n\nimport type {CollisionDescriptor, CollisionDetection} from './types';\nimport {sortCollisionsDesc} from './helpers';\n\n/**\n * Returns the intersecting rectangle area between two rectangles\n */\nexport function getIntersectionRatio(\n  entry: ClientRect,\n  target: ClientRect\n): number {\n  const top = Math.max(target.top, entry.top);\n  const left = Math.max(target.left, entry.left);\n  const right = Math.min(target.left + target.width, entry.left + entry.width);\n  const bottom = Math.min(target.top + target.height, entry.top + entry.height);\n  const width = right - left;\n  const height = bottom - top;\n\n  if (left < right && top < bottom) {\n    const targetArea = target.width * target.height;\n    const entryArea = entry.width * entry.height;\n    const intersectionArea = width * height;\n    const intersectionRatio =\n      intersectionArea / (targetArea + entryArea - intersectionArea);\n\n    return Number(intersectionRatio.toFixed(4));\n  }\n\n  // Rectangles do not overlap, or overlap has an area of zero (edge/corner overlap)\n  return 0;\n}\n\n/**\n * Returns the rectangles that has the greatest intersection area with a given\n * rectangle in an array of rectangles.\n */\nexport const rectIntersection: CollisionDetection = ({\n  collisionRect,\n  droppableRects,\n  droppableContainers,\n}) => {\n  const collisions: CollisionDescriptor[] = [];\n\n  for (const droppableContainer of droppableContainers) {\n    const {id} = droppableContainer;\n    const rect = droppableRects.get(id);\n\n    if (rect) {\n      const intersectionRatio = getIntersectionRatio(rect, collisionRect);\n\n      if (intersectionRatio > 0) {\n        collisions.push({\n          id,\n          data: {droppableContainer, value: intersectionRatio},\n        });\n      }\n    }\n  }\n\n  return collisions.sort(sortCollisionsDesc);\n};\n","import type {Coordinates, ClientRect} from '../../types';\nimport {distanceBetween} from '../coordinates';\n\nimport type {CollisionDescriptor, CollisionDetection} from './types';\nimport {cornersOfRectangle, sortCollisionsAsc} from './helpers';\n\n/**\n * Check if a given point is contained within a bounding rectangle\n */\nfunction isPointWithinRect(point: Coordinates, rect: ClientRect): boolean {\n  const {top, left, bottom, right} = rect;\n\n  return (\n    top <= point.y && point.y <= bottom && left <= point.x && point.x <= right\n  );\n}\n\n/**\n * Returns the rectangles that the pointer is hovering over\n */\nexport const pointerWithin: CollisionDetection = ({\n  droppableContainers,\n  droppableRects,\n  pointerCoordinates,\n}) => {\n  if (!pointerCoordinates) {\n    return [];\n  }\n\n  const collisions: CollisionDescriptor[] = [];\n\n  for (const droppableContainer of droppableContainers) {\n    const {id} = droppableContainer;\n    const rect = droppableRects.get(id);\n\n    if (rect && isPointWithinRect(pointerCoordinates, rect)) {\n      /* There may be more than a single rectangle intersecting\n       * with the pointer coordinates. In order to sort the\n       * colliding rectangles, we measure the distance between\n       * the pointer and the corners of the intersecting rectangle\n       */\n      const corners = cornersOfRectangle(rect);\n      const distances = corners.reduce((accumulator, corner) => {\n        return accumulator + distanceBetween(pointerCoordinates, corner);\n      }, 0);\n      const effectiveDistance = Number((distances / 4).toFixed(4));\n\n      collisions.push({\n        id,\n        data: {droppableContainer, value: effectiveDistance},\n      });\n    }\n  }\n\n  return collisions.sort(sortCollisionsAsc);\n};\n","import type {Transform} from '@dnd-kit/utilities';\nimport type {ClientRect} from '../../types';\n\nexport function adjustScale(\n  transform: Transform,\n  rect1: ClientRect | null,\n  rect2: ClientRect | null\n): Transform {\n  return {\n    ...transform,\n    scaleX: rect1 && rect2 ? rect1.width / rect2.width : 1,\n    scaleY: rect1 && rect2 ? rect1.height / rect2.height : 1,\n  };\n}\n","import type {Coordinates, ClientRect} from '../../types';\nimport {defaultCoordinates} from '../coordinates';\n\nexport function getRectDelta(\n  rect1: ClientRect | null,\n  rect2: ClientRect | null\n): Coordinates {\n  return rect1 && rect2\n    ? {\n        x: rect1.left - rect2.left,\n        y: rect1.top - rect2.top,\n      }\n    : defaultCoordinates;\n}\n","import type {Coordinates, ClientRect} from '../../types';\n\nexport function createRectAdjustmentFn(modifier: number) {\n  return function adjustClientRect(\n    rect: ClientRect,\n    ...adjustments: Coordinates[]\n  ): ClientRect {\n    return adjustments.reduce<ClientRect>(\n      (acc, adjustment) => ({\n        ...acc,\n        top: acc.top + modifier * adjustment.y,\n        bottom: acc.bottom + modifier * adjustment.y,\n        left: acc.left + modifier * adjustment.x,\n        right: acc.right + modifier * adjustment.x,\n      }),\n      {...rect}\n    );\n  };\n}\n\nexport const getAdjustedRect = createRectAdjustmentFn(1);\n","import type {Transform} from '@dnd-kit/utilities';\n\nexport function parseTransform(transform: string): Transform | null {\n  if (transform.startsWith('matrix3d(')) {\n    const transformArray = transform.slice(9, -1).split(/, /);\n\n    return {\n      x: +transformArray[12],\n      y: +transformArray[13],\n      scaleX: +transformArray[0],\n      scaleY: +transformArray[5],\n    };\n  } else if (transform.startsWith('matrix(')) {\n    const transformArray = transform.slice(7, -1).split(/, /);\n\n    return {\n      x: +transformArray[4],\n      y: +transformArray[5],\n      scaleX: +transformArray[0],\n      scaleY: +transformArray[3],\n    };\n  }\n\n  return null;\n}\n","import type {ClientRect} from '../../types';\n\nimport {parseTransform} from './parseTransform';\n\nexport function inverseTransform(\n  rect: ClientRect,\n  transform: string,\n  transformOrigin: string\n): ClientRect {\n  const parsedTransform = parseTransform(transform);\n\n  if (!parsedTransform) {\n    return rect;\n  }\n\n  const {scaleX, scaleY, x: translateX, y: translateY} = parsedTransform;\n\n  const x = rect.left - translateX - (1 - scaleX) * parseFloat(transformOrigin);\n  const y =\n    rect.top -\n    translateY -\n    (1 - scaleY) *\n      parseFloat(transformOrigin.slice(transformOrigin.indexOf(' ') + 1));\n  const w = scaleX ? rect.width / scaleX : rect.width;\n  const h = scaleY ? rect.height / scaleY : rect.height;\n\n  return {\n    width: w,\n    height: h,\n    top: y,\n    right: x + w,\n    bottom: y + h,\n    left: x,\n  };\n}\n","import {getWindow} from '@dnd-kit/utilities';\n\nimport type {ClientRect} from '../../types';\nimport {inverseTransform} from '../transform';\n\ninterface Options {\n  ignoreTransform?: boolean;\n}\n\nconst defaultOptions: Options = {ignoreTransform: false};\n\n/**\n * Returns the bounding client rect of an element relative to the viewport.\n */\nexport function getClientRect(\n  element: Element,\n  options: Options = defaultOptions\n) {\n  let rect: ClientRect = element.getBoundingClientRect();\n\n  if (options.ignoreTransform) {\n    const {getComputedStyle} = getWindow(element);\n    const {transform, transformOrigin} = getComputedStyle(element);\n\n    if (transform) {\n      rect = inverseTransform(rect, transform, transformOrigin);\n    }\n  }\n\n  const {top, left, width, height, bottom, right} = rect;\n\n  return {\n    top,\n    left,\n    width,\n    height,\n    bottom,\n    right,\n  };\n}\n\n/**\n * Returns the bounding client rect of an element relative to the viewport.\n *\n * @remarks\n * The ClientRect returned by this method does not take into account transforms\n * applied to the element it measures.\n *\n */\nexport function getTransformAgnosticClientRect(element: Element): ClientRect {\n  return getClientRect(element, {ignoreTransform: true});\n}\n","import type {ClientRect} from '../../types';\n\nexport function getWindowClientRect(element: typeof window): ClientRect {\n  const width = element.innerWidth;\n  const height = element.innerHeight;\n\n  return {\n    top: 0,\n    left: 0,\n    right: width,\n    bottom: height,\n    width,\n    height,\n  };\n}\n","import {getWindow} from '@dnd-kit/utilities';\n\nexport function isFixed(\n  node: HTMLElement,\n  computedStyle: CSSStyleDeclaration = getWindow(node).getComputedStyle(node)\n): boolean {\n  return computedStyle.position === 'fixed';\n}\n","import {getWindow} from '@dnd-kit/utilities';\n\nexport function isScrollable(\n  element: HTMLElement,\n  computedStyle: CSSStyleDeclaration = getWindow(element).getComputedStyle(\n    element\n  )\n): boolean {\n  const overflowRegex = /(auto|scroll|overlay)/;\n  const properties = ['overflow', 'overflowX', 'overflowY'];\n\n  return properties.some((property) => {\n    const value = computedStyle[property as keyof CSSStyleDeclaration];\n\n    return typeof value === 'string' ? overflowRegex.test(value) : false;\n  });\n}\n","import {\n  getWindow,\n  isDocument,\n  isHTMLElement,\n  isSVGElement,\n} from '@dnd-kit/utilities';\n\nimport {isFixed} from './isFixed';\nimport {isScrollable} from './isScrollable';\n\nexport function getScrollableAncestors(\n  element: Node | null,\n  limit?: number\n): Element[] {\n  const scrollParents: Element[] = [];\n\n  function findScrollableAncestors(node: Node | null): Element[] {\n    if (limit != null && scrollParents.length >= limit) {\n      return scrollParents;\n    }\n\n    if (!node) {\n      return scrollParents;\n    }\n\n    if (\n      isDocument(node) &&\n      node.scrollingElement != null &&\n      !scrollParents.includes(node.scrollingElement)\n    ) {\n      scrollParents.push(node.scrollingElement);\n\n      return scrollParents;\n    }\n\n    if (!isHTMLElement(node) || isSVGElement(node)) {\n      return scrollParents;\n    }\n\n    if (scrollParents.includes(node)) {\n      return scrollParents;\n    }\n\n    const {getComputedStyle} = getWindow(node);\n    const computedStyle = getComputedStyle(node);\n\n    if (node !== element) {\n      if (isScrollable(node, computedStyle)) {\n        scrollParents.push(node);\n      }\n    }\n\n    if (isFixed(node, computedStyle)) {\n      return scrollParents;\n    }\n\n    return findScrollableAncestors(node.parentNode);\n  }\n\n  if (!element) {\n    return scrollParents;\n  }\n\n  return findScrollableAncestors(element);\n}\n\nexport function getFirstScrollableAncestor(node: Node | null): Element | null {\n  const [firstScrollableAncestor] = getScrollableAncestors(node, 1);\n\n  return firstScrollableAncestor ?? null;\n}\n","import {\n  canUseDOM,\n  isHTMLElement,\n  isDocument,\n  getOwnerDocument,\n  isNode,\n  isWindow,\n} from '@dnd-kit/utilities';\n\nexport function getScrollableElement(element: EventTarget | null) {\n  if (!canUseDOM || !element) {\n    return null;\n  }\n\n  if (isWindow(element)) {\n    return element;\n  }\n\n  if (!isNode(element)) {\n    return null;\n  }\n\n  if (\n    isDocument(element) ||\n    element === getOwnerDocument(element).scrollingElement\n  ) {\n    return window;\n  }\n\n  if (isHTMLElement(element)) {\n    return element;\n  }\n\n  return null;\n}\n","import {isWindow} from '@dnd-kit/utilities';\n\nimport type {Coordinates} from '../../types';\n\nexport function getScrollXCoordinate(element: Element | typeof window): number {\n  if (isWindow(element)) {\n    return element.scrollX;\n  }\n\n  return element.scrollLeft;\n}\n\nexport function getScrollYCoordinate(element: Element | typeof window): number {\n  if (isWindow(element)) {\n    return element.scrollY;\n  }\n\n  return element.scrollTop;\n}\n\nexport function getScrollCoordinates(\n  element: Element | typeof window\n): Coordinates {\n  return {\n    x: getScrollXCoordinate(element),\n    y: getScrollYCoordinate(element),\n  };\n}\n","export enum Direction {\n  Forward = 1,\n  Backward = -1,\n}\n","import {canUseDOM} from '@dnd-kit/utilities';\n\nexport function isDocumentScrollingElement(element: Element | null) {\n  if (!canUseDOM || !element) {\n    return false;\n  }\n\n  return element === document.scrollingElement;\n}\n","import {isDocumentScrollingElement} from './documentScrollingElement';\n\nexport function getScrollPosition(scrollingContainer: Element) {\n  const minScroll = {\n    x: 0,\n    y: 0,\n  };\n  const dimensions = isDocumentScrollingElement(scrollingContainer)\n    ? {\n        height: window.innerHeight,\n        width: window.innerWidth,\n      }\n    : {\n        height: scrollingContainer.clientHeight,\n        width: scrollingContainer.clientWidth,\n      };\n  const maxScroll = {\n    x: scrollingContainer.scrollWidth - dimensions.width,\n    y: scrollingContainer.scrollHeight - dimensions.height,\n  };\n\n  const isTop = scrollingContainer.scrollTop <= minScroll.y;\n  const isLeft = scrollingContainer.scrollLeft <= minScroll.x;\n  const isBottom = scrollingContainer.scrollTop >= maxScroll.y;\n  const isRight = scrollingContainer.scrollLeft >= maxScroll.x;\n\n  return {\n    isTop,\n    isLeft,\n    isBottom,\n    isRight,\n    maxScroll,\n    minScroll,\n  };\n}\n","import {Direction, ClientRect} from '../../types';\nimport {getScrollPosition} from './getScrollPosition';\n\ninterface PositionalCoordinates\n  extends Pick<ClientRect, 'top' | 'left' | 'right' | 'bottom'> {}\n\nconst defaultThreshold = {\n  x: 0.2,\n  y: 0.2,\n};\n\nexport function getScrollDirectionAndSpeed(\n  scrollContainer: Element,\n  scrollContainerRect: ClientRect,\n  {top, left, right, bottom}: PositionalCoordinates,\n  acceleration = 10,\n  thresholdPercentage = defaultThreshold\n) {\n  const {isTop, isBottom, isLeft, isRight} = getScrollPosition(scrollContainer);\n\n  const direction = {\n    x: 0,\n    y: 0,\n  };\n  const speed = {\n    x: 0,\n    y: 0,\n  };\n  const threshold = {\n    height: scrollContainerRect.height * thresholdPercentage.y,\n    width: scrollContainerRect.width * thresholdPercentage.x,\n  };\n\n  if (!isTop && top <= scrollContainerRect.top + threshold.height) {\n    // Scroll Up\n    direction.y = Direction.Backward;\n    speed.y =\n      acceleration *\n      Math.abs(\n        (scrollContainerRect.top + threshold.height - top) / threshold.height\n      );\n  } else if (\n    !isBottom &&\n    bottom >= scrollContainerRect.bottom - threshold.height\n  ) {\n    // Scroll Down\n    direction.y = Direction.Forward;\n    speed.y =\n      acceleration *\n      Math.abs(\n        (scrollContainerRect.bottom - threshold.height - bottom) /\n          threshold.height\n      );\n  }\n\n  if (!isRight && right >= scrollContainerRect.right - threshold.width) {\n    // Scroll Right\n    direction.x = Direction.Forward;\n    speed.x =\n      acceleration *\n      Math.abs(\n        (scrollContainerRect.right - threshold.width - right) / threshold.width\n      );\n  } else if (!isLeft && left <= scrollContainerRect.left + threshold.width) {\n    // Scroll Left\n    direction.x = Direction.Backward;\n    speed.x =\n      acceleration *\n      Math.abs(\n        (scrollContainerRect.left + threshold.width - left) / threshold.width\n      );\n  }\n\n  return {\n    direction,\n    speed,\n  };\n}\n","export function getScrollElementRect(element: Element) {\n  if (element === document.scrollingElement) {\n    const {innerWidth, innerHeight} = window;\n\n    return {\n      top: 0,\n      left: 0,\n      right: innerWidth,\n      bottom: innerHeight,\n      width: innerWidth,\n      height: innerHeight,\n    };\n  }\n\n  const {top, left, right, bottom} = element.getBoundingClientRect();\n\n  return {\n    top,\n    left,\n    right,\n    bottom,\n    width: element.clientWidth,\n    height: element.clientHeight,\n  };\n}\n","import {add} from '@dnd-kit/utilities';\n\nimport type {Coordinates} from '../../types';\nimport {\n  getScrollCoordinates,\n  getScrollXCoordinate,\n  getScrollYCoordinate,\n} from './getScrollCoordinates';\nimport {defaultCoordinates} from '../coordinates';\n\nexport function getScrollOffsets(scrollableAncestors: Element[]): Coordinates {\n  return scrollableAncestors.reduce<Coordinates>((acc, node) => {\n    return add(acc, getScrollCoordinates(node));\n  }, defaultCoordinates);\n}\n\nexport function getScrollXOffset(scrollableAncestors: Element[]): number {\n  return scrollableAncestors.reduce<number>((acc, node) => {\n    return acc + getScrollXCoordinate(node);\n  }, 0);\n}\n\nexport function getScrollYOffset(scrollableAncestors: Element[]): number {\n  return scrollableAncestors.reduce<number>((acc, node) => {\n    return acc + getScrollYCoordinate(node);\n  }, 0);\n}\n","import type {ClientRect} from '../../types';\nimport {getClientRect} from '../rect/getRect';\nimport {getFirstScrollableAncestor} from './getScrollableAncestors';\n\nexport function scrollIntoViewIfNeeded(\n  element: HTMLElement | null | undefined,\n  measure: (node: HTMLElement) => ClientRect = getClientRect\n) {\n  if (!element) {\n    return;\n  }\n\n  const {top, left, bottom, right} = measure(element);\n  const firstScrollableAncestor = getFirstScrollableAncestor(element);\n\n  if (!firstScrollableAncestor) {\n    return;\n  }\n\n  if (\n    bottom <= 0 ||\n    right <= 0 ||\n    top >= window.innerHeight ||\n    left >= window.innerWidth\n  ) {\n    element.scrollIntoView({\n      block: 'center',\n      inline: 'center',\n    });\n  }\n}\n","import type {ClientRect} from '../../types/rect';\nimport {\n  getScrollableAncestors,\n  getScrollOffsets,\n  getScrollXOffset,\n  getScrollYOffset,\n} from '../scroll';\n\nconst properties = [\n  ['x', ['left', 'right'], getScrollXOffset],\n  ['y', ['top', 'bottom'], getScrollYOffset],\n] as const;\n\nexport class Rect {\n  constructor(rect: ClientRect, element: Element) {\n    const scrollableAncestors = getScrollableAncestors(element);\n    const scrollOffsets = getScrollOffsets(scrollableAncestors);\n\n    this.rect = {...rect};\n    this.width = rect.width;\n    this.height = rect.height;\n\n    for (const [axis, keys, getScrollOffset] of properties) {\n      for (const key of keys) {\n        Object.defineProperty(this, key, {\n          get: () => {\n            const currentOffsets = getScrollOffset(scrollableAncestors);\n            const scrollOffsetsDeltla = scrollOffsets[axis] - currentOffsets;\n\n            return this.rect[key] + scrollOffsetsDeltla;\n          },\n          enumerable: true,\n        });\n      }\n    }\n\n    Object.defineProperty(this, 'rect', {enumerable: false});\n  }\n\n  private rect: ClientRect;\n\n  public width: number;\n\n  public height: number;\n\n  // The below properties are set by the `Object.defineProperty` calls in the constructor\n  // @ts-ignore\n  public top: number;\n  // @ts-ignore\n  public bottom: number;\n  // @ts-ignore\n  public right: number;\n  // @ts-ignore\n  public left: number;\n}\n","export class Listeners {\n  private listeners: [\n    string,\n    EventListenerOrEventListenerObject,\n    AddEventListenerOptions | boolean | undefined\n  ][] = [];\n\n  constructor(private target: EventTarget | null) {}\n\n  public add<T extends Event>(\n    eventName: string,\n    handler: (event: T) => void,\n    options?: AddEventListenerOptions | boolean\n  ) {\n    this.target?.addEventListener(eventName, handler as EventListener, options);\n    this.listeners.push([eventName, handler as EventListener, options]);\n  }\n\n  public removeAll = () => {\n    this.listeners.forEach((listener) =>\n      this.target?.removeEventListener(...listener)\n    );\n  };\n}\n","import {getOwnerDocument, getWindow} from '@dnd-kit/utilities';\n\nexport function getEventListenerTarget(\n  target: EventTarget | null\n): EventTarget | Document {\n  // If the `event.target` element is removed from the document events will still be targeted\n  // at it, and hence won't always bubble up to the window or document anymore.\n  // If there is any risk of an element being removed while it is being dragged,\n  // the best practice is to attach the event listeners directly to the target.\n  // https://developer.mozilla.org/en-US/docs/Web/API/EventTarget\n\n  const {EventTarget} = getWindow(target);\n\n  return target instanceof EventTarget ? target : getOwnerDocument(target);\n}\n","import type {Coordinates, DistanceMeasurement} from '../../types';\n\nexport function hasExceededDistance(\n  delta: Coordinates,\n  measurement: DistanceMeasurement\n): boolean {\n  const dx = Math.abs(delta.x);\n  const dy = Math.abs(delta.y);\n\n  if (typeof measurement === 'number') {\n    return Math.sqrt(dx ** 2 + dy ** 2) > measurement;\n  }\n\n  if ('x' in measurement && 'y' in measurement) {\n    return dx > measurement.x && dy > measurement.y;\n  }\n\n  if ('x' in measurement) {\n    return dx > measurement.x;\n  }\n\n  if ('y' in measurement) {\n    return dy > measurement.y;\n  }\n\n  return false;\n}\n","export enum EventName {\n  Click = 'click',\n  DragStart = 'dragstart',\n  Keydown = 'keydown',\n  ContextMenu = 'contextmenu',\n  Resize = 'resize',\n  SelectionChange = 'selectionchange',\n  VisibilityChange = 'visibilitychange',\n}\n\nexport function preventDefault(event: Event) {\n  event.preventDefault();\n}\n\nexport function stopPropagation(event: Event) {\n  event.stopPropagation();\n}\n","import type {Coordinates, UniqueIdentifier} from '../../types';\nimport type {SensorContext} from '../types';\n\nexport enum KeyboardCode {\n  Space = 'Space',\n  Down = 'ArrowDown',\n  Right = 'ArrowRight',\n  Left = 'ArrowLeft',\n  Up = 'ArrowUp',\n  Esc = 'Escape',\n  Enter = 'Enter',\n}\n\nexport type KeyboardCodes = {\n  start: KeyboardEvent['code'][];\n  cancel: KeyboardEvent['code'][];\n  end: KeyboardEvent['code'][];\n};\n\nexport type KeyboardCoordinateGetter = (\n  event: KeyboardEvent,\n  args: {\n    active: UniqueIdentifier;\n    currentCoordinates: Coordinates;\n    context: SensorContext;\n  }\n) => Coordinates | void;\n","import {KeyboardCoordinateGetter, KeyboardCode, KeyboardCodes} from './types';\n\nexport const defaultKeyboardCodes: KeyboardCodes = {\n  start: [KeyboardCode.Space, KeyboardCode.Enter],\n  cancel: [KeyboardCode.Esc],\n  end: [KeyboardCode.Space, KeyboardCode.Enter],\n};\n\nexport const defaultKeyboardCoordinateGetter: KeyboardCoordinateGetter = (\n  event,\n  {currentCoordinates}\n) => {\n  switch (event.code) {\n    case KeyboardCode.Right:\n      return {\n        ...currentCoordinates,\n        x: currentCoordinates.x + 25,\n      };\n    case KeyboardCode.Left:\n      return {\n        ...currentCoordinates,\n        x: currentCoordinates.x - 25,\n      };\n    case KeyboardCode.Down:\n      return {\n        ...currentCoordinates,\n        y: currentCoordinates.y + 25,\n      };\n    case KeyboardCode.Up:\n      return {\n        ...currentCoordinates,\n        y: currentCoordinates.y - 25,\n      };\n  }\n\n  return undefined;\n};\n","import {\n  add as getAdjustedCoordinates,\n  subtract as getCoordinatesDelta,\n  getOwnerDocument,\n  getWindow,\n  isKeyboardEvent,\n} from '@dnd-kit/utilities';\n\nimport type {Coordinates} from '../../types';\nimport {\n  defaultCoordinates,\n  getScrollPosition,\n  getScrollElementRect,\n} from '../../utilities';\nimport {scrollIntoViewIfNeeded} from '../../utilities/scroll';\nimport {EventName} from '../events';\nimport {Listeners} from '../utilities';\nimport type {\n  Activators,\n  SensorInstance,\n  SensorProps,\n  SensorOptions,\n} from '../types';\n\nimport {KeyboardCoordinateGetter, KeyboardCode, KeyboardCodes} from './types';\nimport {\n  defaultKeyboardCodes,\n  defaultKeyboardCoordinateGetter,\n} from './defaults';\n\nexport interface KeyboardSensorOptions extends SensorOptions {\n  keyboardCodes?: KeyboardCodes;\n  coordinateGetter?: KeyboardCoordinateGetter;\n  scrollBehavior?: ScrollBehavior;\n  onActivation?({event}: {event: KeyboardEvent}): void;\n}\n\nexport type KeyboardSensorProps = SensorProps<KeyboardSensorOptions>;\n\nexport class KeyboardSensor implements SensorInstance {\n  public autoScrollEnabled = false;\n  private referenceCoordinates: Coordinates | undefined;\n  private listeners: Listeners;\n  private windowListeners: Listeners;\n\n  constructor(private props: KeyboardSensorProps) {\n    const {\n      event: {target},\n    } = props;\n\n    this.props = props;\n    this.listeners = new Listeners(getOwnerDocument(target));\n    this.windowListeners = new Listeners(getWindow(target));\n    this.handleKeyDown = this.handleKeyDown.bind(this);\n    this.handleCancel = this.handleCancel.bind(this);\n\n    this.attach();\n  }\n\n  private attach() {\n    this.handleStart();\n\n    this.windowListeners.add(EventName.Resize, this.handleCancel);\n    this.windowListeners.add(EventName.VisibilityChange, this.handleCancel);\n\n    setTimeout(() => this.listeners.add(EventName.Keydown, this.handleKeyDown));\n  }\n\n  private handleStart() {\n    const {activeNode, onStart} = this.props;\n    const node = activeNode.node.current;\n\n    if (node) {\n      scrollIntoViewIfNeeded(node);\n    }\n\n    onStart(defaultCoordinates);\n  }\n\n  private handleKeyDown(event: Event) {\n    if (isKeyboardEvent(event)) {\n      const {active, context, options} = this.props;\n      const {\n        keyboardCodes = defaultKeyboardCodes,\n        coordinateGetter = defaultKeyboardCoordinateGetter,\n        scrollBehavior = 'smooth',\n      } = options;\n      const {code} = event;\n\n      if (keyboardCodes.end.includes(code)) {\n        this.handleEnd(event);\n        return;\n      }\n\n      if (keyboardCodes.cancel.includes(code)) {\n        this.handleCancel(event);\n        return;\n      }\n\n      const {collisionRect} = context.current;\n      const currentCoordinates = collisionRect\n        ? {x: collisionRect.left, y: collisionRect.top}\n        : defaultCoordinates;\n\n      if (!this.referenceCoordinates) {\n        this.referenceCoordinates = currentCoordinates;\n      }\n\n      const newCoordinates = coordinateGetter(event, {\n        active,\n        context: context.current,\n        currentCoordinates,\n      });\n\n      if (newCoordinates) {\n        const coordinatesDelta = getCoordinatesDelta(\n          newCoordinates,\n          currentCoordinates\n        );\n        const scrollDelta = {\n          x: 0,\n          y: 0,\n        };\n        const {scrollableAncestors} = context.current;\n\n        for (const scrollContainer of scrollableAncestors) {\n          const direction = event.code;\n          const {\n            isTop,\n            isRight,\n            isLeft,\n            isBottom,\n            maxScroll,\n            minScroll,\n          } = getScrollPosition(scrollContainer);\n          const scrollElementRect = getScrollElementRect(scrollContainer);\n\n          const clampedCoordinates = {\n            x: Math.min(\n              direction === KeyboardCode.Right\n                ? scrollElementRect.right - scrollElementRect.width / 2\n                : scrollElementRect.right,\n              Math.max(\n                direction === KeyboardCode.Right\n                  ? scrollElementRect.left\n                  : scrollElementRect.left + scrollElementRect.width / 2,\n                newCoordinates.x\n              )\n            ),\n            y: Math.min(\n              direction === KeyboardCode.Down\n                ? scrollElementRect.bottom - scrollElementRect.height / 2\n                : scrollElementRect.bottom,\n              Math.max(\n                direction === KeyboardCode.Down\n                  ? scrollElementRect.top\n                  : scrollElementRect.top + scrollElementRect.height / 2,\n                newCoordinates.y\n              )\n            ),\n          };\n\n          const canScrollX =\n            (direction === KeyboardCode.Right && !isRight) ||\n            (direction === KeyboardCode.Left && !isLeft);\n          const canScrollY =\n            (direction === KeyboardCode.Down && !isBottom) ||\n            (direction === KeyboardCode.Up && !isTop);\n\n          if (canScrollX && clampedCoordinates.x !== newCoordinates.x) {\n            const newScrollCoordinates =\n              scrollContainer.scrollLeft + coordinatesDelta.x;\n            const canFullyScrollToNewCoordinates =\n              (direction === KeyboardCode.Right &&\n                newScrollCoordinates <= maxScroll.x) ||\n              (direction === KeyboardCode.Left &&\n                newScrollCoordinates >= minScroll.x);\n\n            if (canFullyScrollToNewCoordinates && !coordinatesDelta.y) {\n              // We don't need to update coordinates, the scroll adjustment alone will trigger\n              // logic to auto-detect the new container we are over\n              scrollContainer.scrollTo({\n                left: newScrollCoordinates,\n                behavior: scrollBehavior,\n              });\n              return;\n            }\n\n            scrollDelta.x =\n              direction === KeyboardCode.Right\n                ? scrollContainer.scrollLeft - maxScroll.x\n                : scrollContainer.scrollLeft - minScroll.x;\n\n            scrollContainer.scrollBy({\n              left: -scrollDelta.x,\n              behavior: scrollBehavior,\n            });\n            break;\n          } else if (canScrollY && clampedCoordinates.y !== newCoordinates.y) {\n            const newScrollCoordinates =\n              scrollContainer.scrollTop + coordinatesDelta.y;\n            const canFullyScrollToNewCoordinates =\n              (direction === KeyboardCode.Down &&\n                newScrollCoordinates <= maxScroll.y) ||\n              (direction === KeyboardCode.Up &&\n                newScrollCoordinates >= minScroll.y);\n\n            if (canFullyScrollToNewCoordinates && !coordinatesDelta.x) {\n              // We don't need to update coordinates, the scroll adjustment alone will trigger\n              // logic to auto-detect the new container we are over\n              scrollContainer.scrollTo({\n                top: newScrollCoordinates,\n                behavior: scrollBehavior,\n              });\n              return;\n            }\n\n            scrollDelta.y =\n              direction === KeyboardCode.Down\n                ? scrollContainer.scrollTop - maxScroll.y\n                : scrollContainer.scrollTop - minScroll.y;\n\n            scrollContainer.scrollBy({\n              top: -scrollDelta.y,\n              behavior: scrollBehavior,\n            });\n\n            break;\n          }\n        }\n\n        this.handleMove(\n          event,\n          getAdjustedCoordinates(\n            getCoordinatesDelta(newCoordinates, this.referenceCoordinates),\n            scrollDelta\n          )\n        );\n      }\n    }\n  }\n\n  private handleMove(event: Event, coordinates: Coordinates) {\n    const {onMove} = this.props;\n\n    event.preventDefault();\n    onMove(coordinates);\n  }\n\n  private handleEnd(event: Event) {\n    const {onEnd} = this.props;\n\n    event.preventDefault();\n    this.detach();\n    onEnd();\n  }\n\n  private handleCancel(event: Event) {\n    const {onCancel} = this.props;\n\n    event.preventDefault();\n    this.detach();\n    onCancel();\n  }\n\n  private detach() {\n    this.listeners.removeAll();\n    this.windowListeners.removeAll();\n  }\n\n  static activators: Activators<KeyboardSensorOptions> = [\n    {\n      eventName: 'onKeyDown' as const,\n      handler: (\n        event: React.KeyboardEvent,\n        {keyboardCodes = defaultKeyboardCodes, onActivation},\n        {active}\n      ) => {\n        const {code} = event.nativeEvent;\n\n        if (keyboardCodes.start.includes(code)) {\n          const activator = active.activatorNode.current;\n\n          if (activator && event.target !== activator) {\n            return false;\n          }\n\n          event.preventDefault();\n\n          onActivation?.({event: event.nativeEvent});\n\n          return true;\n        }\n\n        return false;\n      },\n    },\n  ];\n}\n","import {\n  subtract as getCoordinatesDelta,\n  getEventCoordinates,\n  getOwnerDocument,\n  getWindow,\n} from '@dnd-kit/utilities';\n\nimport {defaultCoordinates} from '../../utilities';\nimport {\n  getEventListenerTarget,\n  hasExceededDistance,\n  Listeners,\n} from '../utilities';\nimport {EventName, preventDefault, stopPropagation} from '../events';\nimport {KeyboardCode} from '../keyboard';\nimport type {SensorInstance, SensorProps, SensorOptions} from '../types';\nimport type {Coordinates, DistanceMeasurement} from '../../types';\n\ninterface DistanceConstraint {\n  distance: DistanceMeasurement;\n  tolerance?: DistanceMeasurement;\n}\n\ninterface DelayConstraint {\n  delay: number;\n  tolerance: DistanceMeasurement;\n}\n\ninterface EventDescriptor {\n  name: keyof DocumentEventMap;\n  passive?: boolean;\n}\n\nexport interface PointerEventHandlers {\n  move: EventDescriptor;\n  end: EventDescriptor;\n}\n\nexport type PointerActivationConstraint = DistanceConstraint | DelayConstraint;\n\nfunction isDistanceConstraint(\n  constraint: PointerActivationConstraint\n): constraint is DistanceConstraint {\n  return Boolean(constraint && 'distance' in constraint);\n}\n\nfunction isDelayConstraint(\n  constraint: PointerActivationConstraint\n): constraint is DelayConstraint {\n  return Boolean(constraint && 'delay' in constraint);\n}\n\nexport interface AbstractPointerSensorOptions extends SensorOptions {\n  activationConstraint?: PointerActivationConstraint;\n  onActivation?({event}: {event: Event}): void;\n}\n\nexport type AbstractPointerSensorProps = SensorProps<AbstractPointerSensorOptions>;\n\nexport class AbstractPointerSensor implements SensorInstance {\n  public autoScrollEnabled = true;\n  private document: Document;\n  private activated: boolean = false;\n  private initialCoordinates: Coordinates;\n  private timeoutId: NodeJS.Timeout | null = null;\n  private listeners: Listeners;\n  private documentListeners: Listeners;\n  private windowListeners: Listeners;\n\n  constructor(\n    private props: AbstractPointerSensorProps,\n    private events: PointerEventHandlers,\n    listenerTarget = getEventListenerTarget(props.event.target)\n  ) {\n    const {event} = props;\n    const {target} = event;\n\n    this.props = props;\n    this.events = events;\n    this.document = getOwnerDocument(target);\n    this.documentListeners = new Listeners(this.document);\n    this.listeners = new Listeners(listenerTarget);\n    this.windowListeners = new Listeners(getWindow(target));\n    this.initialCoordinates = getEventCoordinates(event) ?? defaultCoordinates;\n    this.handleStart = this.handleStart.bind(this);\n    this.handleMove = this.handleMove.bind(this);\n    this.handleEnd = this.handleEnd.bind(this);\n    this.handleCancel = this.handleCancel.bind(this);\n    this.handleKeydown = this.handleKeydown.bind(this);\n    this.removeTextSelection = this.removeTextSelection.bind(this);\n\n    this.attach();\n  }\n\n  private attach() {\n    const {\n      events,\n      props: {\n        options: {activationConstraint},\n      },\n    } = this;\n\n    this.listeners.add(events.move.name, this.handleMove, {passive: false});\n    this.listeners.add(events.end.name, this.handleEnd);\n    this.windowListeners.add(EventName.Resize, this.handleCancel);\n    this.windowListeners.add(EventName.DragStart, preventDefault);\n    this.windowListeners.add(EventName.VisibilityChange, this.handleCancel);\n    this.windowListeners.add(EventName.ContextMenu, preventDefault);\n    this.documentListeners.add(EventName.Keydown, this.handleKeydown);\n\n    if (activationConstraint) {\n      if (isDistanceConstraint(activationConstraint)) {\n        return;\n      }\n\n      if (isDelayConstraint(activationConstraint)) {\n        this.timeoutId = setTimeout(\n          this.handleStart,\n          activationConstraint.delay\n        );\n        return;\n      }\n    }\n\n    this.handleStart();\n  }\n\n  private detach() {\n    this.listeners.removeAll();\n    this.windowListeners.removeAll();\n\n    // Wait until the next event loop before removing document listeners\n    // This is necessary because we listen for `click` and `selection` events on the document\n    setTimeout(this.documentListeners.removeAll, 50);\n\n    if (this.timeoutId !== null) {\n      clearTimeout(this.timeoutId);\n      this.timeoutId = null;\n    }\n  }\n\n  private handleStart() {\n    const {initialCoordinates} = this;\n    const {onStart} = this.props;\n\n    if (initialCoordinates) {\n      this.activated = true;\n\n      // Stop propagation of click events once activation constraints are met\n      this.documentListeners.add(EventName.Click, stopPropagation, {\n        capture: true,\n      });\n\n      // Remove any text selection from the document\n      this.removeTextSelection();\n\n      // Prevent further text selection while dragging\n      this.documentListeners.add(\n        EventName.SelectionChange,\n        this.removeTextSelection\n      );\n\n      onStart(initialCoordinates);\n    }\n  }\n\n  private handleMove(event: Event) {\n    const {activated, initialCoordinates, props} = this;\n    const {\n      onMove,\n      options: {activationConstraint},\n    } = props;\n\n    if (!initialCoordinates) {\n      return;\n    }\n\n    const coordinates = getEventCoordinates(event) ?? defaultCoordinates;\n    const delta = getCoordinatesDelta(initialCoordinates, coordinates);\n\n    if (!activated && activationConstraint) {\n      // Constraint validation\n      if (isDelayConstraint(activationConstraint)) {\n        if (hasExceededDistance(delta, activationConstraint.tolerance)) {\n          return this.handleCancel();\n        }\n\n        return;\n      }\n\n      if (isDistanceConstraint(activationConstraint)) {\n        if (\n          activationConstraint.tolerance != null &&\n          hasExceededDistance(delta, activationConstraint.tolerance)\n        ) {\n          return this.handleCancel();\n        }\n        if (hasExceededDistance(delta, activationConstraint.distance)) {\n          return this.handleStart();\n        }\n\n        return;\n      }\n    }\n\n    if (event.cancelable) {\n      event.preventDefault();\n    }\n\n    onMove(coordinates);\n  }\n\n  private handleEnd() {\n    const {onEnd} = this.props;\n\n    this.detach();\n    onEnd();\n  }\n\n  private handleCancel() {\n    const {onCancel} = this.props;\n\n    this.detach();\n    onCancel();\n  }\n\n  private handleKeydown(event: KeyboardEvent) {\n    if (event.code === KeyboardCode.Esc) {\n      this.handleCancel();\n    }\n  }\n\n  private removeTextSelection() {\n    this.document.getSelection()?.removeAllRanges();\n  }\n}\n","import type {PointerEvent} from 'react';\nimport {getOwnerDocument} from '@dnd-kit/utilities';\n\nimport type {SensorProps} from '../types';\nimport {\n  AbstractPointerSensor,\n  AbstractPointerSensorOptions,\n  PointerEventHandlers,\n} from './AbstractPointerSensor';\n\nconst events: PointerEventHandlers = {\n  move: {name: 'pointermove'},\n  end: {name: 'pointerup'},\n};\n\nexport interface PointerSensorOptions extends AbstractPointerSensorOptions {}\n\nexport type PointerSensorProps = SensorProps<PointerSensorOptions>;\n\nexport class PointerSensor extends AbstractPointerSensor {\n  constructor(props: PointerSensorProps) {\n    const {event} = props;\n    // Pointer events stop firing if the target is unmounted while dragging\n    // Therefore we attach listeners to the owner document instead\n    const listenerTarget = getOwnerDocument(event.target);\n\n    super(props, events, listenerTarget);\n  }\n\n  static activators = [\n    {\n      eventName: 'onPointerDown' as const,\n      handler: (\n        {nativeEvent: event}: PointerEvent,\n        {onActivation}: PointerSensorOptions\n      ) => {\n        if (!event.isPrimary || event.button !== 0) {\n          return false;\n        }\n\n        onActivation?.({event});\n\n        return true;\n      },\n    },\n  ];\n}\n","import type {MouseEvent} from 'react';\nimport {getOwnerDocument} from '@dnd-kit/utilities';\n\nimport type {SensorProps} from '../types';\nimport {\n  AbstractPointerSensor,\n  PointerEventHandlers,\n  AbstractPointerSensorOptions,\n} from '../pointer';\n\nconst events: PointerEventHandlers = {\n  move: {name: 'mousemove'},\n  end: {name: 'mouseup'},\n};\n\nenum MouseButton {\n  RightClick = 2,\n}\n\nexport interface MouseSensorOptions extends AbstractPointerSensorOptions {}\n\nexport type MouseSensorProps = SensorProps<MouseSensorOptions>;\n\nexport class MouseSensor extends AbstractPointerSensor {\n  constructor(props: MouseSensorProps) {\n    super(props, events, getOwnerDocument(props.event.target));\n  }\n\n  static activators = [\n    {\n      eventName: 'onMouseDown' as const,\n      handler: (\n        {nativeEvent: event}: MouseEvent,\n        {onActivation}: MouseSensorOptions\n      ) => {\n        if (event.button === MouseButton.RightClick) {\n          return false;\n        }\n\n        onActivation?.({event});\n\n        return true;\n      },\n    },\n  ];\n}\n","import type {TouchEvent} from 'react';\n\nimport {\n  AbstractPointerSensor,\n  PointerSensorProps,\n  PointerEventHandlers,\n  PointerSensorOptions,\n} from '../pointer';\nimport type {SensorProps} from '../types';\n\nconst events: PointerEventHandlers = {\n  move: {name: 'touchmove'},\n  end: {name: 'touchend'},\n};\n\nexport interface TouchSensorOptions extends PointerSensorOptions {}\n\nexport type TouchSensorProps = SensorProps<TouchSensorOptions>;\n\nexport class TouchSensor extends AbstractPointerSensor {\n  constructor(props: PointerSensorProps) {\n    super(props, events);\n  }\n\n  static activators = [\n    {\n      eventName: 'onTouchStart' as const,\n      handler: (\n        {nativeEvent: event}: TouchEvent,\n        {onActivation}: TouchSensorOptions\n      ) => {\n        const {touches} = event;\n\n        if (touches.length > 1) {\n          return false;\n        }\n\n        onActivation?.({event});\n\n        return true;\n      },\n    },\n  ];\n\n  static setup() {\n    // Adding a non-capture and non-passive `touchmove` listener in order\n    // to force `event.preventDefault()` calls to work in dynamically added\n    // touchmove event handlers. This is required for iOS Safari.\n    window.addEventListener(events.move.name, noop, {\n      capture: false,\n      passive: false,\n    });\n\n    return function teardown() {\n      window.removeEventListener(events.move.name, noop);\n    };\n\n    // We create a new handler because the teardown function of another sensor\n    // could remove our event listener if we use a referentially equal listener.\n    function noop() {}\n  }\n}\n","import {useCallback, useEffect, useMemo, useRef} from 'react';\nimport {useInterval, useLazyMemo, usePrevious} from '@dnd-kit/utilities';\n\nimport {getScrollDirectionAndSpeed} from '../../utilities';\nimport {Direction} from '../../types';\nimport type {Coordinates, ClientRect} from '../../types';\n\nexport type ScrollAncestorSortingFn = (ancestors: Element[]) => Element[];\n\nexport enum AutoScrollActivator {\n  Pointer,\n  DraggableRect,\n}\n\nexport interface Options {\n  acceleration?: number;\n  activator?: AutoScrollActivator;\n  canScroll?: CanScroll;\n  enabled?: boolean;\n  interval?: number;\n  layoutShiftCompensation?:\n    | boolean\n    | {\n        x: boolean;\n        y: boolean;\n      };\n  order?: TraversalOrder;\n  threshold?: {\n    x: number;\n    y: number;\n  };\n}\n\ninterface Arguments extends Options {\n  draggingRect: ClientRect | null;\n  enabled: boolean;\n  pointerCoordinates: Coordinates | null;\n  scrollableAncestors: Element[];\n  scrollableAncestorRects: ClientRect[];\n  delta: Coordinates;\n}\n\nexport type CanScroll = (element: Element) => boolean;\n\nexport enum TraversalOrder {\n  TreeOrder,\n  ReversedTreeOrder,\n}\n\ninterface ScrollDirection {\n  x: 0 | Direction;\n  y: 0 | Direction;\n}\n\nexport function useAutoScroller({\n  acceleration,\n  activator = AutoScrollActivator.Pointer,\n  canScroll,\n  draggingRect,\n  enabled,\n  interval = 5,\n  order = TraversalOrder.TreeOrder,\n  pointerCoordinates,\n  scrollableAncestors,\n  scrollableAncestorRects,\n  delta,\n  threshold,\n}: Arguments) {\n  const scrollIntent = useScrollIntent({delta, disabled: !enabled});\n  const [setAutoScrollInterval, clearAutoScrollInterval] = useInterval();\n  const scrollSpeed = useRef<Coordinates>({x: 0, y: 0});\n  const scrollDirection = useRef<ScrollDirection>({x: 0, y: 0});\n  const rect = useMemo(() => {\n    switch (activator) {\n      case AutoScrollActivator.Pointer:\n        return pointerCoordinates\n          ? {\n              top: pointerCoordinates.y,\n              bottom: pointerCoordinates.y,\n              left: pointerCoordinates.x,\n              right: pointerCoordinates.x,\n            }\n          : null;\n      case AutoScrollActivator.DraggableRect:\n        return draggingRect;\n    }\n  }, [activator, draggingRect, pointerCoordinates]);\n  const scrollContainerRef = useRef<Element | null>(null);\n  const autoScroll = useCallback(() => {\n    const scrollContainer = scrollContainerRef.current;\n\n    if (!scrollContainer) {\n      return;\n    }\n\n    const scrollLeft = scrollSpeed.current.x * scrollDirection.current.x;\n    const scrollTop = scrollSpeed.current.y * scrollDirection.current.y;\n\n    scrollContainer.scrollBy(scrollLeft, scrollTop);\n  }, []);\n  const sortedScrollableAncestors = useMemo(\n    () =>\n      order === TraversalOrder.TreeOrder\n        ? [...scrollableAncestors].reverse()\n        : scrollableAncestors,\n    [order, scrollableAncestors]\n  );\n\n  useEffect(\n    () => {\n      if (!enabled || !scrollableAncestors.length || !rect) {\n        clearAutoScrollInterval();\n        return;\n      }\n\n      for (const scrollContainer of sortedScrollableAncestors) {\n        if (canScroll?.(scrollContainer) === false) {\n          continue;\n        }\n\n        const index = scrollableAncestors.indexOf(scrollContainer);\n        const scrollContainerRect = scrollableAncestorRects[index];\n\n        if (!scrollContainerRect) {\n          continue;\n        }\n\n        const {direction, speed} = getScrollDirectionAndSpeed(\n          scrollContainer,\n          scrollContainerRect,\n          rect,\n          acceleration,\n          threshold\n        );\n\n        for (const axis of ['x', 'y'] as const) {\n          if (!scrollIntent[axis][direction[axis] as Direction]) {\n            speed[axis] = 0;\n            direction[axis] = 0;\n          }\n        }\n\n        if (speed.x > 0 || speed.y > 0) {\n          clearAutoScrollInterval();\n\n          scrollContainerRef.current = scrollContainer;\n          setAutoScrollInterval(autoScroll, interval);\n\n          scrollSpeed.current = speed;\n          scrollDirection.current = direction;\n\n          return;\n        }\n      }\n\n      scrollSpeed.current = {x: 0, y: 0};\n      scrollDirection.current = {x: 0, y: 0};\n      clearAutoScrollInterval();\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n      acceleration,\n      autoScroll,\n      canScroll,\n      clearAutoScrollInterval,\n      enabled,\n      interval,\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      JSON.stringify(rect),\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      JSON.stringify(scrollIntent),\n      setAutoScrollInterval,\n      scrollableAncestors,\n      sortedScrollableAncestors,\n      scrollableAncestorRects,\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      JSON.stringify(threshold),\n    ]\n  );\n}\n\ninterface ScrollIntent {\n  x: Record<Direction, boolean>;\n  y: Record<Direction, boolean>;\n}\n\nconst defaultScrollIntent: ScrollIntent = {\n  x: {[Direction.Backward]: false, [Direction.Forward]: false},\n  y: {[Direction.Backward]: false, [Direction.Forward]: false},\n};\n\nfunction useScrollIntent({\n  delta,\n  disabled,\n}: {\n  delta: Coordinates;\n  disabled: boolean;\n}): ScrollIntent {\n  const previousDelta = usePrevious(delta);\n\n  return useLazyMemo<ScrollIntent>(\n    (previousIntent) => {\n      if (disabled || !previousDelta || !previousIntent) {\n        // Reset scroll intent tracking when auto-scrolling is disabled\n        return defaultScrollIntent;\n      }\n\n      const direction = {\n        x: Math.sign(delta.x - previousDelta.x),\n        y: Math.sign(delta.y - previousDelta.y),\n      };\n\n      // Keep track of the user intent to scroll in each direction for both axis\n      return {\n        x: {\n          [Direction.Backward]:\n            previousIntent.x[Direction.Backward] || direction.x === -1,\n          [Direction.Forward]:\n            previousIntent.x[Direction.Forward] || direction.x === 1,\n        },\n        y: {\n          [Direction.Backward]:\n            previousIntent.y[Direction.Backward] || direction.y === -1,\n          [Direction.Forward]:\n            previousIntent.y[Direction.Forward] || direction.y === 1,\n        },\n      };\n    },\n    [disabled, delta, previousDelta]\n  );\n}\n","import {useLazyMemo} from '@dnd-kit/utilities';\n\nimport type {DraggableNode, DraggableNodes} from '../../store';\nimport type {UniqueIdentifier} from '../../types';\n\nexport function useCachedNode(\n  draggableNodes: DraggableNodes,\n  id: UniqueIdentifier | null\n): DraggableNode['node']['current'] {\n  const draggableNode = id !== null ? draggableNodes.get(id) : undefined;\n  const node = draggableNode ? draggableNode.node.current : null;\n\n  return useLazyMemo(\n    (cachedNode) => {\n      if (id === null) {\n        return null;\n      }\n\n      // In some cases, the draggable node can unmount while dragging\n      // This is the case for virtualized lists. In those situations,\n      // we fall back to the last known value for that node.\n      return node ?? cachedNode ?? null;\n    },\n    [node, id]\n  );\n}\n","import {useMemo} from 'react';\n\nimport type {SensorActivatorFunction, SensorDescriptor} from '../../sensors';\nimport type {\n  SyntheticListener,\n  SyntheticListeners,\n} from './useSyntheticListeners';\n\nexport function useCombineActivators(\n  sensors: SensorDescriptor<any>[],\n  getSyntheticHandler: (\n    handler: SensorActivatorFunction<any>,\n    sensor: SensorDescriptor<any>\n  ) => SyntheticListener['handler']\n): SyntheticListeners {\n  return useMemo(\n    () =>\n      sensors.reduce<SyntheticListeners>((accumulator, sensor) => {\n        const {sensor: Sensor} = sensor;\n\n        const sensorActivators = Sensor.activators.map((activator) => ({\n          eventName: activator.eventName,\n          handler: getSyntheticHandler(activator.handler, sensor),\n        }));\n\n        return [...accumulator, ...sensorActivators];\n      }, []),\n    [sensors, getSyntheticHandler]\n  );\n}\n","import {useCallback, useEffect, useRef, useState} from 'react';\nimport {useLatestValue, useLazyMemo} from '@dnd-kit/utilities';\n\nimport {Rect} from '../../utilities/rect';\nimport type {DroppableContainer, RectMap} from '../../store/types';\nimport type {ClientRect, UniqueIdentifier} from '../../types';\n\ninterface Arguments {\n  dragging: boolean;\n  dependencies: any[];\n  config: DroppableMeasuring;\n}\n\nexport enum MeasuringStrategy {\n  Always,\n  BeforeDragging,\n  WhileDragging,\n}\n\nexport enum MeasuringFrequency {\n  Optimized = 'optimized',\n}\n\ntype MeasuringFunction = (element: HTMLElement) => ClientRect;\n\nexport interface DroppableMeasuring {\n  measure: MeasuringFunction;\n  strategy: MeasuringStrategy;\n  frequency: MeasuringFrequency | number;\n}\n\nconst defaultValue: RectMap = new Map();\n\nexport function useDroppableMeasuring(\n  containers: DroppableContainer[],\n  {dragging, dependencies, config}: Arguments\n) {\n  const [\n    containerIdsScheduledForMeasurement,\n    setContainerIdsScheduledForMeasurement,\n  ] = useState<UniqueIdentifier[] | null>(null);\n  const measuringScheduled = containerIdsScheduledForMeasurement != null;\n  const {frequency, measure, strategy} = config;\n  const containersRef = useRef(containers);\n  const disabled = isDisabled();\n  const disabledRef = useLatestValue(disabled);\n  const measureDroppableContainers = useCallback(\n    (ids: UniqueIdentifier[] = []) => {\n      if (disabledRef.current) {\n        return;\n      }\n\n      setContainerIdsScheduledForMeasurement((value) =>\n        value ? value.concat(ids) : ids\n      );\n    },\n    [disabledRef]\n  );\n  const timeoutId = useRef<NodeJS.Timeout | null>(null);\n  const droppableRects = useLazyMemo<RectMap>(\n    (previousValue) => {\n      if (disabled && !dragging) {\n        return defaultValue;\n      }\n\n      const ids = containerIdsScheduledForMeasurement;\n\n      if (\n        !previousValue ||\n        previousValue === defaultValue ||\n        containersRef.current !== containers ||\n        ids != null\n      ) {\n        const map: RectMap = new Map();\n\n        for (let container of containers) {\n          if (!container) {\n            continue;\n          }\n\n          if (\n            ids &&\n            ids.length > 0 &&\n            !ids.includes(container.id) &&\n            container.rect.current\n          ) {\n            // This container does not need to be re-measured\n            map.set(container.id, container.rect.current);\n            continue;\n          }\n\n          const node = container.node.current;\n          const rect = node ? new Rect(measure(node), node) : null;\n\n          container.rect.current = rect;\n\n          if (rect) {\n            map.set(container.id, rect);\n          }\n        }\n\n        return map;\n      }\n\n      return previousValue;\n    },\n    [\n      containers,\n      containerIdsScheduledForMeasurement,\n      dragging,\n      disabled,\n      measure,\n    ]\n  );\n\n  useEffect(() => {\n    containersRef.current = containers;\n  }, [containers]);\n\n  useEffect(\n    () => {\n      if (disabled) {\n        return;\n      }\n\n      requestAnimationFrame(() => measureDroppableContainers());\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [dragging, disabled]\n  );\n\n  useEffect(() => {\n    if (measuringScheduled) {\n      setContainerIdsScheduledForMeasurement(null);\n    }\n  }, [measuringScheduled]);\n\n  useEffect(\n    () => {\n      if (\n        disabled ||\n        typeof frequency !== 'number' ||\n        timeoutId.current !== null\n      ) {\n        return;\n      }\n\n      timeoutId.current = setTimeout(() => {\n        measureDroppableContainers();\n        timeoutId.current = null;\n      }, frequency);\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [frequency, disabled, measureDroppableContainers, ...dependencies]\n  );\n\n  return {\n    droppableRects,\n    measureDroppableContainers,\n    measuringScheduled,\n  };\n\n  function isDisabled() {\n    switch (strategy) {\n      case MeasuringStrategy.Always:\n        return false;\n      case MeasuringStrategy.BeforeDragging:\n        return dragging;\n      default:\n        return !dragging;\n    }\n  }\n}\n","import {useLazyMemo} from '@dnd-kit/utilities';\n\ntype AnyFunction = (...args: any) => any;\n\nexport function useInitialValue<\n  T,\n  U extends AnyFunction | undefined = undefined\n>(\n  value: T | null,\n  computeFn?: U\n): U extends AnyFunction ? ReturnType<U> | null : T | null {\n  return useLazyMemo(\n    (previousValue) => {\n      if (!value) {\n        return null;\n      }\n\n      if (previousValue) {\n        return previousValue;\n      }\n\n      return typeof computeFn === 'function' ? computeFn(value) : value;\n    },\n    [computeFn, value]\n  );\n}\n","import type {ClientRect} from '../../types';\nimport {useInitialValue} from './useInitialValue';\n\nexport function useInitialRect(\n  node: HTMLElement | null,\n  measure: (node: HTMLElement) => ClientRect\n) {\n  return useInitialValue(node, measure);\n}\n","import {useEffect, useMemo} from 'react';\nimport {useEvent} from '@dnd-kit/utilities';\n\ninterface Arguments {\n  callback: MutationCallback;\n  disabled?: boolean;\n}\n\n/**\n * Returns a new MutationObserver instance.\n * If `MutationObserver` is undefined in the execution environment, returns `undefined`.\n */\nexport function useMutationObserver({callback, disabled}: Arguments) {\n  const handleMutations = useEvent(callback);\n  const mutationObserver = useMemo(() => {\n    if (\n      disabled ||\n      typeof window === 'undefined' ||\n      typeof window.MutationObserver === 'undefined'\n    ) {\n      return undefined;\n    }\n\n    const {MutationObserver} = window;\n\n    return new MutationObserver(handleMutations);\n  }, [handleMutations, disabled]);\n\n  useEffect(() => {\n    return () => mutationObserver?.disconnect();\n  }, [mutationObserver]);\n\n  return mutationObserver;\n}\n","import {useEffect, useMemo} from 'react';\nimport {useEvent} from '@dnd-kit/utilities';\n\ninterface Arguments {\n  callback: ResizeObserverCallback;\n  disabled?: boolean;\n}\n\n/**\n * Returns a new ResizeObserver instance bound to the `onResize` callback.\n * If `ResizeObserver` is undefined in the execution environment, returns `undefined`.\n */\nexport function useResizeObserver({callback, disabled}: Arguments) {\n  const handleResize = useEvent(callback);\n  const resizeObserver = useMemo(\n    () => {\n      if (\n        disabled ||\n        typeof window === 'undefined' ||\n        typeof window.ResizeObserver === 'undefined'\n      ) {\n        return undefined;\n      }\n\n      const {ResizeObserver} = window;\n\n      return new ResizeObserver(handleResize);\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [disabled]\n  );\n\n  useEffect(() => {\n    return () => resizeObserver?.disconnect();\n  }, [resizeObserver]);\n\n  return resizeObserver;\n}\n","import {useReducer} from 'react';\nimport {useIsomorphicLayoutEffect} from '@dnd-kit/utilities';\n\nimport type {ClientRect} from '../../types';\nimport {getClientRect, Rect} from '../../utilities';\n\nimport {useMutationObserver} from './useMutationObserver';\nimport {useResizeObserver} from './useResizeObserver';\n\nfunction defaultMeasure(element: HTMLElement) {\n  return new Rect(getClientRect(element), element);\n}\n\nexport function useRect(\n  element: HTMLElement | null,\n  measure: (element: HTMLElement) => ClientRect = defaultMeasure,\n  fallbackRect?: ClientRect | null\n) {\n  const [rect, measureRect] = useReducer(reducer, null);\n\n  const mutationObserver = useMutationObserver({\n    callback(records) {\n      if (!element) {\n        return;\n      }\n\n      for (const record of records) {\n        const {type, target} = record;\n\n        if (\n          type === 'childList' &&\n          target instanceof HTMLElement &&\n          target.contains(element)\n        ) {\n          measureRect();\n          break;\n        }\n      }\n    },\n  });\n  const resizeObserver = useResizeObserver({callback: measureRect});\n\n  useIsomorphicLayoutEffect(() => {\n    measureRect();\n\n    if (element) {\n      resizeObserver?.observe(element);\n      mutationObserver?.observe(document.body, {\n        childList: true,\n        subtree: true,\n      });\n    } else {\n      resizeObserver?.disconnect();\n      mutationObserver?.disconnect();\n    }\n  }, [element]);\n\n  return rect;\n\n  function reducer(currentRect: ClientRect | null) {\n    if (!element) {\n      return null;\n    }\n\n    if (element.isConnected === false) {\n      // Fall back to last rect we measured if the element is\n      // no longer connected to the DOM.\n      return currentRect ?? fallbackRect ?? null;\n    }\n\n    const newRect = measure(element);\n\n    if (JSON.stringify(currentRect) === JSON.stringify(newRect)) {\n      return currentRect;\n    }\n\n    return newRect;\n  }\n}\n","import type {ClientRect} from '../../types';\nimport {getRectDelta} from '../../utilities';\n\nimport {useInitialValue} from './useInitialValue';\n\nexport function useRectDelta(rect: ClientRect | null) {\n  const initialRect = useInitialValue(rect);\n\n  return getRectDelta(rect, initialRect);\n}\n","import {useEffect, useRef} from 'react';\nimport {useLazyMemo} from '@dnd-kit/utilities';\n\nimport {getScrollableAncestors} from '../../utilities';\n\nconst defaultValue: Element[] = [];\n\nexport function useScrollableAncestors(node: HTMLElement | null) {\n  const previousNode = useRef(node);\n\n  const ancestors = useLazyMemo<Element[]>(\n    (previousValue) => {\n      if (!node) {\n        return defaultValue;\n      }\n\n      if (\n        previousValue &&\n        previousValue !== defaultValue &&\n        node &&\n        previousNode.current &&\n        node.parentNode === previousNode.current.parentNode\n      ) {\n        return previousValue;\n      }\n\n      return getScrollableAncestors(node);\n    },\n    [node]\n  );\n\n  useEffect(() => {\n    previousNode.current = node;\n  }, [node]);\n\n  return ancestors;\n}\n","import {useState, useCallback, useMemo, useRef, useEffect} from 'react';\nimport {add} from '@dnd-kit/utilities';\n\nimport {\n  defaultCoordinates,\n  getScrollableElement,\n  getScrollCoordinates,\n  getScrollOffsets,\n} from '../../utilities';\nimport type {Coordinates} from '../../types';\n\ntype ScrollCoordinates = Map<HTMLElement | Window, Coordinates>;\n\nexport function useScrollOffsets(elements: Element[]): Coordinates {\n  const [\n    scrollCoordinates,\n    setScrollCoordinates,\n  ] = useState<ScrollCoordinates | null>(null);\n  const prevElements = useRef(elements);\n\n  // To-do: Throttle the handleScroll callback\n  const handleScroll = useCallback((event: Event) => {\n    const scrollingElement = getScrollableElement(event.target);\n\n    if (!scrollingElement) {\n      return;\n    }\n\n    setScrollCoordinates((scrollCoordinates) => {\n      if (!scrollCoordinates) {\n        return null;\n      }\n\n      scrollCoordinates.set(\n        scrollingElement,\n        getScrollCoordinates(scrollingElement)\n      );\n\n      return new Map(scrollCoordinates);\n    });\n  }, []);\n\n  useEffect(() => {\n    const previousElements = prevElements.current;\n\n    if (elements !== previousElements) {\n      cleanup(previousElements);\n\n      const entries = elements\n        .map((element) => {\n          const scrollableElement = getScrollableElement(element);\n\n          if (scrollableElement) {\n            scrollableElement.addEventListener('scroll', handleScroll, {\n              passive: true,\n            });\n\n            return [\n              scrollableElement,\n              getScrollCoordinates(scrollableElement),\n            ] as const;\n          }\n\n          return null;\n        })\n        .filter(\n          (\n            entry\n          ): entry is [\n            HTMLElement | (Window & typeof globalThis),\n            Coordinates\n          ] => entry != null\n        );\n\n      setScrollCoordinates(entries.length ? new Map(entries) : null);\n\n      prevElements.current = elements;\n    }\n\n    return () => {\n      cleanup(elements);\n      cleanup(previousElements);\n    };\n\n    function cleanup(elements: Element[]) {\n      elements.forEach((element) => {\n        const scrollableElement = getScrollableElement(element);\n\n        scrollableElement?.removeEventListener('scroll', handleScroll);\n      });\n    }\n  }, [handleScroll, elements]);\n\n  return useMemo(() => {\n    if (elements.length) {\n      return scrollCoordinates\n        ? Array.from(scrollCoordinates.values()).reduce(\n            (acc, coordinates) => add(acc, coordinates),\n            defaultCoordinates\n          )\n        : getScrollOffsets(elements);\n    }\n\n    return defaultCoordinates;\n  }, [elements, scrollCoordinates]);\n}\n","import {useEffect, useRef} from 'react';\nimport {Coordinates, subtract} from '@dnd-kit/utilities';\n\nimport {defaultCoordinates} from '../../utilities';\n\nexport function useScrollOffsetsDelta(\n  scrollOffsets: Coordinates,\n  dependencies: any[] = []\n) {\n  const initialScrollOffsets = useRef<Coordinates | null>(null);\n\n  useEffect(\n    () => {\n      initialScrollOffsets.current = null;\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    dependencies\n  );\n\n  useEffect(() => {\n    const hasScrollOffsets = scrollOffsets !== defaultCoordinates;\n\n    if (hasScrollOffsets && !initialScrollOffsets.current) {\n      initialScrollOffsets.current = scrollOffsets;\n    }\n\n    if (!hasScrollOffsets && initialScrollOffsets.current) {\n      initialScrollOffsets.current = null;\n    }\n  }, [scrollOffsets]);\n\n  return initialScrollOffsets.current\n    ? subtract(scrollOffsets, initialScrollOffsets.current)\n    : defaultCoordinates;\n}\n","import {useEffect} from 'react';\nimport {canUseDOM} from '@dnd-kit/utilities';\n\nimport type {SensorDescriptor} from '../../sensors';\n\nexport function useSensorSetup(sensors: SensorDescriptor<any>[]) {\n  useEffect(\n    () => {\n      if (!canUseDOM) {\n        return;\n      }\n\n      const teardownFns = sensors.map(({sensor}) => sensor.setup?.());\n\n      return () => {\n        for (const teardown of teardownFns) {\n          teardown?.();\n        }\n      };\n    },\n    // TO-DO: Sensors length could theoretically change which would not be a valid dependency\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    sensors.map(({sensor}) => sensor)\n  );\n}\n","import {useMemo} from 'react';\n\nimport type {SyntheticEventName, UniqueIdentifier} from '../../types';\n\nexport type SyntheticListener = {\n  eventName: SyntheticEventName;\n  handler: (event: React.SyntheticEvent, id: UniqueIdentifier) => void;\n};\n\nexport type SyntheticListeners = SyntheticListener[];\n\nexport type SyntheticListenerMap = Record<string, Function>;\n\nexport function useSyntheticListeners(\n  listeners: SyntheticListeners,\n  id: UniqueIdentifier\n): SyntheticListenerMap {\n  return useMemo(() => {\n    return listeners.reduce<SyntheticListenerMap>(\n      (acc, {eventName, handler}) => {\n        acc[eventName] = (event: React.SyntheticEvent) => {\n          handler(event, id);\n        };\n\n        return acc;\n      },\n      {} as SyntheticListenerMap\n    );\n  }, [listeners, id]);\n}\n","import {useMemo} from 'react';\n\nimport {getWindowClientRect} from '../../utilities/rect';\n\nexport function useWindowRect(element: typeof window | null) {\n  return useMemo(() => (element ? getWindowClientRect(element) : null), [\n    element,\n  ]);\n}\n","import {useReducer} from 'react';\nimport {getWindow, useIsomorphicLayoutEffect} from '@dnd-kit/utilities';\n\nimport type {ClientRect} from '../../types';\nimport {Rect, getClientRect} from '../../utilities/rect';\nimport {isDocumentScrollingElement} from '../../utilities';\n\nimport {useResizeObserver} from './useResizeObserver';\nimport {useWindowRect} from './useWindowRect';\n\nconst defaultValue: Rect[] = [];\n\nexport function useRects(\n  elements: Element[],\n  measure: (element: Element) => ClientRect = getClientRect\n): ClientRect[] {\n  const [firstElement] = elements;\n  const windowRect = useWindowRect(\n    firstElement ? getWindow(firstElement) : null\n  );\n  const [rects, measureRects] = useReducer(reducer, defaultValue);\n  const resizeObserver = useResizeObserver({callback: measureRects});\n\n  if (elements.length > 0 && rects === defaultValue) {\n    measureRects();\n  }\n\n  useIsomorphicLayoutEffect(() => {\n    if (elements.length) {\n      elements.forEach((element) => resizeObserver?.observe(element));\n    } else {\n      resizeObserver?.disconnect();\n      measureRects();\n    }\n  }, [elements]);\n\n  return rects;\n\n  function reducer() {\n    if (!elements.length) {\n      return defaultValue;\n    }\n\n    return elements.map((element) =>\n      isDocumentScrollingElement(element)\n        ? (windowRect as ClientRect)\n        : new Rect(measure(element), element)\n    );\n  }\n}\n","import {isHTMLElement} from '@dnd-kit/utilities';\n\nexport function getMeasurableNode(\n  node: HTMLElement | undefined | null\n): HTMLElement | null {\n  if (!node) {\n    return null;\n  }\n\n  if (node.children.length > 1) {\n    return node;\n  }\n  const firstChild = node.children[0];\n\n  return isHTMLElement(firstChild) ? firstChild : node;\n}\n","import {useMemo, useCallback, useState} from 'react';\nimport {isHTMLElement, useNodeRef} from '@dnd-kit/utilities';\n\nimport {useResizeObserver} from './useResizeObserver';\nimport {getMeasurableNode} from '../../utilities/nodes';\nimport type {PublicContextDescriptor} from '../../store';\nimport type {ClientRect} from '../../types';\n\ninterface Arguments {\n  measure(element: HTMLElement): ClientRect;\n}\n\nexport function useDragOverlayMeasuring({\n  measure,\n}: Arguments): PublicContextDescriptor['dragOverlay'] {\n  const [rect, setRect] = useState<ClientRect | null>(null);\n  const handleResize = useCallback(\n    (entries: ResizeObserverEntry[]) => {\n      for (const {target} of entries) {\n        if (isHTMLElement(target)) {\n          setRect((rect) => {\n            const newRect = measure(target);\n\n            return rect\n              ? {...rect, width: newRect.width, height: newRect.height}\n              : newRect;\n          });\n          break;\n        }\n      }\n    },\n    [measure]\n  );\n  const resizeObserver = useResizeObserver({callback: handleResize});\n  const handleNodeChange = useCallback(\n    (element) => {\n      const node = getMeasurableNode(element);\n\n      resizeObserver?.disconnect();\n\n      if (node) {\n        resizeObserver?.observe(node);\n      }\n\n      setRect(node ? measure(node) : null);\n    },\n    [measure, resizeObserver]\n  );\n  const [nodeRef, setRef] = useNodeRef(handleNodeChange);\n\n  return useMemo(\n    () => ({\n      nodeRef,\n      rect,\n      setRef,\n    }),\n    [rect, nodeRef, setRef]\n  );\n}\n","import type {DeepRequired} from '@dnd-kit/utilities';\n\nimport type {DataRef} from '../../store/types';\nimport {KeyboardSensor, PointerSensor} from '../../sensors';\nimport {MeasuringStrategy, MeasuringFrequency} from '../../hooks/utilities';\nimport {\n  getClientRect,\n  getTransformAgnosticClientRect,\n} from '../../utilities/rect';\n\nimport type {MeasuringConfiguration} from './types';\n\nexport const defaultSensors = [\n  {sensor: PointerSensor, options: {}},\n  {sensor: KeyboardSensor, options: {}},\n];\n\nexport const defaultData: DataRef = {current: {}};\n\nexport const defaultMeasuringConfiguration: DeepRequired<MeasuringConfiguration> = {\n  draggable: {\n    measure: getTransformAgnosticClientRect,\n  },\n  droppable: {\n    measure: getTransformAgnosticClientRect,\n    strategy: MeasuringStrategy.WhileDragging,\n    frequency: MeasuringFrequency.Optimized,\n  },\n  dragOverlay: {\n    measure: getClientRect,\n  },\n};\n","import type {UniqueIdentifier} from '../types';\nimport type {DroppableContainer} from './types';\n\ntype Identifier = UniqueIdentifier | null | undefined;\n\nexport class DroppableContainersMap extends Map<\n  UniqueIdentifier,\n  DroppableContainer\n> {\n  get(id: Identifier) {\n    return id != null ? super.get(id) ?? undefined : undefined;\n  }\n\n  toArray(): DroppableContainer[] {\n    return Array.from(this.values());\n  }\n\n  getEnabled(): DroppableContainer[] {\n    return this.toArray().filter(({disabled}) => !disabled);\n  }\n\n  getNodeFor(id: Identifier) {\n    return this.get(id)?.node.current ?? undefined;\n  }\n}\n","import {createContext} from 'react';\n\nimport {noop} from '../utilities/other';\nimport {defaultMeasuringConfiguration} from '../components/DndContext/defaults';\nimport {DroppableContainersMap} from './constructors';\nimport type {InternalContextDescriptor, PublicContextDescriptor} from './types';\n\nexport const defaultPublicContext: PublicContextDescriptor = {\n  activatorEvent: null,\n  active: null,\n  activeNode: null,\n  activeNodeRect: null,\n  collisions: null,\n  containerNodeRect: null,\n  draggableNodes: new Map(),\n  droppableRects: new Map(),\n  droppableContainers: new DroppableContainersMap(),\n  over: null,\n  dragOverlay: {\n    nodeRef: {\n      current: null,\n    },\n    rect: null,\n    setRef: noop,\n  },\n  scrollableAncestors: [],\n  scrollableAncestorRects: [],\n  measuringConfiguration: defaultMeasuringConfiguration,\n  measureDroppableContainers: noop,\n  windowRect: null,\n  measuringScheduled: false,\n};\n\nexport const defaultInternalContext: InternalContextDescriptor = {\n  activatorEvent: null,\n  activators: [],\n  active: null,\n  activeNodeRect: null,\n  ariaDescribedById: {\n    draggable: '',\n  },\n  dispatch: noop,\n  draggableNodes: new Map(),\n  over: null,\n  measureDroppableContainers: noop,\n};\n\nexport const InternalContext = createContext<InternalContextDescriptor>(\n  defaultInternalContext\n);\n\nexport const PublicContext = createContext<PublicContextDescriptor>(\n  defaultPublicContext\n);\n","import {Action, Actions} from './actions';\nimport {DroppableContainersMap} from './constructors';\nimport type {State} from './types';\n\nexport function getInitialState(): State {\n  return {\n    draggable: {\n      active: null,\n      initialCoordinates: {x: 0, y: 0},\n      nodes: new Map(),\n      translate: {x: 0, y: 0},\n    },\n    droppable: {\n      containers: new DroppableContainersMap(),\n    },\n  };\n}\n\nexport function reducer(state: State, action: Actions): State {\n  switch (action.type) {\n    case Action.DragStart:\n      return {\n        ...state,\n        draggable: {\n          ...state.draggable,\n          initialCoordinates: action.initialCoordinates,\n          active: action.active,\n        },\n      };\n    case Action.DragMove:\n      if (!state.draggable.active) {\n        return state;\n      }\n\n      return {\n        ...state,\n        draggable: {\n          ...state.draggable,\n          translate: {\n            x: action.coordinates.x - state.draggable.initialCoordinates.x,\n            y: action.coordinates.y - state.draggable.initialCoordinates.y,\n          },\n        },\n      };\n    case Action.DragEnd:\n    case Action.DragCancel:\n      return {\n        ...state,\n        draggable: {\n          ...state.draggable,\n          active: null,\n          initialCoordinates: {x: 0, y: 0},\n          translate: {x: 0, y: 0},\n        },\n      };\n\n    case Action.RegisterDroppable: {\n      const {element} = action;\n      const {id} = element;\n      const containers = new DroppableContainersMap(state.droppable.containers);\n      containers.set(id, element);\n\n      return {\n        ...state,\n        droppable: {\n          ...state.droppable,\n          containers,\n        },\n      };\n    }\n\n    case Action.SetDroppableDisabled: {\n      const {id, key, disabled} = action;\n      const element = state.droppable.containers.get(id);\n\n      if (!element || key !== element.key) {\n        return state;\n      }\n\n      const containers = new DroppableContainersMap(state.droppable.containers);\n      containers.set(id, {\n        ...element,\n        disabled,\n      });\n\n      return {\n        ...state,\n        droppable: {\n          ...state.droppable,\n          containers,\n        },\n      };\n    }\n\n    case Action.UnregisterDroppable: {\n      const {id, key} = action;\n      const element = state.droppable.containers.get(id);\n\n      if (!element || key !== element.key) {\n        return state;\n      }\n\n      const containers = new DroppableContainersMap(state.droppable.containers);\n      containers.delete(id);\n\n      return {\n        ...state,\n        droppable: {\n          ...state.droppable,\n          containers,\n        },\n      };\n    }\n\n    default: {\n      return state;\n    }\n  }\n}\n","import {useContext, useEffect} from 'react';\nimport {\n  findFirstFocusableNode,\n  isKeyboardEvent,\n  usePrevious,\n} from '@dnd-kit/utilities';\n\nimport {InternalContext} from '../../../store';\n\ninterface Props {\n  disabled: boolean;\n}\n\nexport function RestoreFocus({disabled}: Props) {\n  const {active, activatorEvent, draggableNodes} = useContext(InternalContext);\n  const previousActivatorEvent = usePrevious(activatorEvent);\n  const previousActiveId = usePrevious(active?.id);\n\n  // Restore keyboard focus on the activator node\n  useEffect(() => {\n    if (disabled) {\n      return;\n    }\n\n    if (!activatorEvent && previousActivatorEvent && previousActiveId != null) {\n      if (!isKeyboardEvent(previousActivatorEvent)) {\n        return;\n      }\n\n      if (document.activeElement === previousActivatorEvent.target) {\n        // No need to restore focus\n        return;\n      }\n\n      const draggableNode = draggableNodes.get(previousActiveId);\n\n      if (!draggableNode) {\n        return;\n      }\n\n      const {activatorNode, node} = draggableNode;\n\n      if (!activatorNode.current && !node.current) {\n        return;\n      }\n\n      requestAnimationFrame(() => {\n        for (const element of [activatorNode.current, node.current]) {\n          if (!element) {\n            continue;\n          }\n\n          const focusableNode = findFirstFocusableNode(element);\n\n          if (focusableNode) {\n            focusableNode.focus();\n            break;\n          }\n        }\n      });\n    }\n  }, [\n    activatorEvent,\n    disabled,\n    draggableNodes,\n    previousActiveId,\n    previousActivatorEvent,\n  ]);\n\n  return null;\n}\n","import type {FirstArgument, Transform} from '@dnd-kit/utilities';\n\nimport type {Modifiers, Modifier} from './types';\n\nexport function applyModifiers(\n  modifiers: Modifiers | undefined,\n  {transform, ...args}: FirstArgument<Modifier>\n): Transform {\n  return modifiers?.length\n    ? modifiers.reduce<Transform>((accumulator, modifier) => {\n        return modifier({\n          transform: accumulator,\n          ...args,\n        });\n      }, transform)\n    : transform;\n}\n","import {useMemo} from 'react';\nimport type {DeepRequired} from '@dnd-kit/utilities';\n\nimport {defaultMeasuringConfiguration} from '../defaults';\nimport type {MeasuringConfiguration} from '../types';\n\nexport function useMeasuringConfiguration(\n  config: MeasuringConfiguration | undefined\n): DeepRequired<MeasuringConfiguration> {\n  return useMemo(\n    () => ({\n      draggable: {\n        ...defaultMeasuringConfiguration.draggable,\n        ...config?.draggable,\n      },\n      droppable: {\n        ...defaultMeasuringConfiguration.droppable,\n        ...config?.droppable,\n      },\n      dragOverlay: {\n        ...defaultMeasuringConfiguration.dragOverlay,\n        ...config?.dragOverlay,\n      },\n    }),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [config?.draggable, config?.droppable, config?.dragOverlay]\n  );\n}\n","import {useRef} from 'react';\nimport {useIsomorphicLayoutEffect} from '@dnd-kit/utilities';\n\nimport {getRectDelta} from '../../../utilities/rect';\nimport {getFirstScrollableAncestor} from '../../../utilities/scroll';\nimport type {ClientRect} from '../../../types';\nimport type {DraggableNode} from '../../../store';\nimport type {MeasuringFunction} from '../types';\n\ninterface Options {\n  activeNode: DraggableNode | null | undefined;\n  config: boolean | {x: boolean; y: boolean} | undefined;\n  initialRect: ClientRect | null;\n  measure: MeasuringFunction;\n}\n\nexport function useLayoutShiftScrollCompensation({\n  activeNode,\n  measure,\n  initialRect,\n  config = true,\n}: Options) {\n  const initialized = useRef(false);\n  const {x, y} = typeof config === 'boolean' ? {x: config, y: config} : config;\n\n  useIsomorphicLayoutEffect(() => {\n    const disabled = !x && !y;\n\n    if (disabled || !activeNode) {\n      initialized.current = false;\n      return;\n    }\n\n    if (initialized.current || !initialRect) {\n      // Return early if layout shift scroll compensation was already attempted\n      // or if there is no initialRect to compare to.\n      return;\n    }\n\n    // Get the most up to date node ref for the active draggable\n    const node = activeNode?.node.current;\n\n    if (!node || node.isConnected === false) {\n      // Return early if there is no attached node ref or if the node is\n      // disconnected from the document.\n      return;\n    }\n\n    const rect = measure(node);\n    const rectDelta = getRectDelta(rect, initialRect);\n\n    if (!x) {\n      rectDelta.x = 0;\n    }\n\n    if (!y) {\n      rectDelta.y = 0;\n    }\n\n    // Only perform layout shift scroll compensation once\n    initialized.current = true;\n\n    if (Math.abs(rectDelta.x) > 0 || Math.abs(rectDelta.y) > 0) {\n      const firstScrollableAncestor = getFirstScrollableAncestor(node);\n\n      if (firstScrollableAncestor) {\n        firstScrollableAncestor.scrollBy({\n          top: rectDelta.y,\n          left: rectDelta.x,\n        });\n      }\n    }\n  }, [activeNode, x, y, initialRect, measure]);\n}\n","import React, {\n  memo,\n  createContext,\n  useCallback,\n  useEffect,\n  useMemo,\n  useReducer,\n  useRef,\n  useState,\n} from 'react';\nimport {unstable_batchedUpdates} from 'react-dom';\nimport {\n  add,\n  getEventCoordinates,\n  getWindow,\n  useLatestValue,\n  useIsomorphicLayoutEffect,\n  useUniqueId,\n} from '@dnd-kit/utilities';\nimport type {Transform} from '@dnd-kit/utilities';\n\nimport {\n  Action,\n  PublicContext,\n  InternalContext,\n  PublicContextDescriptor,\n  InternalContextDescriptor,\n  getInitialState,\n  reducer,\n} from '../../store';\nimport {DndMonitorContext, useDndMonitorProvider} from '../DndMonitor';\nimport {\n  useAutoScroller,\n  useCachedNode,\n  useCombineActivators,\n  useDragOverlayMeasuring,\n  useDroppableMeasuring,\n  useInitialRect,\n  useRect,\n  useRectDelta,\n  useRects,\n  useScrollableAncestors,\n  useScrollOffsets,\n  useScrollOffsetsDelta,\n  useSensorSetup,\n  useWindowRect,\n} from '../../hooks/utilities';\nimport type {AutoScrollOptions, SyntheticListener} from '../../hooks/utilities';\nimport type {\n  Sensor,\n  SensorContext,\n  SensorDescriptor,\n  SensorActivatorFunction,\n  SensorInstance,\n} from '../../sensors';\nimport {\n  adjustScale,\n  CollisionDetection,\n  defaultCoordinates,\n  getAdjustedRect,\n  getFirstCollision,\n  rectIntersection,\n} from '../../utilities';\nimport {applyModifiers, Modifiers} from '../../modifiers';\nimport type {Active, Over} from '../../store/types';\nimport type {\n  DragStartEvent,\n  DragCancelEvent,\n  DragEndEvent,\n  DragMoveEvent,\n  DragOverEvent,\n  UniqueIdentifier,\n} from '../../types';\nimport {\n  Accessibility,\n  Announcements,\n  RestoreFocus,\n  ScreenReaderInstructions,\n} from '../Accessibility';\n\nimport {defaultData, defaultSensors} from './defaults';\nimport {\n  useLayoutShiftScrollCompensation,\n  useMeasuringConfiguration,\n} from './hooks';\nimport type {MeasuringConfiguration} from './types';\n\nexport interface Props {\n  id?: string;\n  accessibility?: {\n    announcements?: Announcements;\n    container?: Element;\n    restoreFocus?: boolean;\n    screenReaderInstructions?: ScreenReaderInstructions;\n  };\n  autoScroll?: boolean | AutoScrollOptions;\n  cancelDrop?: CancelDrop;\n  children?: React.ReactNode;\n  collisionDetection?: CollisionDetection;\n  measuring?: MeasuringConfiguration;\n  modifiers?: Modifiers;\n  sensors?: SensorDescriptor<any>[];\n  onDragStart?(event: DragStartEvent): void;\n  onDragMove?(event: DragMoveEvent): void;\n  onDragOver?(event: DragOverEvent): void;\n  onDragEnd?(event: DragEndEvent): void;\n  onDragCancel?(event: DragCancelEvent): void;\n}\n\nexport interface CancelDropArguments extends DragEndEvent {}\n\nexport type CancelDrop = (\n  args: CancelDropArguments\n) => boolean | Promise<boolean>;\n\ninterface DndEvent extends Event {\n  dndKit?: {\n    capturedBy: Sensor<any>;\n  };\n}\n\nexport const ActiveDraggableContext = createContext<Transform>({\n  ...defaultCoordinates,\n  scaleX: 1,\n  scaleY: 1,\n});\n\nenum Status {\n  Uninitialized,\n  Initializing,\n  Initialized,\n}\n\nexport const DndContext = memo(function DndContext({\n  id,\n  accessibility,\n  autoScroll = true,\n  children,\n  sensors = defaultSensors,\n  collisionDetection = rectIntersection,\n  measuring,\n  modifiers,\n  ...props\n}: Props) {\n  const store = useReducer(reducer, undefined, getInitialState);\n  const [state, dispatch] = store;\n  const [dispatchMonitorEvent, registerMonitorListener] =\n    useDndMonitorProvider();\n  const [status, setStatus] = useState<Status>(Status.Uninitialized);\n  const isInitialized = status === Status.Initialized;\n  const {\n    draggable: {active: activeId, nodes: draggableNodes, translate},\n    droppable: {containers: droppableContainers},\n  } = state;\n  const node = activeId ? draggableNodes.get(activeId) : null;\n  const activeRects = useRef<Active['rect']['current']>({\n    initial: null,\n    translated: null,\n  });\n  const active = useMemo<Active | null>(\n    () =>\n      activeId != null\n        ? {\n            id: activeId,\n            // It's possible for the active node to unmount while dragging\n            data: node?.data ?? defaultData,\n            rect: activeRects,\n          }\n        : null,\n    [activeId, node]\n  );\n  const activeRef = useRef<UniqueIdentifier | null>(null);\n  const [activeSensor, setActiveSensor] = useState<SensorInstance | null>(null);\n  const [activatorEvent, setActivatorEvent] = useState<Event | null>(null);\n  const latestProps = useLatestValue(props, Object.values(props));\n  const draggableDescribedById = useUniqueId(`DndDescribedBy`, id);\n  const enabledDroppableContainers = useMemo(\n    () => droppableContainers.getEnabled(),\n    [droppableContainers]\n  );\n  const measuringConfiguration = useMeasuringConfiguration(measuring);\n  const {droppableRects, measureDroppableContainers, measuringScheduled} =\n    useDroppableMeasuring(enabledDroppableContainers, {\n      dragging: isInitialized,\n      dependencies: [translate.x, translate.y],\n      config: measuringConfiguration.droppable,\n    });\n  const activeNode = useCachedNode(draggableNodes, activeId);\n  const activationCoordinates = useMemo(\n    () => (activatorEvent ? getEventCoordinates(activatorEvent) : null),\n    [activatorEvent]\n  );\n  const autoScrollOptions = getAutoScrollerOptions();\n  const initialActiveNodeRect = useInitialRect(\n    activeNode,\n    measuringConfiguration.draggable.measure\n  );\n\n  useLayoutShiftScrollCompensation({\n    activeNode: activeId ? draggableNodes.get(activeId) : null,\n    config: autoScrollOptions.layoutShiftCompensation,\n    initialRect: initialActiveNodeRect,\n    measure: measuringConfiguration.draggable.measure,\n  });\n\n  const activeNodeRect = useRect(\n    activeNode,\n    measuringConfiguration.draggable.measure,\n    initialActiveNodeRect\n  );\n  const containerNodeRect = useRect(\n    activeNode ? activeNode.parentElement : null\n  );\n  const sensorContext = useRef<SensorContext>({\n    activatorEvent: null,\n    active: null,\n    activeNode,\n    collisionRect: null,\n    collisions: null,\n    droppableRects,\n    draggableNodes,\n    draggingNode: null,\n    draggingNodeRect: null,\n    droppableContainers,\n    over: null,\n    scrollableAncestors: [],\n    scrollAdjustedTranslate: null,\n  });\n  const overNode = droppableContainers.getNodeFor(\n    sensorContext.current.over?.id\n  );\n  const dragOverlay = useDragOverlayMeasuring({\n    measure: measuringConfiguration.dragOverlay.measure,\n  });\n\n  // Use the rect of the drag overlay if it is mounted\n  const draggingNode = dragOverlay.nodeRef.current ?? activeNode;\n  const draggingNodeRect = isInitialized\n    ? dragOverlay.rect ?? activeNodeRect\n    : null;\n  const usesDragOverlay = Boolean(\n    dragOverlay.nodeRef.current && dragOverlay.rect\n  );\n  // The delta between the previous and new position of the draggable node\n  // is only relevant when there is no drag overlay\n  const nodeRectDelta = useRectDelta(usesDragOverlay ? null : activeNodeRect);\n\n  // Get the window rect of the dragging node\n  const windowRect = useWindowRect(\n    draggingNode ? getWindow(draggingNode) : null\n  );\n\n  // Get scrollable ancestors of the dragging node\n  const scrollableAncestors = useScrollableAncestors(\n    isInitialized ? overNode ?? activeNode : null\n  );\n  const scrollableAncestorRects = useRects(scrollableAncestors);\n\n  // Apply modifiers\n  const modifiedTranslate = applyModifiers(modifiers, {\n    transform: {\n      x: translate.x - nodeRectDelta.x,\n      y: translate.y - nodeRectDelta.y,\n      scaleX: 1,\n      scaleY: 1,\n    },\n    activatorEvent,\n    active,\n    activeNodeRect,\n    containerNodeRect,\n    draggingNodeRect,\n    over: sensorContext.current.over,\n    overlayNodeRect: dragOverlay.rect,\n    scrollableAncestors,\n    scrollableAncestorRects,\n    windowRect,\n  });\n\n  const pointerCoordinates = activationCoordinates\n    ? add(activationCoordinates, translate)\n    : null;\n\n  const scrollOffsets = useScrollOffsets(scrollableAncestors);\n  // Represents the scroll delta since dragging was initiated\n  const scrollAdjustment = useScrollOffsetsDelta(scrollOffsets);\n  // Represents the scroll delta since the last time the active node rect was measured\n  const activeNodeScrollDelta = useScrollOffsetsDelta(scrollOffsets, [\n    activeNodeRect,\n  ]);\n\n  const scrollAdjustedTranslate = add(modifiedTranslate, scrollAdjustment);\n\n  const collisionRect = draggingNodeRect\n    ? getAdjustedRect(draggingNodeRect, modifiedTranslate)\n    : null;\n\n  const collisions =\n    active && collisionRect\n      ? collisionDetection({\n          active,\n          collisionRect,\n          droppableRects,\n          droppableContainers: enabledDroppableContainers,\n          pointerCoordinates,\n        })\n      : null;\n  const overId = getFirstCollision(collisions, 'id');\n  const [over, setOver] = useState<Over | null>(null);\n\n  // When there is no drag overlay used, we need to account for the\n  // window scroll delta\n  const appliedTranslate = usesDragOverlay\n    ? modifiedTranslate\n    : add(modifiedTranslate, activeNodeScrollDelta);\n\n  const transform = adjustScale(\n    appliedTranslate,\n    over?.rect ?? null,\n    activeNodeRect\n  );\n\n  const instantiateSensor = useCallback(\n    (\n      event: React.SyntheticEvent,\n      {sensor: Sensor, options}: SensorDescriptor<any>\n    ) => {\n      if (activeRef.current == null) {\n        return;\n      }\n\n      const activeNode = draggableNodes.get(activeRef.current);\n\n      if (!activeNode) {\n        return;\n      }\n\n      const activatorEvent = event.nativeEvent;\n\n      const sensorInstance = new Sensor({\n        active: activeRef.current,\n        activeNode,\n        event: activatorEvent,\n        options,\n        // Sensors need to be instantiated with refs for arguments that change over time\n        // otherwise they are frozen in time with the stale arguments\n        context: sensorContext,\n        onStart(initialCoordinates) {\n          const id = activeRef.current;\n\n          if (id == null) {\n            return;\n          }\n\n          const draggableNode = draggableNodes.get(id);\n\n          if (!draggableNode) {\n            return;\n          }\n\n          const {onDragStart} = latestProps.current;\n          const event: DragStartEvent = {\n            active: {id, data: draggableNode.data, rect: activeRects},\n          };\n\n          unstable_batchedUpdates(() => {\n            onDragStart?.(event);\n            setStatus(Status.Initializing);\n            dispatch({\n              type: Action.DragStart,\n              initialCoordinates,\n              active: id,\n            });\n            dispatchMonitorEvent({type: 'onDragStart', event});\n          });\n        },\n        onMove(coordinates) {\n          dispatch({\n            type: Action.DragMove,\n            coordinates,\n          });\n        },\n        onEnd: createHandler(Action.DragEnd),\n        onCancel: createHandler(Action.DragCancel),\n      });\n\n      unstable_batchedUpdates(() => {\n        setActiveSensor(sensorInstance);\n        setActivatorEvent(event.nativeEvent);\n      });\n\n      function createHandler(type: Action.DragEnd | Action.DragCancel) {\n        return async function handler() {\n          const {active, collisions, over, scrollAdjustedTranslate} =\n            sensorContext.current;\n          let event: DragEndEvent | null = null;\n\n          if (active && scrollAdjustedTranslate) {\n            const {cancelDrop} = latestProps.current;\n\n            event = {\n              activatorEvent,\n              active: active,\n              collisions,\n              delta: scrollAdjustedTranslate,\n              over,\n            };\n\n            if (type === Action.DragEnd && typeof cancelDrop === 'function') {\n              const shouldCancel = await Promise.resolve(cancelDrop(event));\n\n              if (shouldCancel) {\n                type = Action.DragCancel;\n              }\n            }\n          }\n\n          activeRef.current = null;\n\n          unstable_batchedUpdates(() => {\n            dispatch({type});\n            setStatus(Status.Uninitialized);\n            setOver(null);\n            setActiveSensor(null);\n            setActivatorEvent(null);\n\n            const eventName =\n              type === Action.DragEnd ? 'onDragEnd' : 'onDragCancel';\n\n            if (event) {\n              const handler = latestProps.current[eventName];\n\n              handler?.(event);\n              dispatchMonitorEvent({type: eventName, event});\n            }\n          });\n        };\n      }\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [draggableNodes]\n  );\n\n  const bindActivatorToSensorInstantiator = useCallback(\n    (\n      handler: SensorActivatorFunction<any>,\n      sensor: SensorDescriptor<any>\n    ): SyntheticListener['handler'] => {\n      return (event, active) => {\n        const nativeEvent = event.nativeEvent as DndEvent;\n        const activeDraggableNode = draggableNodes.get(active);\n\n        if (\n          // Another sensor is already instantiating\n          activeRef.current !== null ||\n          // No active draggable\n          !activeDraggableNode ||\n          // Event has already been captured\n          nativeEvent.dndKit ||\n          nativeEvent.defaultPrevented\n        ) {\n          return;\n        }\n\n        const activationContext = {\n          active: activeDraggableNode,\n        };\n        const shouldActivate = handler(\n          event,\n          sensor.options,\n          activationContext\n        );\n\n        if (shouldActivate === true) {\n          nativeEvent.dndKit = {\n            capturedBy: sensor.sensor,\n          };\n\n          activeRef.current = active;\n          instantiateSensor(event, sensor);\n        }\n      };\n    },\n    [draggableNodes, instantiateSensor]\n  );\n\n  const activators = useCombineActivators(\n    sensors,\n    bindActivatorToSensorInstantiator\n  );\n\n  useSensorSetup(sensors);\n\n  useIsomorphicLayoutEffect(() => {\n    if (activeNodeRect && status === Status.Initializing) {\n      setStatus(Status.Initialized);\n    }\n  }, [activeNodeRect, status]);\n\n  useEffect(\n    () => {\n      const {onDragMove} = latestProps.current;\n      const {active, activatorEvent, collisions, over} = sensorContext.current;\n\n      if (!active || !activatorEvent) {\n        return;\n      }\n\n      const event: DragMoveEvent = {\n        active,\n        activatorEvent,\n        collisions,\n        delta: {\n          x: scrollAdjustedTranslate.x,\n          y: scrollAdjustedTranslate.y,\n        },\n        over,\n      };\n\n      unstable_batchedUpdates(() => {\n        onDragMove?.(event);\n        dispatchMonitorEvent({type: 'onDragMove', event});\n      });\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [scrollAdjustedTranslate.x, scrollAdjustedTranslate.y]\n  );\n\n  useEffect(\n    () => {\n      const {\n        active,\n        activatorEvent,\n        collisions,\n        droppableContainers,\n        scrollAdjustedTranslate,\n      } = sensorContext.current;\n\n      if (\n        !active ||\n        activeRef.current == null ||\n        !activatorEvent ||\n        !scrollAdjustedTranslate\n      ) {\n        return;\n      }\n\n      const {onDragOver} = latestProps.current;\n      const overContainer = droppableContainers.get(overId);\n      const over =\n        overContainer && overContainer.rect.current\n          ? {\n              id: overContainer.id,\n              rect: overContainer.rect.current,\n              data: overContainer.data,\n              disabled: overContainer.disabled,\n            }\n          : null;\n      const event: DragOverEvent = {\n        active,\n        activatorEvent,\n        collisions,\n        delta: {\n          x: scrollAdjustedTranslate.x,\n          y: scrollAdjustedTranslate.y,\n        },\n        over,\n      };\n\n      unstable_batchedUpdates(() => {\n        setOver(over);\n        onDragOver?.(event);\n        dispatchMonitorEvent({type: 'onDragOver', event});\n      });\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [overId]\n  );\n\n  useIsomorphicLayoutEffect(() => {\n    sensorContext.current = {\n      activatorEvent,\n      active,\n      activeNode,\n      collisionRect,\n      collisions,\n      droppableRects,\n      draggableNodes,\n      draggingNode,\n      draggingNodeRect,\n      droppableContainers,\n      over,\n      scrollableAncestors,\n      scrollAdjustedTranslate,\n    };\n\n    activeRects.current = {\n      initial: draggingNodeRect,\n      translated: collisionRect,\n    };\n  }, [\n    active,\n    activeNode,\n    collisions,\n    collisionRect,\n    draggableNodes,\n    draggingNode,\n    draggingNodeRect,\n    droppableRects,\n    droppableContainers,\n    over,\n    scrollableAncestors,\n    scrollAdjustedTranslate,\n  ]);\n\n  useAutoScroller({\n    ...autoScrollOptions,\n    delta: translate,\n    draggingRect: collisionRect,\n    pointerCoordinates,\n    scrollableAncestors,\n    scrollableAncestorRects,\n  });\n\n  const publicContext = useMemo(() => {\n    const context: PublicContextDescriptor = {\n      active,\n      activeNode,\n      activeNodeRect,\n      activatorEvent,\n      collisions,\n      containerNodeRect,\n      dragOverlay,\n      draggableNodes,\n      droppableContainers,\n      droppableRects,\n      over,\n      measureDroppableContainers,\n      scrollableAncestors,\n      scrollableAncestorRects,\n      measuringConfiguration,\n      measuringScheduled,\n      windowRect,\n    };\n\n    return context;\n  }, [\n    active,\n    activeNode,\n    activeNodeRect,\n    activatorEvent,\n    collisions,\n    containerNodeRect,\n    dragOverlay,\n    draggableNodes,\n    droppableContainers,\n    droppableRects,\n    over,\n    measureDroppableContainers,\n    scrollableAncestors,\n    scrollableAncestorRects,\n    measuringConfiguration,\n    measuringScheduled,\n    windowRect,\n  ]);\n\n  const internalContext = useMemo(() => {\n    const context: InternalContextDescriptor = {\n      activatorEvent,\n      activators,\n      active,\n      activeNodeRect,\n      ariaDescribedById: {\n        draggable: draggableDescribedById,\n      },\n      dispatch,\n      draggableNodes,\n      over,\n      measureDroppableContainers,\n    };\n\n    return context;\n  }, [\n    activatorEvent,\n    activators,\n    active,\n    activeNodeRect,\n    dispatch,\n    draggableDescribedById,\n    draggableNodes,\n    over,\n    measureDroppableContainers,\n  ]);\n\n  return (\n    <DndMonitorContext.Provider value={registerMonitorListener}>\n      <InternalContext.Provider value={internalContext}>\n        <PublicContext.Provider value={publicContext}>\n          <ActiveDraggableContext.Provider value={transform}>\n            {children}\n          </ActiveDraggableContext.Provider>\n        </PublicContext.Provider>\n        <RestoreFocus disabled={accessibility?.restoreFocus === false} />\n      </InternalContext.Provider>\n      <Accessibility\n        {...accessibility}\n        hiddenTextDescribedById={draggableDescribedById}\n      />\n    </DndMonitorContext.Provider>\n  );\n\n  function getAutoScrollerOptions() {\n    const activeSensorDisablesAutoscroll =\n      activeSensor?.autoScrollEnabled === false;\n    const autoScrollGloballyDisabled =\n      typeof autoScroll === 'object'\n        ? autoScroll.enabled === false\n        : autoScroll === false;\n    const enabled =\n      isInitialized &&\n      !activeSensorDisablesAutoscroll &&\n      !autoScrollGloballyDisabled;\n\n    if (typeof autoScroll === 'object') {\n      return {\n        ...autoScroll,\n        enabled,\n      };\n    }\n\n    return {enabled};\n  }\n});\n","import {createContext, useContext, useMemo} from 'react';\nimport {\n  Transform,\n  useNodeRef,\n  useIsomorphicLayoutEffect,\n  useLatestValue,\n  useUniqueId,\n} from '@dnd-kit/utilities';\n\nimport {InternalContext, Data} from '../store';\nimport type {UniqueIdentifier} from '../types';\nimport {ActiveDraggableContext} from '../components/DndContext';\nimport {useSyntheticListeners, SyntheticListenerMap} from './utilities';\n\nexport interface UseDraggableArguments {\n  id: UniqueIdentifier;\n  data?: Data;\n  disabled?: boolean;\n  attributes?: {\n    role?: string;\n    roleDescription?: string;\n    tabIndex?: number;\n  };\n}\n\nexport interface DraggableAttributes {\n  role: string;\n  tabIndex: number;\n  'aria-disabled': boolean;\n  'aria-pressed': boolean | undefined;\n  'aria-roledescription': string;\n  'aria-describedby': string;\n}\n\nexport type DraggableSyntheticListeners = SyntheticListenerMap | undefined;\n\nconst NullContext = createContext<any>(null);\n\nconst defaultRole = 'button';\n\nconst ID_PREFIX = 'Droppable';\n\nexport function useDraggable({\n  id,\n  data,\n  disabled = false,\n  attributes,\n}: UseDraggableArguments) {\n  const key = useUniqueId(ID_PREFIX);\n  const {\n    activators,\n    activatorEvent,\n    active,\n    activeNodeRect,\n    ariaDescribedById,\n    draggableNodes,\n    over,\n  } = useContext(InternalContext);\n  const {role = defaultRole, roleDescription = 'draggable', tabIndex = 0} =\n    attributes ?? {};\n  const isDragging = active?.id === id;\n  const transform: Transform | null = useContext(\n    isDragging ? ActiveDraggableContext : NullContext\n  );\n  const [node, setNodeRef] = useNodeRef();\n  const [activatorNode, setActivatorNodeRef] = useNodeRef();\n  const listeners = useSyntheticListeners(activators, id);\n  const dataRef = useLatestValue(data);\n\n  useIsomorphicLayoutEffect(\n    () => {\n      draggableNodes.set(id, {id, key, node, activatorNode, data: dataRef});\n\n      return () => {\n        const node = draggableNodes.get(id);\n\n        if (node && node.key === key) {\n          draggableNodes.delete(id);\n        }\n      };\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [draggableNodes, id]\n  );\n\n  const memoizedAttributes: DraggableAttributes = useMemo(\n    () => ({\n      role,\n      tabIndex,\n      'aria-disabled': disabled,\n      'aria-pressed': isDragging && role === defaultRole ? true : undefined,\n      'aria-roledescription': roleDescription,\n      'aria-describedby': ariaDescribedById.draggable,\n    }),\n    [\n      disabled,\n      role,\n      tabIndex,\n      isDragging,\n      roleDescription,\n      ariaDescribedById.draggable,\n    ]\n  );\n\n  return {\n    active,\n    activatorEvent,\n    activeNodeRect,\n    attributes: memoizedAttributes,\n    isDragging,\n    listeners: disabled ? undefined : listeners,\n    node,\n    over,\n    setNodeRef,\n    setActivatorNodeRef,\n    transform,\n  };\n}\n","import {ContextType, useContext} from 'react';\nimport {PublicContext} from '../store';\n\nexport function useDndContext() {\n  return useContext(PublicContext);\n}\n\nexport type UseDndContextReturnValue = ContextType<typeof PublicContext>;\n","import {useCallback, useContext, useEffect, useRef} from 'react';\nimport {\n  useIsomorphicLayoutEffect,\n  useLatestValue,\n  useNodeRef,\n  useUniqueId,\n} from '@dnd-kit/utilities';\n\nimport {InternalContext, Action, Data} from '../store';\nimport type {ClientRect, UniqueIdentifier} from '../types';\n\nimport {useResizeObserver} from './utilities';\n\ninterface ResizeObserverConfig {\n  /** Whether the ResizeObserver should be disabled entirely */\n  disabled?: boolean;\n  /** Resize events may affect the layout and position of other droppable containers.\n   * Specify an array of `UniqueIdentifier` of droppable containers that should also be re-measured\n   * when this droppable container resizes. Specifying an empty array re-measures all droppable containers.\n   */\n  updateMeasurementsFor?: UniqueIdentifier[];\n  /** Represents the debounce timeout between when resize events are observed and when elements are re-measured */\n  timeout?: number;\n}\n\nexport interface UseDroppableArguments {\n  id: UniqueIdentifier;\n  disabled?: boolean;\n  data?: Data;\n  resizeObserverConfig?: ResizeObserverConfig;\n}\n\nconst ID_PREFIX = 'Droppable';\n\nconst defaultResizeObserverConfig = {\n  timeout: 25,\n};\n\nexport function useDroppable({\n  data,\n  disabled = false,\n  id,\n  resizeObserverConfig,\n}: UseDroppableArguments) {\n  const key = useUniqueId(ID_PREFIX);\n  const {active, dispatch, over, measureDroppableContainers} = useContext(\n    InternalContext\n  );\n  const previous = useRef({disabled});\n  const resizeObserverConnected = useRef(false);\n  const rect = useRef<ClientRect | null>(null);\n  const callbackId = useRef<NodeJS.Timeout | null>(null);\n  const {\n    disabled: resizeObserverDisabled,\n    updateMeasurementsFor,\n    timeout: resizeObserverTimeout,\n  } = {\n    ...defaultResizeObserverConfig,\n    ...resizeObserverConfig,\n  };\n  const ids = useLatestValue(updateMeasurementsFor ?? id);\n  const handleResize = useCallback(\n    () => {\n      if (!resizeObserverConnected.current) {\n        // ResizeObserver invokes the `handleResize` callback as soon as `observe` is called,\n        // assuming the element is rendered and displayed.\n        resizeObserverConnected.current = true;\n        return;\n      }\n\n      if (callbackId.current != null) {\n        clearTimeout(callbackId.current);\n      }\n\n      callbackId.current = setTimeout(() => {\n        measureDroppableContainers(\n          Array.isArray(ids.current) ? ids.current : [ids.current]\n        );\n        callbackId.current = null;\n      }, resizeObserverTimeout);\n    },\n    //eslint-disable-next-line react-hooks/exhaustive-deps\n    [resizeObserverTimeout]\n  );\n  const resizeObserver = useResizeObserver({\n    callback: handleResize,\n    disabled: resizeObserverDisabled || !active,\n  });\n  const handleNodeChange = useCallback(\n    (newElement: HTMLElement | null, previousElement: HTMLElement | null) => {\n      if (!resizeObserver) {\n        return;\n      }\n\n      if (previousElement) {\n        resizeObserver.unobserve(previousElement);\n        resizeObserverConnected.current = false;\n      }\n\n      if (newElement) {\n        resizeObserver.observe(newElement);\n      }\n    },\n    [resizeObserver]\n  );\n  const [nodeRef, setNodeRef] = useNodeRef(handleNodeChange);\n  const dataRef = useLatestValue(data);\n\n  useEffect(() => {\n    if (!resizeObserver || !nodeRef.current) {\n      return;\n    }\n\n    resizeObserver.disconnect();\n    resizeObserverConnected.current = false;\n    resizeObserver.observe(nodeRef.current);\n  }, [nodeRef, resizeObserver]);\n\n  useIsomorphicLayoutEffect(\n    () => {\n      dispatch({\n        type: Action.RegisterDroppable,\n        element: {\n          id,\n          key,\n          disabled,\n          node: nodeRef,\n          rect,\n          data: dataRef,\n        },\n      });\n\n      return () =>\n        dispatch({\n          type: Action.UnregisterDroppable,\n          key,\n          id,\n        });\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [id]\n  );\n\n  useEffect(() => {\n    if (disabled !== previous.current.disabled) {\n      dispatch({\n        type: Action.SetDroppableDisabled,\n        id,\n        key,\n        disabled,\n      });\n\n      previous.current.disabled = disabled;\n    }\n  }, [id, key, disabled, dispatch]);\n\n  return {\n    active,\n    rect,\n    isOver: over?.id === id,\n    node: nodeRef,\n    over,\n    setNodeRef,\n  };\n}\n","import React, {cloneElement, useState} from 'react';\nimport {useIsomorphicLayoutEffect, usePrevious} from '@dnd-kit/utilities';\n\nimport type {UniqueIdentifier} from '../../../../types';\n\nexport type Animation = (\n  key: UniqueIdentifier,\n  node: HTMLElement\n) => Promise<void> | void;\n\nexport interface Props {\n  animation: Animation;\n  children: React.ReactElement | null;\n}\n\nexport function AnimationManager({animation, children}: Props) {\n  const [\n    clonedChildren,\n    setClonedChildren,\n  ] = useState<React.ReactElement | null>(null);\n  const [element, setElement] = useState<HTMLElement | null>(null);\n  const previousChildren = usePrevious(children);\n\n  if (!children && !clonedChildren && previousChildren) {\n    setClonedChildren(previousChildren);\n  }\n\n  useIsomorphicLayoutEffect(() => {\n    if (!element) {\n      return;\n    }\n\n    const key = clonedChildren?.key;\n    const id = clonedChildren?.props.id;\n\n    if (key == null || id == null) {\n      setClonedChildren(null);\n      return;\n    }\n\n    Promise.resolve(animation(id, element)).then(() => {\n      setClonedChildren(null);\n    });\n  }, [animation, clonedChildren, element]);\n\n  return (\n    <>\n      {children}\n      {clonedChildren ? cloneElement(clonedChildren, {ref: setElement}) : null}\n    </>\n  );\n}\n","import React from 'react';\nimport type {Transform} from '@dnd-kit/utilities';\n\nimport {InternalContext, defaultInternalContext} from '../../../../store';\nimport {ActiveDraggableContext} from '../../../DndContext';\n\ninterface Props {\n  children: React.ReactNode;\n}\n\nconst defaultTransform: Transform = {\n  x: 0,\n  y: 0,\n  scaleX: 1,\n  scaleY: 1,\n};\n\nexport function NullifiedContextProvider({children}: Props) {\n  return (\n    <InternalContext.Provider value={defaultInternalContext}>\n      <ActiveDraggableContext.Provider value={defaultTransform}>\n        {children}\n      </ActiveDraggableContext.Provider>\n    </InternalContext.Provider>\n  );\n}\n","import React, {forwardRef} from 'react';\nimport {CSS, isKeyboardEvent} from '@dnd-kit/utilities';\n\nimport type {Transform} from '@dnd-kit/utilities';\n\nimport {getRelativeTransformOrigin} from '../../../../utilities';\nimport type {ClientRect, UniqueIdentifier} from '../../../../types';\n\ntype TransitionGetter = (\n  activatorEvent: Event | null\n) => React.CSSProperties['transition'] | undefined;\n\nexport interface Props {\n  as: keyof JSX.IntrinsicElements;\n  activatorEvent: Event | null;\n  adjustScale?: boolean;\n  children?: React.ReactNode;\n  className?: string;\n  id: UniqueIdentifier;\n  rect: ClientRect | null;\n  style?: React.CSSProperties;\n  transition?: string | TransitionGetter;\n  transform: Transform;\n}\n\nconst baseStyles: React.CSSProperties = {\n  position: 'fixed',\n  touchAction: 'none',\n};\n\nconst defaultTransition: TransitionGetter = (activatorEvent) => {\n  const isKeyboardActivator = isKeyboardEvent(activatorEvent);\n\n  return isKeyboardActivator ? 'transform 250ms ease' : undefined;\n};\n\nexport const PositionedOverlay = forwardRef<HTMLElement, Props>(\n  (\n    {\n      as,\n      activatorEvent,\n      adjustScale,\n      children,\n      className,\n      rect,\n      style,\n      transform,\n      transition = defaultTransition,\n    },\n    ref\n  ) => {\n    if (!rect) {\n      return null;\n    }\n\n    const scaleAdjustedTransform = adjustScale\n      ? transform\n      : {\n          ...transform,\n          scaleX: 1,\n          scaleY: 1,\n        };\n    const styles: React.CSSProperties | undefined = {\n      ...baseStyles,\n      width: rect.width,\n      height: rect.height,\n      top: rect.top,\n      left: rect.left,\n      transform: CSS.Transform.toString(scaleAdjustedTransform),\n      transformOrigin:\n        adjustScale && activatorEvent\n          ? getRelativeTransformOrigin(\n              activatorEvent as MouseEvent | KeyboardEvent | TouchEvent,\n              rect\n            )\n          : undefined,\n      transition:\n        typeof transition === 'function'\n          ? transition(activatorEvent)\n          : transition,\n      ...style,\n    };\n\n    return React.createElement(\n      as,\n      {\n        className,\n        style: styles,\n        ref,\n      },\n      children\n    );\n  }\n);\n","import {CSS, useEvent, getWindow} from '@dnd-kit/utilities';\nimport type {DeepRequired, Transform} from '@dnd-kit/utilities';\n\nimport type {\n  Active,\n  DraggableNode,\n  DraggableNodes,\n  DroppableContainers,\n} from '../../../store';\nimport type {ClientRect, UniqueIdentifier} from '../../../types';\nimport {getMeasurableNode} from '../../../utilities/nodes';\nimport {scrollIntoViewIfNeeded} from '../../../utilities/scroll';\nimport {parseTransform} from '../../../utilities/transform';\nimport type {MeasuringConfiguration} from '../../DndContext';\nimport type {Animation} from '../components';\n\ninterface SharedParameters {\n  active: {\n    id: UniqueIdentifier;\n    data: Active['data'];\n    node: HTMLElement;\n    rect: ClientRect;\n  };\n  dragOverlay: {\n    node: HTMLElement;\n    rect: ClientRect;\n  };\n  draggableNodes: DraggableNodes;\n  droppableContainers: DroppableContainers;\n  measuringConfiguration: DeepRequired<MeasuringConfiguration>;\n}\n\nexport interface KeyframeResolverParameters extends SharedParameters {\n  transform: {\n    initial: Transform;\n    final: Transform;\n  };\n}\n\nexport type KeyframeResolver = (\n  parameters: KeyframeResolverParameters\n) => Keyframe[];\n\nexport interface DropAnimationOptions {\n  keyframes?: KeyframeResolver;\n  duration?: number;\n  easing?: string;\n  sideEffects?: DropAnimationSideEffects | null;\n}\n\nexport type DropAnimation = DropAnimationFunction | DropAnimationOptions;\n\ninterface Arguments {\n  draggableNodes: DraggableNodes;\n  droppableContainers: DroppableContainers;\n  measuringConfiguration: DeepRequired<MeasuringConfiguration>;\n  config?: DropAnimation | null;\n}\n\nexport interface DropAnimationFunctionArguments extends SharedParameters {\n  transform: Transform;\n}\n\nexport type DropAnimationFunction = (\n  args: DropAnimationFunctionArguments\n) => Promise<void> | void;\n\ntype CleanupFunction = () => void;\n\nexport interface DropAnimationSideEffectsParameters extends SharedParameters {}\n\nexport type DropAnimationSideEffects = (\n  parameters: DropAnimationSideEffectsParameters\n) => CleanupFunction | void;\n\ntype ExtractStringProperties<T> = {\n  [K in keyof T]?: T[K] extends string ? string : never;\n};\n\ntype Styles = ExtractStringProperties<CSSStyleDeclaration>;\n\ninterface DefaultDropAnimationSideEffectsOptions {\n  className?: {\n    active?: string;\n    dragOverlay?: string;\n  };\n  styles?: {\n    active?: Styles;\n    dragOverlay?: Styles;\n  };\n}\n\nexport const defaultDropAnimationSideEffects = (\n  options: DefaultDropAnimationSideEffectsOptions\n): DropAnimationSideEffects => ({active, dragOverlay}) => {\n  const originalStyles: Record<string, string> = {};\n  const {styles, className} = options;\n\n  if (styles?.active) {\n    for (const [key, value] of Object.entries(styles.active)) {\n      if (value === undefined) {\n        continue;\n      }\n\n      originalStyles[key] = active.node.style.getPropertyValue(key);\n      active.node.style.setProperty(key, value);\n    }\n  }\n\n  if (styles?.dragOverlay) {\n    for (const [key, value] of Object.entries(styles.dragOverlay)) {\n      if (value === undefined) {\n        continue;\n      }\n\n      dragOverlay.node.style.setProperty(key, value);\n    }\n  }\n\n  if (className?.active) {\n    active.node.classList.add(className.active);\n  }\n\n  if (className?.dragOverlay) {\n    dragOverlay.node.classList.add(className.dragOverlay);\n  }\n\n  return function cleanup() {\n    for (const [key, value] of Object.entries(originalStyles)) {\n      active.node.style.setProperty(key, value);\n    }\n\n    if (className?.active) {\n      active.node.classList.remove(className.active);\n    }\n  };\n};\n\nconst defaultKeyframeResolver: KeyframeResolver = ({\n  transform: {initial, final},\n}) => [\n  {\n    transform: CSS.Transform.toString(initial),\n  },\n  {\n    transform: CSS.Transform.toString(final),\n  },\n];\n\nexport const defaultDropAnimationConfiguration: Required<DropAnimationOptions> = {\n  duration: 250,\n  easing: 'ease',\n  keyframes: defaultKeyframeResolver,\n  sideEffects: defaultDropAnimationSideEffects({\n    styles: {\n      active: {\n        opacity: '0',\n      },\n    },\n  }),\n};\n\nexport function useDropAnimation({\n  config,\n  draggableNodes,\n  droppableContainers,\n  measuringConfiguration,\n}: Arguments) {\n  return useEvent<Animation>((id, node) => {\n    if (config === null) {\n      return;\n    }\n\n    const activeDraggable: DraggableNode | undefined = draggableNodes.get(id);\n\n    if (!activeDraggable) {\n      return;\n    }\n\n    const activeNode = activeDraggable.node.current;\n\n    if (!activeNode) {\n      return;\n    }\n\n    const measurableNode = getMeasurableNode(node);\n\n    if (!measurableNode) {\n      return;\n    }\n    const {transform} = getWindow(node).getComputedStyle(node);\n    const parsedTransform = parseTransform(transform);\n\n    if (!parsedTransform) {\n      return;\n    }\n\n    const animation: DropAnimationFunction =\n      typeof config === 'function'\n        ? config\n        : createDefaultDropAnimation(config);\n\n    scrollIntoViewIfNeeded(\n      activeNode,\n      measuringConfiguration.draggable.measure\n    );\n\n    return animation({\n      active: {\n        id,\n        data: activeDraggable.data,\n        node: activeNode,\n        rect: measuringConfiguration.draggable.measure(activeNode),\n      },\n      draggableNodes,\n      dragOverlay: {\n        node,\n        rect: measuringConfiguration.dragOverlay.measure(measurableNode),\n      },\n      droppableContainers,\n      measuringConfiguration,\n      transform: parsedTransform,\n    });\n  });\n}\n\nfunction createDefaultDropAnimation(\n  options: DropAnimationOptions | undefined\n): DropAnimationFunction {\n  const {duration, easing, sideEffects, keyframes} = {\n    ...defaultDropAnimationConfiguration,\n    ...options,\n  };\n\n  return ({active, dragOverlay, transform, ...rest}) => {\n    if (!duration) {\n      // Do not animate if animation duration is zero.\n      return;\n    }\n\n    const delta = {\n      x: dragOverlay.rect.left - active.rect.left,\n      y: dragOverlay.rect.top - active.rect.top,\n    };\n\n    const scale = {\n      scaleX:\n        transform.scaleX !== 1\n          ? (active.rect.width * transform.scaleX) / dragOverlay.rect.width\n          : 1,\n      scaleY:\n        transform.scaleY !== 1\n          ? (active.rect.height * transform.scaleY) / dragOverlay.rect.height\n          : 1,\n    };\n    const finalTransform = {\n      x: transform.x - delta.x,\n      y: transform.y - delta.y,\n      ...scale,\n    };\n\n    const animationKeyframes = keyframes({\n      ...rest,\n      active,\n      dragOverlay,\n      transform: {initial: transform, final: finalTransform},\n    });\n\n    const [firstKeyframe] = animationKeyframes;\n    const lastKeyframe = animationKeyframes[animationKeyframes.length - 1];\n\n    if (JSON.stringify(firstKeyframe) === JSON.stringify(lastKeyframe)) {\n      // The start and end keyframes are the same, infer that there is no animation needed.\n      return;\n    }\n\n    const cleanup = sideEffects?.({active, dragOverlay, ...rest});\n    const animation = dragOverlay.node.animate(animationKeyframes, {\n      duration,\n      easing,\n      fill: 'forwards',\n    });\n\n    return new Promise((resolve) => {\n      animation.onfinish = () => {\n        cleanup?.();\n        resolve();\n      };\n    });\n  };\n}\n","import {useMemo} from 'react';\n\nimport type {UniqueIdentifier} from '../../../types';\n\nlet key = 0;\n\nexport function useKey(id: UniqueIdentifier | undefined) {\n  return useMemo(() => {\n    if (id == null) {\n      return;\n    }\n\n    key++;\n    return key;\n  }, [id]);\n}\n","import React, {useContext} from 'react';\n\nimport {applyModifiers, Modifiers} from '../../modifiers';\nimport {ActiveDraggableContext} from '../DndContext';\nimport {useDndContext} from '../../hooks';\nimport {useInitialValue} from '../../hooks/utilities';\n\nimport {\n  AnimationManager,\n  NullifiedContextProvider,\n  PositionedOverlay,\n} from './components';\nimport type {PositionedOverlayProps} from './components';\n\nimport {useDropAnimation, useKey} from './hooks';\nimport type {DropAnimation} from './hooks';\n\nexport interface Props\n  extends Pick<\n    PositionedOverlayProps,\n    'adjustScale' | 'children' | 'className' | 'style' | 'transition'\n  > {\n  dropAnimation?: DropAnimation | null | undefined;\n  modifiers?: Modifiers;\n  wrapperElement?: keyof JSX.IntrinsicElements;\n  zIndex?: number;\n}\n\nexport const DragOverlay = React.memo(\n  ({\n    adjustScale = false,\n    children,\n    dropAnimation: dropAnimationConfig,\n    style,\n    transition,\n    modifiers,\n    wrapperElement = 'div',\n    className,\n    zIndex = 999,\n  }: Props) => {\n    const {\n      activatorEvent,\n      active,\n      activeNodeRect,\n      containerNodeRect,\n      draggableNodes,\n      droppableContainers,\n      dragOverlay,\n      over,\n      measuringConfiguration,\n      scrollableAncestors,\n      scrollableAncestorRects,\n      windowRect,\n    } = useDndContext();\n    const transform = useContext(ActiveDraggableContext);\n    const key = useKey(active?.id);\n    const modifiedTransform = applyModifiers(modifiers, {\n      activatorEvent,\n      active,\n      activeNodeRect,\n      containerNodeRect,\n      draggingNodeRect: dragOverlay.rect,\n      over,\n      overlayNodeRect: dragOverlay.rect,\n      scrollableAncestors,\n      scrollableAncestorRects,\n      transform,\n      windowRect,\n    });\n    const initialRect = useInitialValue(activeNodeRect);\n    const dropAnimation = useDropAnimation({\n      config: dropAnimationConfig,\n      draggableNodes,\n      droppableContainers,\n      measuringConfiguration,\n    });\n    // We need to wait for the active node to be measured before connecting the drag overlay ref\n    // otherwise collisions can be computed against a mispositioned drag overlay\n    const ref = initialRect ? dragOverlay.setRef : undefined;\n\n    return (\n      <NullifiedContextProvider>\n        <AnimationManager animation={dropAnimation}>\n          {active && key ? (\n            <PositionedOverlay\n              key={key}\n              id={active.id}\n              ref={ref}\n              as={wrapperElement}\n              activatorEvent={activatorEvent}\n              adjustScale={adjustScale}\n              className={className}\n              transition={transition}\n              rect={initialRect}\n              style={{\n                zIndex,\n                ...style,\n              }}\n              transform={modifiedTransform}\n            >\n              {children}\n            </PositionedOverlay>\n          ) : null}\n        </AnimationManager>\n      </NullifiedContextProvider>\n    );\n  }\n);\n"]},"metadata":{},"sourceType":"module"}