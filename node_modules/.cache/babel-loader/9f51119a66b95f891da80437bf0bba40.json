{"ast":null,"code":"import React, { useMemo, useRef, useEffect, useState, useContext } from 'react';\nimport { useDndContext, getClientRect, useDroppable, useDraggable, closestCorners, getFirstCollision, getScrollableAncestors, KeyboardCode } from '@dnd-kit/core';\nimport { useUniqueId, useIsomorphicLayoutEffect, CSS, useCombinedRefs, isKeyboardEvent, subtract } from '@dnd-kit/utilities';\n/**\r\n * Move an array item to a different position. Returns a new array with the item moved to the new position.\r\n */\n\nfunction arrayMove(array, from, to) {\n  const newArray = array.slice();\n  newArray.splice(to < 0 ? newArray.length + to : to, 0, newArray.splice(from, 1)[0]);\n  return newArray;\n}\n/**\r\n * Swap an array item to a different position. Returns a new array with the item swapped to the new position.\r\n */\n\n\nfunction arraySwap(array, from, to) {\n  const newArray = array.slice();\n  newArray[from] = array[to];\n  newArray[to] = array[from];\n  return newArray;\n}\n\nfunction getSortedRects(items, rects) {\n  return items.reduce((accumulator, id, index) => {\n    const rect = rects.get(id);\n\n    if (rect) {\n      accumulator[index] = rect;\n    }\n\n    return accumulator;\n  }, Array(items.length));\n}\n\nfunction isValidIndex(index) {\n  return index !== null && index >= 0;\n}\n\nfunction itemsEqual(a, b) {\n  if (a === b) {\n    return true;\n  }\n\n  if (a.length !== b.length) {\n    return false;\n  }\n\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] !== b[i]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction normalizeDisabled(disabled) {\n  if (typeof disabled === 'boolean') {\n    return {\n      draggable: disabled,\n      droppable: disabled\n    };\n  }\n\n  return disabled;\n} // To-do: We should be calculating scale transformation\n\n\nconst defaultScale = {\n  scaleX: 1,\n  scaleY: 1\n};\n\nconst horizontalListSortingStrategy = _ref => {\n  let {\n    rects,\n    activeNodeRect: fallbackActiveRect,\n    activeIndex,\n    overIndex,\n    index\n  } = _ref;\n\n  var _rects$activeIndex;\n\n  const activeNodeRect = (_rects$activeIndex = rects[activeIndex]) != null ? _rects$activeIndex : fallbackActiveRect;\n\n  if (!activeNodeRect) {\n    return null;\n  }\n\n  const itemGap = getItemGap(rects, index, activeIndex);\n\n  if (index === activeIndex) {\n    const newIndexRect = rects[overIndex];\n\n    if (!newIndexRect) {\n      return null;\n    }\n\n    return {\n      x: activeIndex < overIndex ? newIndexRect.left + newIndexRect.width - (activeNodeRect.left + activeNodeRect.width) : newIndexRect.left - activeNodeRect.left,\n      y: 0,\n      ...defaultScale\n    };\n  }\n\n  if (index > activeIndex && index <= overIndex) {\n    return {\n      x: -activeNodeRect.width - itemGap,\n      y: 0,\n      ...defaultScale\n    };\n  }\n\n  if (index < activeIndex && index >= overIndex) {\n    return {\n      x: activeNodeRect.width + itemGap,\n      y: 0,\n      ...defaultScale\n    };\n  }\n\n  return {\n    x: 0,\n    y: 0,\n    ...defaultScale\n  };\n};\n\nfunction getItemGap(rects, index, activeIndex) {\n  const currentRect = rects[index];\n  const previousRect = rects[index - 1];\n  const nextRect = rects[index + 1];\n\n  if (!currentRect || !previousRect && !nextRect) {\n    return 0;\n  }\n\n  if (activeIndex < index) {\n    return previousRect ? currentRect.left - (previousRect.left + previousRect.width) : nextRect.left - (currentRect.left + currentRect.width);\n  }\n\n  return nextRect ? nextRect.left - (currentRect.left + currentRect.width) : currentRect.left - (previousRect.left + previousRect.width);\n}\n\nconst rectSortingStrategy = _ref2 => {\n  let {\n    rects,\n    activeIndex,\n    overIndex,\n    index\n  } = _ref2;\n  const newRects = arrayMove(rects, overIndex, activeIndex);\n  const oldRect = rects[index];\n  const newRect = newRects[index];\n\n  if (!newRect || !oldRect) {\n    return null;\n  }\n\n  return {\n    x: newRect.left - oldRect.left,\n    y: newRect.top - oldRect.top,\n    scaleX: newRect.width / oldRect.width,\n    scaleY: newRect.height / oldRect.height\n  };\n};\n\nconst rectSwappingStrategy = _ref3 => {\n  let {\n    activeIndex,\n    index,\n    rects,\n    overIndex\n  } = _ref3;\n  let oldRect;\n  let newRect;\n\n  if (index === activeIndex) {\n    oldRect = rects[index];\n    newRect = rects[overIndex];\n  }\n\n  if (index === overIndex) {\n    oldRect = rects[index];\n    newRect = rects[activeIndex];\n  }\n\n  if (!newRect || !oldRect) {\n    return null;\n  }\n\n  return {\n    x: newRect.left - oldRect.left,\n    y: newRect.top - oldRect.top,\n    scaleX: newRect.width / oldRect.width,\n    scaleY: newRect.height / oldRect.height\n  };\n}; // To-do: We should be calculating scale transformation\n\n\nconst defaultScale$1 = {\n  scaleX: 1,\n  scaleY: 1\n};\n\nconst verticalListSortingStrategy = _ref4 => {\n  let {\n    activeIndex,\n    activeNodeRect: fallbackActiveRect,\n    index,\n    rects,\n    overIndex\n  } = _ref4;\n\n  var _rects$activeIndex;\n\n  const activeNodeRect = (_rects$activeIndex = rects[activeIndex]) != null ? _rects$activeIndex : fallbackActiveRect;\n\n  if (!activeNodeRect) {\n    return null;\n  }\n\n  if (index === activeIndex) {\n    const overIndexRect = rects[overIndex];\n\n    if (!overIndexRect) {\n      return null;\n    }\n\n    return {\n      x: 0,\n      y: activeIndex < overIndex ? overIndexRect.top + overIndexRect.height - (activeNodeRect.top + activeNodeRect.height) : overIndexRect.top - activeNodeRect.top,\n      ...defaultScale$1\n    };\n  }\n\n  const itemGap = getItemGap$1(rects, index, activeIndex);\n\n  if (index > activeIndex && index <= overIndex) {\n    return {\n      x: 0,\n      y: -activeNodeRect.height - itemGap,\n      ...defaultScale$1\n    };\n  }\n\n  if (index < activeIndex && index >= overIndex) {\n    return {\n      x: 0,\n      y: activeNodeRect.height + itemGap,\n      ...defaultScale$1\n    };\n  }\n\n  return {\n    x: 0,\n    y: 0,\n    ...defaultScale$1\n  };\n};\n\nfunction getItemGap$1(clientRects, index, activeIndex) {\n  const currentRect = clientRects[index];\n  const previousRect = clientRects[index - 1];\n  const nextRect = clientRects[index + 1];\n\n  if (!currentRect) {\n    return 0;\n  }\n\n  if (activeIndex < index) {\n    return previousRect ? currentRect.top - (previousRect.top + previousRect.height) : nextRect ? nextRect.top - (currentRect.top + currentRect.height) : 0;\n  }\n\n  return nextRect ? nextRect.top - (currentRect.top + currentRect.height) : previousRect ? currentRect.top - (previousRect.top + previousRect.height) : 0;\n}\n\nconst ID_PREFIX = 'Sortable';\nconst Context = /*#__PURE__*/React.createContext({\n  activeIndex: -1,\n  containerId: ID_PREFIX,\n  disableTransforms: false,\n  items: [],\n  overIndex: -1,\n  useDragOverlay: false,\n  sortedRects: [],\n  strategy: rectSortingStrategy,\n  disabled: {\n    draggable: false,\n    droppable: false\n  }\n});\n\nfunction SortableContext(_ref5) {\n  let {\n    children,\n    id,\n    items: userDefinedItems,\n    strategy = rectSortingStrategy,\n    disabled: disabledProp = false\n  } = _ref5;\n  const {\n    active,\n    dragOverlay,\n    droppableRects,\n    over,\n    measureDroppableContainers,\n    measuringScheduled\n  } = useDndContext();\n  const containerId = useUniqueId(ID_PREFIX, id);\n  const useDragOverlay = Boolean(dragOverlay.rect !== null);\n  const items = useMemo(() => userDefinedItems.map(item => typeof item === 'object' && 'id' in item ? item.id : item), [userDefinedItems]);\n  const isDragging = active != null;\n  const activeIndex = active ? items.indexOf(active.id) : -1;\n  const overIndex = over ? items.indexOf(over.id) : -1;\n  const previousItemsRef = useRef(items);\n  const itemsHaveChanged = !itemsEqual(items, previousItemsRef.current);\n  const disableTransforms = overIndex !== -1 && activeIndex === -1 || itemsHaveChanged;\n  const disabled = normalizeDisabled(disabledProp);\n  useIsomorphicLayoutEffect(() => {\n    if (itemsHaveChanged && isDragging && !measuringScheduled) {\n      measureDroppableContainers(items);\n    }\n  }, [itemsHaveChanged, items, isDragging, measureDroppableContainers, measuringScheduled]);\n  useEffect(() => {\n    previousItemsRef.current = items;\n  }, [items]);\n  const contextValue = useMemo(() => ({\n    activeIndex,\n    containerId,\n    disabled,\n    disableTransforms,\n    items,\n    overIndex,\n    useDragOverlay,\n    sortedRects: getSortedRects(items, droppableRects),\n    strategy\n  }), // eslint-disable-next-line react-hooks/exhaustive-deps\n  [activeIndex, containerId, disabled.draggable, disabled.droppable, disableTransforms, items, overIndex, droppableRects, useDragOverlay, strategy]);\n  return React.createElement(Context.Provider, {\n    value: contextValue\n  }, children);\n}\n\nconst defaultNewIndexGetter = _ref6 => {\n  let {\n    id,\n    items,\n    activeIndex,\n    overIndex\n  } = _ref6;\n  return arrayMove(items, activeIndex, overIndex).indexOf(id);\n};\n\nconst defaultAnimateLayoutChanges = _ref7 => {\n  let {\n    containerId,\n    isSorting,\n    wasDragging,\n    index,\n    items,\n    newIndex,\n    previousItems,\n    previousContainerId,\n    transition\n  } = _ref7;\n\n  if (!transition || !wasDragging) {\n    return false;\n  }\n\n  if (previousItems !== items && index === newIndex) {\n    return false;\n  }\n\n  if (isSorting) {\n    return true;\n  }\n\n  return newIndex !== index && containerId === previousContainerId;\n};\n\nconst defaultTransition = {\n  duration: 200,\n  easing: 'ease'\n};\nconst transitionProperty = 'transform';\nconst disabledTransition = /*#__PURE__*/CSS.Transition.toString({\n  property: transitionProperty,\n  duration: 0,\n  easing: 'linear'\n});\nconst defaultAttributes = {\n  roleDescription: 'sortable'\n};\n/*\r\n * When the index of an item changes while sorting,\r\n * we need to temporarily disable the transforms\r\n */\n\nfunction useDerivedTransform(_ref8) {\n  let {\n    disabled,\n    index,\n    node,\n    rect\n  } = _ref8;\n  const [derivedTransform, setDerivedtransform] = useState(null);\n  const previousIndex = useRef(index);\n  useIsomorphicLayoutEffect(() => {\n    if (!disabled && index !== previousIndex.current && node.current) {\n      const initial = rect.current;\n\n      if (initial) {\n        const current = getClientRect(node.current, {\n          ignoreTransform: true\n        });\n        const delta = {\n          x: initial.left - current.left,\n          y: initial.top - current.top,\n          scaleX: initial.width / current.width,\n          scaleY: initial.height / current.height\n        };\n\n        if (delta.x || delta.y) {\n          setDerivedtransform(delta);\n        }\n      }\n    }\n\n    if (index !== previousIndex.current) {\n      previousIndex.current = index;\n    }\n  }, [disabled, index, node, rect]);\n  useEffect(() => {\n    if (derivedTransform) {\n      requestAnimationFrame(() => {\n        setDerivedtransform(null);\n      });\n    }\n  }, [derivedTransform]);\n  return derivedTransform;\n}\n\nfunction useSortable(_ref9) {\n  let {\n    animateLayoutChanges = defaultAnimateLayoutChanges,\n    attributes: userDefinedAttributes,\n    disabled: localDisabled,\n    data: customData,\n    getNewIndex = defaultNewIndexGetter,\n    id,\n    strategy: localStrategy,\n    resizeObserverConfig,\n    transition = defaultTransition\n  } = _ref9;\n  const {\n    items,\n    containerId,\n    activeIndex,\n    disabled: globalDisabled,\n    disableTransforms,\n    sortedRects,\n    overIndex,\n    useDragOverlay,\n    strategy: globalStrategy\n  } = useContext(Context);\n  const disabled = normalizeLocalDisabled(localDisabled, globalDisabled);\n  const index = items.indexOf(id);\n  const data = useMemo(() => ({\n    sortable: {\n      containerId,\n      index,\n      items\n    },\n    ...customData\n  }), [containerId, customData, index, items]);\n  const itemsAfterCurrentSortable = useMemo(() => items.slice(items.indexOf(id)), [items, id]);\n  const {\n    rect,\n    node,\n    isOver,\n    setNodeRef: setDroppableNodeRef\n  } = useDroppable({\n    id,\n    data,\n    disabled: disabled.droppable,\n    resizeObserverConfig: {\n      updateMeasurementsFor: itemsAfterCurrentSortable,\n      ...resizeObserverConfig\n    }\n  });\n  const {\n    active,\n    activatorEvent,\n    activeNodeRect,\n    attributes,\n    setNodeRef: setDraggableNodeRef,\n    listeners,\n    isDragging,\n    over,\n    setActivatorNodeRef,\n    transform\n  } = useDraggable({\n    id,\n    data,\n    attributes: { ...defaultAttributes,\n      ...userDefinedAttributes\n    },\n    disabled: disabled.draggable\n  });\n  const setNodeRef = useCombinedRefs(setDroppableNodeRef, setDraggableNodeRef);\n  const isSorting = Boolean(active);\n  const displaceItem = isSorting && !disableTransforms && isValidIndex(activeIndex) && isValidIndex(overIndex);\n  const shouldDisplaceDragSource = !useDragOverlay && isDragging;\n  const dragSourceDisplacement = shouldDisplaceDragSource && displaceItem ? transform : null;\n  const strategy = localStrategy != null ? localStrategy : globalStrategy;\n  const finalTransform = displaceItem ? dragSourceDisplacement != null ? dragSourceDisplacement : strategy({\n    rects: sortedRects,\n    activeNodeRect,\n    activeIndex,\n    overIndex,\n    index\n  }) : null;\n  const newIndex = isValidIndex(activeIndex) && isValidIndex(overIndex) ? getNewIndex({\n    id,\n    items,\n    activeIndex,\n    overIndex\n  }) : index;\n  const activeId = active == null ? void 0 : active.id;\n  const previous = useRef({\n    activeId,\n    items,\n    newIndex,\n    containerId\n  });\n  const itemsHaveChanged = items !== previous.current.items;\n  const shouldAnimateLayoutChanges = animateLayoutChanges({\n    active,\n    containerId,\n    isDragging,\n    isSorting,\n    id,\n    index,\n    items,\n    newIndex: previous.current.newIndex,\n    previousItems: previous.current.items,\n    previousContainerId: previous.current.containerId,\n    transition,\n    wasDragging: previous.current.activeId != null\n  });\n  const derivedTransform = useDerivedTransform({\n    disabled: !shouldAnimateLayoutChanges,\n    index,\n    node,\n    rect\n  });\n  useEffect(() => {\n    if (isSorting && previous.current.newIndex !== newIndex) {\n      previous.current.newIndex = newIndex;\n    }\n\n    if (containerId !== previous.current.containerId) {\n      previous.current.containerId = containerId;\n    }\n\n    if (items !== previous.current.items) {\n      previous.current.items = items;\n    }\n  }, [isSorting, newIndex, containerId, items]);\n  useEffect(() => {\n    if (activeId === previous.current.activeId) {\n      return;\n    }\n\n    if (activeId && !previous.current.activeId) {\n      previous.current.activeId = activeId;\n      return;\n    }\n\n    const timeoutId = setTimeout(() => {\n      previous.current.activeId = activeId;\n    }, 50);\n    return () => clearTimeout(timeoutId);\n  }, [activeId]);\n  return {\n    active,\n    activeIndex,\n    attributes,\n    data,\n    rect,\n    index,\n    newIndex,\n    items,\n    isOver,\n    isSorting,\n    isDragging,\n    listeners,\n    node,\n    overIndex,\n    over,\n    setNodeRef,\n    setActivatorNodeRef,\n    setDroppableNodeRef,\n    setDraggableNodeRef,\n    transform: derivedTransform != null ? derivedTransform : finalTransform,\n    transition: getTransition()\n  };\n\n  function getTransition() {\n    if ( // Temporarily disable transitions for a single frame to set up derived transforms\n    derivedTransform || // Or to prevent items jumping to back to their \"new\" position when items change\n    itemsHaveChanged && previous.current.newIndex === index) {\n      return disabledTransition;\n    }\n\n    if (shouldDisplaceDragSource && !isKeyboardEvent(activatorEvent) || !transition) {\n      return undefined;\n    }\n\n    if (isSorting || shouldAnimateLayoutChanges) {\n      return CSS.Transition.toString({ ...transition,\n        property: transitionProperty\n      });\n    }\n\n    return undefined;\n  }\n}\n\nfunction normalizeLocalDisabled(localDisabled, globalDisabled) {\n  var _localDisabled$dragga, _localDisabled$droppa;\n\n  if (typeof localDisabled === 'boolean') {\n    return {\n      draggable: localDisabled,\n      // Backwards compatibility\n      droppable: false\n    };\n  }\n\n  return {\n    draggable: (_localDisabled$dragga = localDisabled == null ? void 0 : localDisabled.draggable) != null ? _localDisabled$dragga : globalDisabled.draggable,\n    droppable: (_localDisabled$droppa = localDisabled == null ? void 0 : localDisabled.droppable) != null ? _localDisabled$droppa : globalDisabled.droppable\n  };\n}\n\nfunction hasSortableData(entry) {\n  if (!entry) {\n    return false;\n  }\n\n  const data = entry.data.current;\n\n  if (data && 'sortable' in data && typeof data.sortable === 'object' && 'containerId' in data.sortable && 'items' in data.sortable && 'index' in data.sortable) {\n    return true;\n  }\n\n  return false;\n}\n\nconst directions = [KeyboardCode.Down, KeyboardCode.Right, KeyboardCode.Up, KeyboardCode.Left];\n\nconst sortableKeyboardCoordinates = (event, _ref10) => {\n  let {\n    context: {\n      active,\n      collisionRect,\n      droppableRects,\n      droppableContainers,\n      over,\n      scrollableAncestors\n    }\n  } = _ref10;\n\n  if (directions.includes(event.code)) {\n    event.preventDefault();\n\n    if (!active || !collisionRect) {\n      return;\n    }\n\n    const filteredContainers = [];\n    droppableContainers.getEnabled().forEach(entry => {\n      if (!entry || (entry == null ? void 0 : entry.disabled)) {\n        return;\n      }\n\n      const rect = droppableRects.get(entry.id);\n\n      if (!rect) {\n        return;\n      }\n\n      switch (event.code) {\n        case KeyboardCode.Down:\n          if (collisionRect.top < rect.top) {\n            filteredContainers.push(entry);\n          }\n\n          break;\n\n        case KeyboardCode.Up:\n          if (collisionRect.top > rect.top) {\n            filteredContainers.push(entry);\n          }\n\n          break;\n\n        case KeyboardCode.Left:\n          if (collisionRect.left > rect.left) {\n            filteredContainers.push(entry);\n          }\n\n          break;\n\n        case KeyboardCode.Right:\n          if (collisionRect.left < rect.left) {\n            filteredContainers.push(entry);\n          }\n\n          break;\n      }\n    });\n    const collisions = closestCorners({\n      active,\n      collisionRect: collisionRect,\n      droppableRects,\n      droppableContainers: filteredContainers,\n      pointerCoordinates: null\n    });\n    let closestId = getFirstCollision(collisions, 'id');\n\n    if (closestId === (over == null ? void 0 : over.id) && collisions.length > 1) {\n      closestId = collisions[1].id;\n    }\n\n    if (closestId != null) {\n      const activeDroppable = droppableContainers.get(active.id);\n      const newDroppable = droppableContainers.get(closestId);\n      const newRect = newDroppable ? droppableRects.get(newDroppable.id) : null;\n      const newNode = newDroppable == null ? void 0 : newDroppable.node.current;\n\n      if (newNode && newRect && activeDroppable && newDroppable) {\n        const newScrollAncestors = getScrollableAncestors(newNode);\n        const hasDifferentScrollAncestors = newScrollAncestors.some((element, index) => scrollableAncestors[index] !== element);\n        const hasSameContainer = isSameContainer(activeDroppable, newDroppable);\n        const isAfterActive = isAfter(activeDroppable, newDroppable);\n        const offset = hasDifferentScrollAncestors || !hasSameContainer ? {\n          x: 0,\n          y: 0\n        } : {\n          x: isAfterActive ? collisionRect.width - newRect.width : 0,\n          y: isAfterActive ? collisionRect.height - newRect.height : 0\n        };\n        const rectCoordinates = {\n          x: newRect.left,\n          y: newRect.top\n        };\n        const newCoordinates = offset.x && offset.y ? rectCoordinates : subtract(rectCoordinates, offset);\n        return newCoordinates;\n      }\n    }\n  }\n\n  return undefined;\n};\n\nfunction isSameContainer(a, b) {\n  if (!hasSortableData(a) || !hasSortableData(b)) {\n    return false;\n  }\n\n  return a.data.current.sortable.containerId === b.data.current.sortable.containerId;\n}\n\nfunction isAfter(a, b) {\n  if (!hasSortableData(a) || !hasSortableData(b)) {\n    return false;\n  }\n\n  if (!isSameContainer(a, b)) {\n    return false;\n  }\n\n  return a.data.current.sortable.index < b.data.current.sortable.index;\n}\n\nexport { SortableContext, arrayMove, arraySwap, defaultAnimateLayoutChanges, defaultNewIndexGetter, hasSortableData, horizontalListSortingStrategy, rectSortingStrategy, rectSwappingStrategy, sortableKeyboardCoordinates, useSortable, verticalListSortingStrategy };","map":{"version":3,"mappings":";;;AAAA;;;;SAGgBA,UAAaC,OAAYC,MAAcC;EACrD,MAAMC,QAAQ,GAAGH,KAAK,CAACI,KAANJ,EAAjB;EACAG,QAAQ,CAACE,MAATF,CACED,EAAE,GAAG,CAALA,GAASC,QAAQ,CAACG,MAATH,GAAkBD,EAA3BA,GAAgCA,EADlCC,EAEE,CAFFA,EAGEA,QAAQ,CAACE,MAATF,CAAgBF,IAAhBE,EAAsB,CAAtBA,EAAyB,CAAzBA,CAHFA;EAMA,OAAOA,QAAP;AACD;ACZD;;;;;AAGA,SAAgBI,SAAhB,CAA6BP,KAA7B,EAAyCC,IAAzC,EAAuDC,EAAvD,EAAuDA;EACrD,MAAMC,QAAQ,GAAGH,KAAK,CAACI,KAANJ,EAAjB;EAEAG,QAAQ,CAACF,IAAD,CAARE,GAAiBH,KAAK,CAACE,EAAD,CAAtBC;EACAA,QAAQ,CAACD,EAAD,CAARC,GAAeH,KAAK,CAACC,IAAD,CAApBE;EAEA,OAAOA,QAAP;AACD;;SCJeK,eACdC,OACAC;EAEA,OAAOD,KAAK,CAACE,MAANF,CAA2B,CAACG,WAAD,EAAcC,EAAd,EAAkBC,KAAlB;IAChC,MAAMC,IAAI,GAAGL,KAAK,CAACM,GAANN,CAAUG,EAAVH,CAAb;;IAEA,IAAIK,IAAJ,EAAU;MACRH,WAAW,CAACE,KAAD,CAAXF,GAAqBG,IAArBH;IACD;;IAED,OAAOA,WAAP;EAPK,GAQJK,KAAK,CAACR,KAAK,CAACH,MAAP,CARDG,CAAP;AASD;;SCnBeS,aAAaJ;EAC3B,OAAOA,KAAK,KAAK,IAAVA,IAAkBA,KAAK,IAAI,CAAlC;AACD;;SCAeK,WAAWC,GAAuBC;EAChD,IAAID,CAAC,KAAKC,CAAV,EAAa;IACX,OAAO,IAAP;EACD;;EAED,IAAID,CAAC,CAACd,MAAFc,KAAaC,CAAC,CAACf,MAAnB,EAA2B;IACzB,OAAO,KAAP;EACD;;EAED,KAAK,IAAIgB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,CAAC,CAACd,MAAtB,EAA8BgB,CAAC,EAA/B,EAAmC;IACjC,IAAIF,CAAC,CAACE,CAAD,CAADF,KAASC,CAAC,CAACC,CAAD,CAAd,EAAmB;MACjB,OAAO,KAAP;IACD;EACF;;EAED,OAAO,IAAP;AACD;;SChBeC,kBAAkBC;EAChC,IAAI,OAAOA,QAAP,KAAoB,SAAxB,EAAmC;IACjC,OAAO;MACLC,SAAS,EAAED,QADN;MAELE,SAAS,EAAEF;IAFN,CAAP;EAID;;EAED,OAAOA,QAAP;AACD,C,CCRD;;;AACA,MAAMG,YAAY,GAAG;EACnBC,MAAM,EAAE,CADW;EAEnBC,MAAM,EAAE;AAFW,CAArB;;AAKA,MAAaC,6BAA6B,GAAoB;EAAA,IAAC;IAC7DpB,KAD6D;IAE7DqB,cAAc,EAAEC,kBAF6C;IAG7DC,WAH6D;IAI7DC,SAJ6D;IAK7DpB;EAL6D,CAAD;;;;EAO5D,MAAMiB,cAAc,yBAAGrB,KAAK,CAACuB,WAAD,CAAR,iCAAyBD,kBAA7C;;EAEA,IAAI,CAACD,cAAL,EAAqB;IACnB,OAAO,IAAP;EACD;;EAED,MAAMI,OAAO,GAAGC,UAAU,CAAC1B,KAAD,EAAQI,KAAR,EAAemB,WAAf,CAA1B;;EAEA,IAAInB,KAAK,KAAKmB,WAAd,EAA2B;IACzB,MAAMI,YAAY,GAAG3B,KAAK,CAACwB,SAAD,CAA1B;;IAEA,IAAI,CAACG,YAAL,EAAmB;MACjB,OAAO,IAAP;IACD;;IAED,OAAO;MACLC,CAAC,EACCL,WAAW,GAAGC,SAAdD,GACII,YAAY,CAACE,IAAbF,GACAA,YAAY,CAACG,KADbH,IAECN,cAAc,CAACQ,IAAfR,GAAsBA,cAAc,CAACS,KAFtCH,CADJJ,GAIII,YAAY,CAACE,IAAbF,GAAoBN,cAAc,CAACQ,IANpC;MAOLE,CAAC,EAAE,CAPE;MAQL,GAAGd;IARE,CAAP;EAUD;;EAED,IAAIb,KAAK,GAAGmB,WAARnB,IAAuBA,KAAK,IAAIoB,SAApC,EAA+C;IAC7C,OAAO;MACLI,CAAC,EAAE,CAACP,cAAc,CAACS,KAAhB,GAAwBL,OADtB;MAELM,CAAC,EAAE,CAFE;MAGL,GAAGd;IAHE,CAAP;EAKD;;EAED,IAAIb,KAAK,GAAGmB,WAARnB,IAAuBA,KAAK,IAAIoB,SAApC,EAA+C;IAC7C,OAAO;MACLI,CAAC,EAAEP,cAAc,CAACS,KAAfT,GAAuBI,OADrB;MAELM,CAAC,EAAE,CAFE;MAGL,GAAGd;IAHE,CAAP;EAKD;;EAED,OAAO;IACLW,CAAC,EAAE,CADE;IAELG,CAAC,EAAE,CAFE;IAGL,GAAGd;EAHE,CAAP;AAlDK,CAAP;;AAyDA,SAASS,UAAT,CAAoB1B,KAApB,EAAyCI,KAAzC,EAAwDmB,WAAxD;EACE,MAAMS,WAAW,GAA2BhC,KAAK,CAACI,KAAD,CAAjD;EACA,MAAM6B,YAAY,GAA2BjC,KAAK,CAACI,KAAK,GAAG,CAAT,CAAlD;EACA,MAAM8B,QAAQ,GAA2BlC,KAAK,CAACI,KAAK,GAAG,CAAT,CAA9C;;EAEA,IAAI,CAAC4B,WAAD,IAAiB,CAACC,YAAD,IAAiB,CAACC,QAAvC,EAAkD;IAChD,OAAO,CAAP;EACD;;EAED,IAAIX,WAAW,GAAGnB,KAAlB,EAAyB;IACvB,OAAO6B,YAAY,GACfD,WAAW,CAACH,IAAZG,IAAoBC,YAAY,CAACJ,IAAbI,GAAoBA,YAAY,CAACH,KAArDE,CADe,GAEfE,QAAQ,CAACL,IAATK,IAAiBF,WAAW,CAACH,IAAZG,GAAmBA,WAAW,CAACF,KAAhDI,CAFJ;EAGD;;EAED,OAAOA,QAAQ,GACXA,QAAQ,CAACL,IAATK,IAAiBF,WAAW,CAACH,IAAZG,GAAmBA,WAAW,CAACF,KAAhDI,CADW,GAEXF,WAAW,CAACH,IAAZG,IAAoBC,YAAY,CAACJ,IAAbI,GAAoBA,YAAY,CAACH,KAArDE,CAFJ;AAGD;;MCjFYG,mBAAmB,GAAoB;EAAA,IAAC;IACnDnC,KADmD;IAEnDuB,WAFmD;IAGnDC,SAHmD;IAInDpB;EAJmD,CAAD;EAMlD,MAAMgC,QAAQ,GAAG/C,SAAS,CAACW,KAAD,EAAQwB,SAAR,EAAmBD,WAAnB,CAA1B;EAEA,MAAMc,OAAO,GAAGrC,KAAK,CAACI,KAAD,CAArB;EACA,MAAMkC,OAAO,GAAGF,QAAQ,CAAChC,KAAD,CAAxB;;EAEA,IAAI,CAACkC,OAAD,IAAY,CAACD,OAAjB,EAA0B;IACxB,OAAO,IAAP;EACD;;EAED,OAAO;IACLT,CAAC,EAAEU,OAAO,CAACT,IAARS,GAAeD,OAAO,CAACR,IADrB;IAELE,CAAC,EAAEO,OAAO,CAACC,GAARD,GAAcD,OAAO,CAACE,GAFpB;IAGLrB,MAAM,EAAEoB,OAAO,CAACR,KAARQ,GAAgBD,OAAO,CAACP,KAH3B;IAILX,MAAM,EAAEmB,OAAO,CAACE,MAARF,GAAiBD,OAAO,CAACG;EAJ5B,CAAP;AAfK;;MCDMC,oBAAoB,GAAoB;EAAA,IAAC;IACpDlB,WADoD;IAEpDnB,KAFoD;IAGpDJ,KAHoD;IAIpDwB;EAJoD,CAAD;EAMnD,IAAIa,OAAJ;EACA,IAAIC,OAAJ;;EAEA,IAAIlC,KAAK,KAAKmB,WAAd,EAA2B;IACzBc,OAAO,GAAGrC,KAAK,CAACI,KAAD,CAAfiC;IACAC,OAAO,GAAGtC,KAAK,CAACwB,SAAD,CAAfc;EACD;;EAED,IAAIlC,KAAK,KAAKoB,SAAd,EAAyB;IACvBa,OAAO,GAAGrC,KAAK,CAACI,KAAD,CAAfiC;IACAC,OAAO,GAAGtC,KAAK,CAACuB,WAAD,CAAfe;EACD;;EAED,IAAI,CAACA,OAAD,IAAY,CAACD,OAAjB,EAA0B;IACxB,OAAO,IAAP;EACD;;EAED,OAAO;IACLT,CAAC,EAAEU,OAAO,CAACT,IAARS,GAAeD,OAAO,CAACR,IADrB;IAELE,CAAC,EAAEO,OAAO,CAACC,GAARD,GAAcD,OAAO,CAACE,GAFpB;IAGLrB,MAAM,EAAEoB,OAAO,CAACR,KAARQ,GAAgBD,OAAO,CAACP,KAH3B;IAILX,MAAM,EAAEmB,OAAO,CAACE,MAARF,GAAiBD,OAAO,CAACG;EAJ5B,CAAP;AAvBK,E,CCCP;;;AACA,MAAMvB,cAAY,GAAG;EACnBC,MAAM,EAAE,CADW;EAEnBC,MAAM,EAAE;AAFW,CAArB;;AAKA,MAAauB,2BAA2B,GAAoB;EAAA,IAAC;IAC3DnB,WAD2D;IAE3DF,cAAc,EAAEC,kBAF2C;IAG3DlB,KAH2D;IAI3DJ,KAJ2D;IAK3DwB;EAL2D,CAAD;;;;EAO1D,MAAMH,cAAc,yBAAGrB,KAAK,CAACuB,WAAD,CAAR,iCAAyBD,kBAA7C;;EAEA,IAAI,CAACD,cAAL,EAAqB;IACnB,OAAO,IAAP;EACD;;EAED,IAAIjB,KAAK,KAAKmB,WAAd,EAA2B;IACzB,MAAMoB,aAAa,GAAG3C,KAAK,CAACwB,SAAD,CAA3B;;IAEA,IAAI,CAACmB,aAAL,EAAoB;MAClB,OAAO,IAAP;IACD;;IAED,OAAO;MACLf,CAAC,EAAE,CADE;MAELG,CAAC,EACCR,WAAW,GAAGC,SAAdD,GACIoB,aAAa,CAACJ,GAAdI,GACAA,aAAa,CAACH,MADdG,IAECtB,cAAc,CAACkB,GAAflB,GAAqBA,cAAc,CAACmB,MAFrCG,CADJpB,GAIIoB,aAAa,CAACJ,GAAdI,GAAoBtB,cAAc,CAACkB,GAPpC;MAQL,GAAGtB;IARE,CAAP;EAUD;;EAED,MAAMQ,OAAO,GAAGC,YAAU,CAAC1B,KAAD,EAAQI,KAAR,EAAemB,WAAf,CAA1B;;EAEA,IAAInB,KAAK,GAAGmB,WAARnB,IAAuBA,KAAK,IAAIoB,SAApC,EAA+C;IAC7C,OAAO;MACLI,CAAC,EAAE,CADE;MAELG,CAAC,EAAE,CAACV,cAAc,CAACmB,MAAhB,GAAyBf,OAFvB;MAGL,GAAGR;IAHE,CAAP;EAKD;;EAED,IAAIb,KAAK,GAAGmB,WAARnB,IAAuBA,KAAK,IAAIoB,SAApC,EAA+C;IAC7C,OAAO;MACLI,CAAC,EAAE,CADE;MAELG,CAAC,EAAEV,cAAc,CAACmB,MAAfnB,GAAwBI,OAFtB;MAGL,GAAGR;IAHE,CAAP;EAKD;;EAED,OAAO;IACLW,CAAC,EAAE,CADE;IAELG,CAAC,EAAE,CAFE;IAGL,GAAGd;EAHE,CAAP;AAlDK,CAAP;;AAyDA,SAASS,YAAT,CACEkB,WADF,EAEExC,KAFF,EAGEmB,WAHF;EAKE,MAAMS,WAAW,GAA2BY,WAAW,CAACxC,KAAD,CAAvD;EACA,MAAM6B,YAAY,GAA2BW,WAAW,CAACxC,KAAK,GAAG,CAAT,CAAxD;EACA,MAAM8B,QAAQ,GAA2BU,WAAW,CAACxC,KAAK,GAAG,CAAT,CAApD;;EAEA,IAAI,CAAC4B,WAAL,EAAkB;IAChB,OAAO,CAAP;EACD;;EAED,IAAIT,WAAW,GAAGnB,KAAlB,EAAyB;IACvB,OAAO6B,YAAY,GACfD,WAAW,CAACO,GAAZP,IAAmBC,YAAY,CAACM,GAAbN,GAAmBA,YAAY,CAACO,MAAnDR,CADe,GAEfE,QAAQ,GACRA,QAAQ,CAACK,GAATL,IAAgBF,WAAW,CAACO,GAAZP,GAAkBA,WAAW,CAACQ,MAA9CN,CADQ,GAER,CAJJ;EAKD;;EAED,OAAOA,QAAQ,GACXA,QAAQ,CAACK,GAATL,IAAgBF,WAAW,CAACO,GAAZP,GAAkBA,WAAW,CAACQ,MAA9CN,CADW,GAEXD,YAAY,GACZD,WAAW,CAACO,GAAZP,IAAmBC,YAAY,CAACM,GAAbN,GAAmBA,YAAY,CAACO,MAAnDR,CADY,GAEZ,CAJJ;AAKD;;AC5ED,MAAMa,SAAS,GAAG,UAAlB;AAcA,MAAaC,OAAO,gBAAGC,KAAK,CAACC,aAAND,CAAuC;EAC5DxB,WAAW,EAAE,CAAC,CAD8C;EAE5D0B,WAAW,EAAEJ,SAF+C;EAG5DK,iBAAiB,EAAE,KAHyC;EAI5DnD,KAAK,EAAE,EAJqD;EAK5DyB,SAAS,EAAE,CAAC,CALgD;EAM5D2B,cAAc,EAAE,KAN4C;EAO5DC,WAAW,EAAE,EAP+C;EAQ5DC,QAAQ,EAAElB,mBARkD;EAS5DrB,QAAQ,EAAE;IACRC,SAAS,EAAE,KADH;IAERC,SAAS,EAAE;EAFH;AATkD,CAAvC+B,CAAvB;;AAeA,SAAgBO,eAAhB,QAAgC;EAAA;IAC9BC,QAD8B;IAE9BpD,EAF8B;IAG9BJ,KAAK,EAAEyD,gBAHuB;IAI9BH,QAAQ,GAAGlB,mBAJmB;IAK9BrB,QAAQ,EAAE2C,YAAY,GAAG;EALK;EAO9B,MAAM;IACJC,MADI;IAEJC,WAFI;IAGJC,cAHI;IAIJC,IAJI;IAKJC,0BALI;IAMJC;EANI,IAOFC,aAAa,EAPjB;EAQA,MAAMf,WAAW,GAAGgB,WAAW,CAACpB,SAAD,EAAY1C,EAAZ,CAA/B;EACA,MAAMgD,cAAc,GAAGe,OAAO,CAACP,WAAW,CAACtD,IAAZsD,KAAqB,IAAtB,CAA9B;EACA,MAAM5D,KAAK,GAAGoE,OAAO,CACnB,MACEX,gBAAgB,CAACY,GAAjBZ,CAAsBa,IAAD,IACnB,OAAOA,IAAP,KAAgB,QAAhB,IAA4B,QAAQA,IAApC,GAA2CA,IAAI,CAAClE,EAAhD,GAAqDkE,IADvDb,CAFiB,EAKnB,CAACA,gBAAD,CALmB,CAArB;EAOA,MAAMc,UAAU,GAAGZ,MAAM,IAAI,IAA7B;EACA,MAAMnC,WAAW,GAAGmC,MAAM,GAAG3D,KAAK,CAACwE,OAANxE,CAAc2D,MAAM,CAACvD,EAArBJ,CAAH,GAA8B,CAAC,CAAzD;EACA,MAAMyB,SAAS,GAAGqC,IAAI,GAAG9D,KAAK,CAACwE,OAANxE,CAAc8D,IAAI,CAAC1D,EAAnBJ,CAAH,GAA4B,CAAC,CAAnD;EACA,MAAMyE,gBAAgB,GAAGC,MAAM,CAAC1E,KAAD,CAA/B;EACA,MAAM2E,gBAAgB,GAAG,CAACjE,UAAU,CAACV,KAAD,EAAQyE,gBAAgB,CAACG,OAAzB,CAApC;EACA,MAAMzB,iBAAiB,GACpB1B,SAAS,KAAK,CAAC,CAAfA,IAAoBD,WAAW,KAAK,CAAC,CAArCC,IAA2CkD,gBAD9C;EAEA,MAAM5D,QAAQ,GAAGD,iBAAiB,CAAC4C,YAAD,CAAlC;EAEAmB,yBAAyB,CAAC;IACxB,IAAIF,gBAAgB,IAAIJ,UAApBI,IAAkC,CAACX,kBAAvC,EAA2D;MACzDD,0BAA0B,CAAC/D,KAAD,CAA1B+D;IACD;EAHsB,GAItB,CACDY,gBADC,EAED3E,KAFC,EAGDuE,UAHC,EAIDR,0BAJC,EAKDC,kBALC,CAJsB,CAAzBa;EAYAC,SAAS,CAAC;IACRL,gBAAgB,CAACG,OAAjBH,GAA2BzE,KAA3ByE;EADO,GAEN,CAACzE,KAAD,CAFM,CAAT8E;EAIA,MAAMC,YAAY,GAAGX,OAAO,CAC1B,OAA0B;IACxB5C,WADwB;IAExB0B,WAFwB;IAGxBnC,QAHwB;IAIxBoC,iBAJwB;IAKxBnD,KALwB;IAMxByB,SANwB;IAOxB2B,cAPwB;IAQxBC,WAAW,EAAEtD,cAAc,CAACC,KAAD,EAAQ6D,cAAR,CARH;IASxBP;EATwB,CAA1B,CAD0B;EAa1B,CACE9B,WADF,EAEE0B,WAFF,EAGEnC,QAAQ,CAACC,SAHX,EAIED,QAAQ,CAACE,SAJX,EAKEkC,iBALF,EAMEnD,KANF,EAOEyB,SAPF,EAQEoC,cARF,EASET,cATF,EAUEE,QAVF,CAb0B,CAA5B;EA2BA,OAAON,oBAACD,OAAO,CAACiC,QAAThC;IAAkBiC,KAAK,EAAEF;EAAzB,GAAwCvB,QAAxCR,CAAP;AACD;;MChHYkC,qBAAqB,GAAmB;EAAA,IAAC;IACpD9E,EADoD;IAEpDJ,KAFoD;IAGpDwB,WAHoD;IAIpDC;EAJoD,CAAD;EAAA,OAK/CnC,SAAS,CAACU,KAAD,EAAQwB,WAAR,EAAqBC,SAArB,CAATnC,CAAyCkF,OAAzClF,CAAiDc,EAAjDd,CAL+C;AAAA;;AAOrD,MAAa6F,2BAA2B,GAAyB;EAAA,IAAC;IAChEjC,WADgE;IAEhEkC,SAFgE;IAGhEC,WAHgE;IAIhEhF,KAJgE;IAKhEL,KALgE;IAMhEsF,QANgE;IAOhEC,aAPgE;IAQhEC,mBARgE;IAShEC;EATgE,CAAD;;EAW/D,IAAI,CAACA,UAAD,IAAe,CAACJ,WAApB,EAAiC;IAC/B,OAAO,KAAP;EACD;;EAED,IAAIE,aAAa,KAAKvF,KAAlBuF,IAA2BlF,KAAK,KAAKiF,QAAzC,EAAmD;IACjD,OAAO,KAAP;EACD;;EAED,IAAIF,SAAJ,EAAe;IACb,OAAO,IAAP;EACD;;EAED,OAAOE,QAAQ,KAAKjF,KAAbiF,IAAsBpC,WAAW,KAAKsC,mBAA7C;AAvBK,CAAP;;AA0BA,MAAaE,iBAAiB,GAAuB;EACnDC,QAAQ,EAAE,GADyC;EAEnDC,MAAM,EAAE;AAF2C,CAArD;AAKA,MAAaC,kBAAkB,GAAG,WAAlC;AAEA,MAAaC,kBAAkB,gBAAGC,GAAG,CAACC,UAAJD,CAAeE,QAAfF,CAAwB;EACxDG,QAAQ,EAAEL,kBAD8C;EAExDF,QAAQ,EAAE,CAF8C;EAGxDC,MAAM,EAAE;AAHgD,CAAxBG,CAAlC;AAMA,MAAaI,iBAAiB,GAAG;EAC/BC,eAAe,EAAE;AADc,CAAjC;AC7CA;;;;;AAIA,SAAgBC,mBAAhB,QAAoC;EAAA;IAACtF,QAAD;IAAWV,KAAX;IAAkBiG,IAAlB;IAAwBhG;EAAxB;EAClC,MAAM,CAACiG,gBAAD,EAAmBC,mBAAnB,IAA0CC,QAAQ,CACtD,IADsD,CAAxD;EAGA,MAAMC,aAAa,GAAGhC,MAAM,CAACrE,KAAD,CAA5B;EAEAwE,yBAAyB,CAAC;IACxB,IAAI,CAAC9D,QAAD,IAAaV,KAAK,KAAKqG,aAAa,CAAC9B,OAArC,IAAgD0B,IAAI,CAAC1B,OAAzD,EAAkE;MAChE,MAAM+B,OAAO,GAAGrG,IAAI,CAACsE,OAArB;;MAEA,IAAI+B,OAAJ,EAAa;QACX,MAAM/B,OAAO,GAAGgC,aAAa,CAACN,IAAI,CAAC1B,OAAN,EAAe;UAC1CiC,eAAe,EAAE;QADyB,CAAf,CAA7B;QAIA,MAAMC,KAAK,GAAG;UACZjF,CAAC,EAAE8E,OAAO,CAAC7E,IAAR6E,GAAe/B,OAAO,CAAC9C,IADd;UAEZE,CAAC,EAAE2E,OAAO,CAACnE,GAARmE,GAAc/B,OAAO,CAACpC,GAFb;UAGZrB,MAAM,EAAEwF,OAAO,CAAC5E,KAAR4E,GAAgB/B,OAAO,CAAC7C,KAHpB;UAIZX,MAAM,EAAEuF,OAAO,CAAClE,MAARkE,GAAiB/B,OAAO,CAACnC;QAJrB,CAAd;;QAOA,IAAIqE,KAAK,CAACjF,CAANiF,IAAWA,KAAK,CAAC9E,CAArB,EAAwB;UACtBwE,mBAAmB,CAACM,KAAD,CAAnBN;QACD;MACF;IACF;;IAED,IAAInG,KAAK,KAAKqG,aAAa,CAAC9B,OAA5B,EAAqC;MACnC8B,aAAa,CAAC9B,OAAd8B,GAAwBrG,KAAxBqG;IACD;EAxBsB,GAyBtB,CAAC3F,QAAD,EAAWV,KAAX,EAAkBiG,IAAlB,EAAwBhG,IAAxB,CAzBsB,CAAzBuE;EA2BAC,SAAS,CAAC;IACR,IAAIyB,gBAAJ,EAAsB;MACpBQ,qBAAqB,CAAC;QACpBP,mBAAmB,CAAC,IAAD,CAAnBA;MADmB,EAArBO;IAGD;EALM,GAMN,CAACR,gBAAD,CANM,CAATzB;EAQA,OAAOyB,gBAAP;AACD;;SCnBeS,mBAAY;EAAA;IAC1BC,oBAAoB,GAAG9B,2BADG;IAE1B+B,UAAU,EAAEC,qBAFc;IAG1BpG,QAAQ,EAAEqG,aAHgB;IAI1BC,IAAI,EAAEC,UAJoB;IAK1BC,WAAW,GAAGrC,qBALY;IAM1B9E,EAN0B;IAO1BkD,QAAQ,EAAEkE,aAPgB;IAQ1BC,oBAR0B;IAS1BhC,UAAU,GAAGC;EATa;EAW1B,MAAM;IACJ1F,KADI;IAEJkD,WAFI;IAGJ1B,WAHI;IAIJT,QAAQ,EAAE2G,cAJN;IAKJvE,iBALI;IAMJE,WANI;IAOJ5B,SAPI;IAQJ2B,cARI;IASJE,QAAQ,EAAEqE;EATN,IAUFC,UAAU,CAAC7E,OAAD,CAVd;EAWA,MAAMhC,QAAQ,GAAa8G,sBAAsB,CAC/CT,aAD+C,EAE/CM,cAF+C,CAAjD;EAIA,MAAMrH,KAAK,GAAGL,KAAK,CAACwE,OAANxE,CAAcI,EAAdJ,CAAd;EACA,MAAMqH,IAAI,GAAGjD,OAAO,CAClB,OAAO;IAAC0D,QAAQ,EAAE;MAAC5E,WAAD;MAAc7C,KAAd;MAAqBL;IAArB,CAAX;IAAwC,GAAGsH;EAA3C,CAAP,CADkB,EAElB,CAACpE,WAAD,EAAcoE,UAAd,EAA0BjH,KAA1B,EAAiCL,KAAjC,CAFkB,CAApB;EAIA,MAAM+H,yBAAyB,GAAG3D,OAAO,CACvC,MAAMpE,KAAK,CAACL,KAANK,CAAYA,KAAK,CAACwE,OAANxE,CAAcI,EAAdJ,CAAZA,CADiC,EAEvC,CAACA,KAAD,EAAQI,EAAR,CAFuC,CAAzC;EAIA,MAAM;IAACE,IAAD;IAAOgG,IAAP;IAAa0B,MAAb;IAAqBC,UAAU,EAAEC;EAAjC,IAAwDC,YAAY,CAAC;IACzE/H,EADyE;IAEzEiH,IAFyE;IAGzEtG,QAAQ,EAAEA,QAAQ,CAACE,SAHsD;IAIzEwG,oBAAoB,EAAE;MACpBW,qBAAqB,EAAEL,yBADH;MAEpB,GAAGN;IAFiB;EAJmD,CAAD,CAA1E;EASA,MAAM;IACJ9D,MADI;IAEJ0E,cAFI;IAGJ/G,cAHI;IAIJ4F,UAJI;IAKJe,UAAU,EAAEK,mBALR;IAMJC,SANI;IAOJhE,UAPI;IAQJT,IARI;IASJ0E,mBATI;IAUJC;EAVI,IAWFC,YAAY,CAAC;IACftI,EADe;IAEfiH,IAFe;IAGfH,UAAU,EAAE,EACV,GAAGf,iBADO;MAEV,GAAGgB;IAFO,CAHG;IAOfpG,QAAQ,EAAEA,QAAQ,CAACC;EAPJ,CAAD,CAXhB;EAoBA,MAAMiH,UAAU,GAAGU,eAAe,CAACT,mBAAD,EAAsBI,mBAAtB,CAAlC;EACA,MAAMlD,SAAS,GAAGjB,OAAO,CAACR,MAAD,CAAzB;EACA,MAAMiF,YAAY,GAChBxD,SAAS,IACT,CAACjC,iBADDiC,IAEA3E,YAAY,CAACe,WAAD,CAFZ4D,IAGA3E,YAAY,CAACgB,SAAD,CAJd;EAKA,MAAMoH,wBAAwB,GAAG,CAACzF,cAAD,IAAmBmB,UAApD;EACA,MAAMuE,sBAAsB,GAC1BD,wBAAwB,IAAID,YAA5BC,GAA2CJ,SAA3CI,GAAuD,IADzD;EAEA,MAAMvF,QAAQ,GAAGkE,aAAH,QAAGA,mBAAiBG,cAAlC;EACA,MAAMoB,cAAc,GAAGH,YAAY,GAC/BE,sBAD+B,QAC/BA,4BACAxF,QAAQ,CAAC;IACPrD,KAAK,EAAEoD,WADA;IAEP/B,cAFO;IAGPE,WAHO;IAIPC,SAJO;IAKPpB;EALO,CAAD,CAFuB,GAS/B,IATJ;EAUA,MAAMiF,QAAQ,GACZ7E,YAAY,CAACe,WAAD,CAAZf,IAA6BA,YAAY,CAACgB,SAAD,CAAzChB,GACI8G,WAAW,CAAC;IAACnH,EAAD;IAAKJ,KAAL;IAAYwB,WAAZ;IAAyBC;EAAzB,CAAD,CADfhB,GAEIJ,KAHN;EAIA,MAAM2I,QAAQ,GAAGrF,MAAH,QAAGA,GAAH,MAAGA,SAAM,CAAEvD,EAAzB;EACA,MAAM6I,QAAQ,GAAGvE,MAAM,CAAC;IACtBsE,QADsB;IAEtBhJ,KAFsB;IAGtBsF,QAHsB;IAItBpC;EAJsB,CAAD,CAAvB;EAMA,MAAMyB,gBAAgB,GAAG3E,KAAK,KAAKiJ,QAAQ,CAACrE,OAATqE,CAAiBjJ,KAApD;EACA,MAAMkJ,0BAA0B,GAAGjC,oBAAoB,CAAC;IACtDtD,MADsD;IAEtDT,WAFsD;IAGtDqB,UAHsD;IAItDa,SAJsD;IAKtDhF,EALsD;IAMtDC,KANsD;IAOtDL,KAPsD;IAQtDsF,QAAQ,EAAE2D,QAAQ,CAACrE,OAATqE,CAAiB3D,QAR2B;IAStDC,aAAa,EAAE0D,QAAQ,CAACrE,OAATqE,CAAiBjJ,KATsB;IAUtDwF,mBAAmB,EAAEyD,QAAQ,CAACrE,OAATqE,CAAiB/F,WAVgB;IAWtDuC,UAXsD;IAYtDJ,WAAW,EAAE4D,QAAQ,CAACrE,OAATqE,CAAiBD,QAAjBC,IAA6B;EAZY,CAAD,CAAvD;EAeA,MAAM1C,gBAAgB,GAAGF,mBAAmB,CAAC;IAC3CtF,QAAQ,EAAE,CAACmI,0BADgC;IAE3C7I,KAF2C;IAG3CiG,IAH2C;IAI3ChG;EAJ2C,CAAD,CAA5C;EAOAwE,SAAS,CAAC;IACR,IAAIM,SAAS,IAAI6D,QAAQ,CAACrE,OAATqE,CAAiB3D,QAAjB2D,KAA8B3D,QAA/C,EAAyD;MACvD2D,QAAQ,CAACrE,OAATqE,CAAiB3D,QAAjB2D,GAA4B3D,QAA5B2D;IACD;;IAED,IAAI/F,WAAW,KAAK+F,QAAQ,CAACrE,OAATqE,CAAiB/F,WAArC,EAAkD;MAChD+F,QAAQ,CAACrE,OAATqE,CAAiB/F,WAAjB+F,GAA+B/F,WAA/B+F;IACD;;IAED,IAAIjJ,KAAK,KAAKiJ,QAAQ,CAACrE,OAATqE,CAAiBjJ,KAA/B,EAAsC;MACpCiJ,QAAQ,CAACrE,OAATqE,CAAiBjJ,KAAjBiJ,GAAyBjJ,KAAzBiJ;IACD;EAXM,GAYN,CAAC7D,SAAD,EAAYE,QAAZ,EAAsBpC,WAAtB,EAAmClD,KAAnC,CAZM,CAAT8E;EAcAA,SAAS,CAAC;IACR,IAAIkE,QAAQ,KAAKC,QAAQ,CAACrE,OAATqE,CAAiBD,QAAlC,EAA4C;MAC1C;IACD;;IAED,IAAIA,QAAQ,IAAI,CAACC,QAAQ,CAACrE,OAATqE,CAAiBD,QAAlC,EAA4C;MAC1CC,QAAQ,CAACrE,OAATqE,CAAiBD,QAAjBC,GAA4BD,QAA5BC;MACA;IACD;;IAED,MAAME,SAAS,GAAGC,UAAU,CAAC;MAC3BH,QAAQ,CAACrE,OAATqE,CAAiBD,QAAjBC,GAA4BD,QAA5BC;IAD0B,GAEzB,EAFyB,CAA5B;IAIA,OAAO,MAAMI,YAAY,CAACF,SAAD,CAAzB;EAdO,GAeN,CAACH,QAAD,CAfM,CAATlE;EAiBA,OAAO;IACLnB,MADK;IAELnC,WAFK;IAGL0F,UAHK;IAILG,IAJK;IAKL/G,IALK;IAMLD,KANK;IAOLiF,QAPK;IAQLtF,KARK;IASLgI,MATK;IAUL5C,SAVK;IAWLb,UAXK;IAYLgE,SAZK;IAaLjC,IAbK;IAcL7E,SAdK;IAeLqC,IAfK;IAgBLmE,UAhBK;IAiBLO,mBAjBK;IAkBLN,mBAlBK;IAmBLI,mBAnBK;IAoBLG,SAAS,EAAElC,gBAAF,QAAEA,sBAAoBwC,cApB1B;IAqBLtD,UAAU,EAAE6D,aAAa;EArBpB,CAAP;;EAwBA,SAASA,aAAT;IACE;IAEE/C,gBAAgB;IAEf5B,gBAAgB,IAAIsE,QAAQ,CAACrE,OAATqE,CAAiB3D,QAAjB2D,KAA8B5I,KAJrD,EAKE;MACA,OAAOyF,kBAAP;IACD;;IAED,IACG+C,wBAAwB,IAAI,CAACU,eAAe,CAAClB,cAAD,CAA5CQ,IACD,CAACpD,UAFH,EAGE;MACA,OAAO+D,SAAP;IACD;;IAED,IAAIpE,SAAS,IAAI8D,0BAAjB,EAA6C;MAC3C,OAAOnD,GAAG,CAACC,UAAJD,CAAeE,QAAfF,CAAwB,EAC7B,GAAGN,UAD0B;QAE7BS,QAAQ,EAAEL;MAFmB,CAAxBE,CAAP;IAID;;IAED,OAAOyD,SAAP;EACD;AACF;;AAED,SAAS3B,sBAAT,CACET,aADF,EAEEM,cAFF;;;EAIE,IAAI,OAAON,aAAP,KAAyB,SAA7B,EAAwC;IACtC,OAAO;MACLpG,SAAS,EAAEoG,aADN;MAEL;MACAnG,SAAS,EAAE;IAHN,CAAP;EAKD;;EAED,OAAO;IACLD,SAAS,2BAAEoG,aAAF,QAAEA,GAAF,MAAEA,gBAAa,CAAEpG,SAAjB,oCAA8B0G,cAAc,CAAC1G,SADjD;IAELC,SAAS,2BAAEmG,aAAF,QAAEA,GAAF,MAAEA,gBAAa,CAAEnG,SAAjB,oCAA8ByG,cAAc,CAACzG;EAFjD,CAAP;AAID;;SC5PewI,gBACdC;EAEA,IAAI,CAACA,KAAL,EAAY;IACV,OAAO,KAAP;EACD;;EAED,MAAMrC,IAAI,GAAGqC,KAAK,CAACrC,IAANqC,CAAW9E,OAAxB;;EAEA,IACEyC,IAAI,IACJ,cAAcA,IADdA,IAEA,OAAOA,IAAI,CAACS,QAAZ,KAAyB,QAFzBT,IAGA,iBAAiBA,IAAI,CAACS,QAHtBT,IAIA,WAAWA,IAAI,CAACS,QAJhBT,IAKA,WAAWA,IAAI,CAACS,QANlB,EAOE;IACA,OAAO,IAAP;EACD;;EAED,OAAO,KAAP;AACD;;ACbD,MAAM6B,UAAU,GAAa,CAC3BC,YAAY,CAACC,IADc,EAE3BD,YAAY,CAACE,KAFc,EAG3BF,YAAY,CAACG,EAHc,EAI3BH,YAAY,CAACI,IAJc,CAA7B;;AAOA,MAAaC,2BAA2B,GAA6B,CACnEC,KADmE;EAAA,IAEnE;IACEC,OAAO,EAAE;MACPxG,MADO;MAEPyG,aAFO;MAGPvG,cAHO;MAIPwG,mBAJO;MAKPvG,IALO;MAMPwG;IANO;EADX,CAFmE;;EAanE,IAAIX,UAAU,CAACY,QAAXZ,CAAoBO,KAAK,CAACM,IAA1Bb,CAAJ,EAAqC;IACnCO,KAAK,CAACO,cAANP;;IAEA,IAAI,CAACvG,MAAD,IAAW,CAACyG,aAAhB,EAA+B;MAC7B;IACD;;IAED,MAAMM,kBAAkB,GAAyB,EAAjD;IAEAL,mBAAmB,CAACM,UAApBN,GAAiCO,OAAjCP,CAA0CX,KAAD;MACvC,IAAI,CAACA,KAAD,KAAUA,KAAV,QAAUA,GAAV,MAAUA,QAAK,CAAE3I,QAAjB,CAAJ,EAA+B;QAC7B;MACD;;MAED,MAAMT,IAAI,GAAGuD,cAAc,CAACtD,GAAfsD,CAAmB6F,KAAK,CAACtJ,EAAzByD,CAAb;;MAEA,IAAI,CAACvD,IAAL,EAAW;QACT;MACD;;MAED,QAAQ4J,KAAK,CAACM,IAAd;QACE,KAAKZ,YAAY,CAACC,IAAlB;UACE,IAAIO,aAAa,CAAC5H,GAAd4H,GAAoB9J,IAAI,CAACkC,GAA7B,EAAkC;YAChCkI,kBAAkB,CAACG,IAAnBH,CAAwBhB,KAAxBgB;UACD;;UACD;;QACF,KAAKd,YAAY,CAACG,EAAlB;UACE,IAAIK,aAAa,CAAC5H,GAAd4H,GAAoB9J,IAAI,CAACkC,GAA7B,EAAkC;YAChCkI,kBAAkB,CAACG,IAAnBH,CAAwBhB,KAAxBgB;UACD;;UACD;;QACF,KAAKd,YAAY,CAACI,IAAlB;UACE,IAAII,aAAa,CAACtI,IAAdsI,GAAqB9J,IAAI,CAACwB,IAA9B,EAAoC;YAClC4I,kBAAkB,CAACG,IAAnBH,CAAwBhB,KAAxBgB;UACD;;UACD;;QACF,KAAKd,YAAY,CAACE,KAAlB;UACE,IAAIM,aAAa,CAACtI,IAAdsI,GAAqB9J,IAAI,CAACwB,IAA9B,EAAoC;YAClC4I,kBAAkB,CAACG,IAAnBH,CAAwBhB,KAAxBgB;UACD;;UACD;MApBJ;IAXF;IAmCA,MAAMI,UAAU,GAAGC,cAAc,CAAC;MAChCpH,MADgC;MAEhCyG,aAAa,EAAEA,aAFiB;MAGhCvG,cAHgC;MAIhCwG,mBAAmB,EAAEK,kBAJW;MAKhCM,kBAAkB,EAAE;IALY,CAAD,CAAjC;IAOA,IAAIC,SAAS,GAAGC,iBAAiB,CAACJ,UAAD,EAAa,IAAb,CAAjC;;IAEA,IAAIG,SAAS,MAAKnH,IAAL,QAAKA,GAAL,MAAKA,OAAI,CAAE1D,EAAX,CAAT6K,IAA0BH,UAAU,CAACjL,MAAXiL,GAAoB,CAAlD,EAAqD;MACnDG,SAAS,GAAGH,UAAU,CAAC,CAAD,CAAVA,CAAc1K,EAA1B6K;IACD;;IAED,IAAIA,SAAS,IAAI,IAAjB,EAAuB;MACrB,MAAME,eAAe,GAAGd,mBAAmB,CAAC9J,GAApB8J,CAAwB1G,MAAM,CAACvD,EAA/BiK,CAAxB;MACA,MAAMe,YAAY,GAAGf,mBAAmB,CAAC9J,GAApB8J,CAAwBY,SAAxBZ,CAArB;MACA,MAAM9H,OAAO,GAAG6I,YAAY,GAAGvH,cAAc,CAACtD,GAAfsD,CAAmBuH,YAAY,CAAChL,EAAhCyD,CAAH,GAAyC,IAArE;MACA,MAAMwH,OAAO,GAAGD,YAAH,QAAGA,GAAH,MAAGA,eAAY,CAAE9E,IAAd8E,CAAmBxG,OAAnC;;MAEA,IAAIyG,OAAO,IAAI9I,OAAX8I,IAAsBF,eAAtBE,IAAyCD,YAA7C,EAA2D;QACzD,MAAME,kBAAkB,GAAGC,sBAAsB,CAACF,OAAD,CAAjD;QACA,MAAMG,2BAA2B,GAAGF,kBAAkB,CAACG,IAAnBH,CAClC,CAACI,OAAD,EAAUrL,KAAV,KAAoBiK,mBAAmB,CAACjK,KAAD,CAAnBiK,KAA+BoB,OADjBJ,CAApC;QAGA,MAAMK,gBAAgB,GAAGC,eAAe,CAACT,eAAD,EAAkBC,YAAlB,CAAxC;QACA,MAAMS,aAAa,GAAGC,OAAO,CAACX,eAAD,EAAkBC,YAAlB,CAA7B;QACA,MAAMW,MAAM,GACVP,2BAA2B,IAAI,CAACG,gBAAhCH,GACI;UACE3J,CAAC,EAAE,CADL;UAEEG,CAAC,EAAE;QAFL,CADJwJ,GAKI;UACE3J,CAAC,EAAEgK,aAAa,GAAGzB,aAAa,CAACrI,KAAdqI,GAAsB7H,OAAO,CAACR,KAAjC,GAAyC,CAD3D;UAEEC,CAAC,EAAE6J,aAAa,GAAGzB,aAAa,CAAC3H,MAAd2H,GAAuB7H,OAAO,CAACE,MAAlC,GAA2C;QAF7D,CANN;QAUA,MAAMuJ,eAAe,GAAG;UACtBnK,CAAC,EAAEU,OAAO,CAACT,IADW;UAEtBE,CAAC,EAAEO,OAAO,CAACC;QAFW,CAAxB;QAKA,MAAMyJ,cAAc,GAClBF,MAAM,CAAClK,CAAPkK,IAAYA,MAAM,CAAC/J,CAAnB+J,GACIC,eADJD,GAEIG,QAAQ,CAACF,eAAD,EAAkBD,MAAlB,CAHd;QAKA,OAAOE,cAAP;MACD;IACF;EACF;;EAED,OAAOzC,SAAP;AA5GK,CAAP;;AA+GA,SAASoC,eAAT,CAAyBjL,CAAzB,EAAgDC,CAAhD;EACE,IAAI,CAAC6I,eAAe,CAAC9I,CAAD,CAAhB,IAAuB,CAAC8I,eAAe,CAAC7I,CAAD,CAA3C,EAAgD;IAC9C,OAAO,KAAP;EACD;;EAED,OACED,CAAC,CAAC0G,IAAF1G,CAAOiE,OAAPjE,CAAemH,QAAfnH,CAAwBuC,WAAxBvC,KAAwCC,CAAC,CAACyG,IAAFzG,CAAOgE,OAAPhE,CAAekH,QAAflH,CAAwBsC,WADlE;AAGD;;AAED,SAAS4I,OAAT,CAAiBnL,CAAjB,EAAwCC,CAAxC;EACE,IAAI,CAAC6I,eAAe,CAAC9I,CAAD,CAAhB,IAAuB,CAAC8I,eAAe,CAAC7I,CAAD,CAA3C,EAAgD;IAC9C,OAAO,KAAP;EACD;;EAED,IAAI,CAACgL,eAAe,CAACjL,CAAD,EAAIC,CAAJ,CAApB,EAA4B;IAC1B,OAAO,KAAP;EACD;;EAED,OAAOD,CAAC,CAAC0G,IAAF1G,CAAOiE,OAAPjE,CAAemH,QAAfnH,CAAwBN,KAAxBM,GAAgCC,CAAC,CAACyG,IAAFzG,CAAOgE,OAAPhE,CAAekH,QAAflH,CAAwBP,KAA/D;AACD","names":["arrayMove","array","from","to","newArray","slice","splice","length","arraySwap","getSortedRects","items","rects","reduce","accumulator","id","index","rect","get","Array","isValidIndex","itemsEqual","a","b","i","normalizeDisabled","disabled","draggable","droppable","defaultScale","scaleX","scaleY","horizontalListSortingStrategy","activeNodeRect","fallbackActiveRect","activeIndex","overIndex","itemGap","getItemGap","newIndexRect","x","left","width","y","currentRect","previousRect","nextRect","rectSortingStrategy","newRects","oldRect","newRect","top","height","rectSwappingStrategy","verticalListSortingStrategy","overIndexRect","clientRects","ID_PREFIX","Context","React","createContext","containerId","disableTransforms","useDragOverlay","sortedRects","strategy","SortableContext","children","userDefinedItems","disabledProp","active","dragOverlay","droppableRects","over","measureDroppableContainers","measuringScheduled","useDndContext","useUniqueId","Boolean","useMemo","map","item","isDragging","indexOf","previousItemsRef","useRef","itemsHaveChanged","current","useIsomorphicLayoutEffect","useEffect","contextValue","Provider","value","defaultNewIndexGetter","defaultAnimateLayoutChanges","isSorting","wasDragging","newIndex","previousItems","previousContainerId","transition","defaultTransition","duration","easing","transitionProperty","disabledTransition","CSS","Transition","toString","property","defaultAttributes","roleDescription","useDerivedTransform","node","derivedTransform","setDerivedtransform","useState","previousIndex","initial","getClientRect","ignoreTransform","delta","requestAnimationFrame","useSortable","animateLayoutChanges","attributes","userDefinedAttributes","localDisabled","data","customData","getNewIndex","localStrategy","resizeObserverConfig","globalDisabled","globalStrategy","useContext","normalizeLocalDisabled","sortable","itemsAfterCurrentSortable","isOver","setNodeRef","setDroppableNodeRef","useDroppable","updateMeasurementsFor","activatorEvent","setDraggableNodeRef","listeners","setActivatorNodeRef","transform","useDraggable","useCombinedRefs","displaceItem","shouldDisplaceDragSource","dragSourceDisplacement","finalTransform","activeId","previous","shouldAnimateLayoutChanges","timeoutId","setTimeout","clearTimeout","getTransition","isKeyboardEvent","undefined","hasSortableData","entry","directions","KeyboardCode","Down","Right","Up","Left","sortableKeyboardCoordinates","event","context","collisionRect","droppableContainers","scrollableAncestors","includes","code","preventDefault","filteredContainers","getEnabled","forEach","push","collisions","closestCorners","pointerCoordinates","closestId","getFirstCollision","activeDroppable","newDroppable","newNode","newScrollAncestors","getScrollableAncestors","hasDifferentScrollAncestors","some","element","hasSameContainer","isSameContainer","isAfterActive","isAfter","offset","rectCoordinates","newCoordinates","subtract"],"sources":["/Users/patrice/Desktop/SP/Code/GitHub/tp-metro-count4u/node_modules/@dnd-kit/sortable/src/utilities/arrayMove.ts","/Users/patrice/Desktop/SP/Code/GitHub/tp-metro-count4u/node_modules/@dnd-kit/sortable/src/utilities/arraySwap.ts","/Users/patrice/Desktop/SP/Code/GitHub/tp-metro-count4u/node_modules/@dnd-kit/sortable/src/utilities/getSortedRects.ts","/Users/patrice/Desktop/SP/Code/GitHub/tp-metro-count4u/node_modules/@dnd-kit/sortable/src/utilities/isValidIndex.ts","/Users/patrice/Desktop/SP/Code/GitHub/tp-metro-count4u/node_modules/@dnd-kit/sortable/src/utilities/itemsEqual.ts","/Users/patrice/Desktop/SP/Code/GitHub/tp-metro-count4u/node_modules/@dnd-kit/sortable/src/utilities/normalizeDisabled.ts","/Users/patrice/Desktop/SP/Code/GitHub/tp-metro-count4u/node_modules/@dnd-kit/sortable/src/strategies/horizontalListSorting.ts","/Users/patrice/Desktop/SP/Code/GitHub/tp-metro-count4u/node_modules/@dnd-kit/sortable/src/strategies/rectSorting.ts","/Users/patrice/Desktop/SP/Code/GitHub/tp-metro-count4u/node_modules/@dnd-kit/sortable/src/strategies/rectSwapping.ts","/Users/patrice/Desktop/SP/Code/GitHub/tp-metro-count4u/node_modules/@dnd-kit/sortable/src/strategies/verticalListSorting.ts","/Users/patrice/Desktop/SP/Code/GitHub/tp-metro-count4u/node_modules/@dnd-kit/sortable/src/components/SortableContext.tsx","/Users/patrice/Desktop/SP/Code/GitHub/tp-metro-count4u/node_modules/@dnd-kit/sortable/src/hooks/defaults.ts","/Users/patrice/Desktop/SP/Code/GitHub/tp-metro-count4u/node_modules/@dnd-kit/sortable/src/hooks/utilities/useDerivedTransform.ts","/Users/patrice/Desktop/SP/Code/GitHub/tp-metro-count4u/node_modules/@dnd-kit/sortable/src/hooks/useSortable.ts","/Users/patrice/Desktop/SP/Code/GitHub/tp-metro-count4u/node_modules/@dnd-kit/sortable/src/types/type-guard.ts","/Users/patrice/Desktop/SP/Code/GitHub/tp-metro-count4u/node_modules/@dnd-kit/sortable/src/sensors/keyboard/sortableKeyboardCoordinates.ts"],"sourcesContent":["/**\n * Move an array item to a different position. Returns a new array with the item moved to the new position.\n */\nexport function arrayMove<T>(array: T[], from: number, to: number): T[] {\n  const newArray = array.slice();\n  newArray.splice(\n    to < 0 ? newArray.length + to : to,\n    0,\n    newArray.splice(from, 1)[0]\n  );\n\n  return newArray;\n}\n","/**\n * Swap an array item to a different position. Returns a new array with the item swapped to the new position.\n */\nexport function arraySwap<T>(array: T[], from: number, to: number): T[] {\n  const newArray = array.slice();\n\n  newArray[from] = array[to];\n  newArray[to] = array[from];\n\n  return newArray;\n}\n","import type {\n  ClientRect,\n  UniqueIdentifier,\n  UseDndContextReturnValue,\n} from '@dnd-kit/core';\n\nexport function getSortedRects(\n  items: UniqueIdentifier[],\n  rects: UseDndContextReturnValue['droppableRects']\n) {\n  return items.reduce<ClientRect[]>((accumulator, id, index) => {\n    const rect = rects.get(id);\n\n    if (rect) {\n      accumulator[index] = rect;\n    }\n\n    return accumulator;\n  }, Array(items.length));\n}\n","export function isValidIndex(index: number | null): index is number {\n  return index !== null && index >= 0;\n}\n","import type {UniqueIdentifier} from '@dnd-kit/core';\n\nexport function itemsEqual(a: UniqueIdentifier[], b: UniqueIdentifier[]) {\n  if (a === b) {\n    return true;\n  }\n\n  if (a.length !== b.length) {\n    return false;\n  }\n\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] !== b[i]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n","import type {Disabled} from '../types';\n\nexport function normalizeDisabled(disabled: boolean | Disabled): Disabled {\n  if (typeof disabled === 'boolean') {\n    return {\n      draggable: disabled,\n      droppable: disabled,\n    };\n  }\n\n  return disabled;\n}\n","import type {ClientRect} from '@dnd-kit/core';\nimport type {SortingStrategy} from '../types';\n\n// To-do: We should be calculating scale transformation\nconst defaultScale = {\n  scaleX: 1,\n  scaleY: 1,\n};\n\nexport const horizontalListSortingStrategy: SortingStrategy = ({\n  rects,\n  activeNodeRect: fallbackActiveRect,\n  activeIndex,\n  overIndex,\n  index,\n}) => {\n  const activeNodeRect = rects[activeIndex] ?? fallbackActiveRect;\n\n  if (!activeNodeRect) {\n    return null;\n  }\n\n  const itemGap = getItemGap(rects, index, activeIndex);\n\n  if (index === activeIndex) {\n    const newIndexRect = rects[overIndex];\n\n    if (!newIndexRect) {\n      return null;\n    }\n\n    return {\n      x:\n        activeIndex < overIndex\n          ? newIndexRect.left +\n            newIndexRect.width -\n            (activeNodeRect.left + activeNodeRect.width)\n          : newIndexRect.left - activeNodeRect.left,\n      y: 0,\n      ...defaultScale,\n    };\n  }\n\n  if (index > activeIndex && index <= overIndex) {\n    return {\n      x: -activeNodeRect.width - itemGap,\n      y: 0,\n      ...defaultScale,\n    };\n  }\n\n  if (index < activeIndex && index >= overIndex) {\n    return {\n      x: activeNodeRect.width + itemGap,\n      y: 0,\n      ...defaultScale,\n    };\n  }\n\n  return {\n    x: 0,\n    y: 0,\n    ...defaultScale,\n  };\n};\n\nfunction getItemGap(rects: ClientRect[], index: number, activeIndex: number) {\n  const currentRect: ClientRect | undefined = rects[index];\n  const previousRect: ClientRect | undefined = rects[index - 1];\n  const nextRect: ClientRect | undefined = rects[index + 1];\n\n  if (!currentRect || (!previousRect && !nextRect)) {\n    return 0;\n  }\n\n  if (activeIndex < index) {\n    return previousRect\n      ? currentRect.left - (previousRect.left + previousRect.width)\n      : nextRect.left - (currentRect.left + currentRect.width);\n  }\n\n  return nextRect\n    ? nextRect.left - (currentRect.left + currentRect.width)\n    : currentRect.left - (previousRect.left + previousRect.width);\n}\n","import {arrayMove} from '../utilities';\nimport type {SortingStrategy} from '../types';\n\nexport const rectSortingStrategy: SortingStrategy = ({\n  rects,\n  activeIndex,\n  overIndex,\n  index,\n}) => {\n  const newRects = arrayMove(rects, overIndex, activeIndex);\n\n  const oldRect = rects[index];\n  const newRect = newRects[index];\n\n  if (!newRect || !oldRect) {\n    return null;\n  }\n\n  return {\n    x: newRect.left - oldRect.left,\n    y: newRect.top - oldRect.top,\n    scaleX: newRect.width / oldRect.width,\n    scaleY: newRect.height / oldRect.height,\n  };\n};\n","import type {SortingStrategy} from '../types';\n\nexport const rectSwappingStrategy: SortingStrategy = ({\n  activeIndex,\n  index,\n  rects,\n  overIndex,\n}) => {\n  let oldRect;\n  let newRect;\n\n  if (index === activeIndex) {\n    oldRect = rects[index];\n    newRect = rects[overIndex];\n  }\n\n  if (index === overIndex) {\n    oldRect = rects[index];\n    newRect = rects[activeIndex];\n  }\n\n  if (!newRect || !oldRect) {\n    return null;\n  }\n\n  return {\n    x: newRect.left - oldRect.left,\n    y: newRect.top - oldRect.top,\n    scaleX: newRect.width / oldRect.width,\n    scaleY: newRect.height / oldRect.height,\n  };\n};\n","import type {ClientRect} from '@dnd-kit/core';\nimport type {SortingStrategy} from '../types';\n\n// To-do: We should be calculating scale transformation\nconst defaultScale = {\n  scaleX: 1,\n  scaleY: 1,\n};\n\nexport const verticalListSortingStrategy: SortingStrategy = ({\n  activeIndex,\n  activeNodeRect: fallbackActiveRect,\n  index,\n  rects,\n  overIndex,\n}) => {\n  const activeNodeRect = rects[activeIndex] ?? fallbackActiveRect;\n\n  if (!activeNodeRect) {\n    return null;\n  }\n\n  if (index === activeIndex) {\n    const overIndexRect = rects[overIndex];\n\n    if (!overIndexRect) {\n      return null;\n    }\n\n    return {\n      x: 0,\n      y:\n        activeIndex < overIndex\n          ? overIndexRect.top +\n            overIndexRect.height -\n            (activeNodeRect.top + activeNodeRect.height)\n          : overIndexRect.top - activeNodeRect.top,\n      ...defaultScale,\n    };\n  }\n\n  const itemGap = getItemGap(rects, index, activeIndex);\n\n  if (index > activeIndex && index <= overIndex) {\n    return {\n      x: 0,\n      y: -activeNodeRect.height - itemGap,\n      ...defaultScale,\n    };\n  }\n\n  if (index < activeIndex && index >= overIndex) {\n    return {\n      x: 0,\n      y: activeNodeRect.height + itemGap,\n      ...defaultScale,\n    };\n  }\n\n  return {\n    x: 0,\n    y: 0,\n    ...defaultScale,\n  };\n};\n\nfunction getItemGap(\n  clientRects: ClientRect[],\n  index: number,\n  activeIndex: number\n) {\n  const currentRect: ClientRect | undefined = clientRects[index];\n  const previousRect: ClientRect | undefined = clientRects[index - 1];\n  const nextRect: ClientRect | undefined = clientRects[index + 1];\n\n  if (!currentRect) {\n    return 0;\n  }\n\n  if (activeIndex < index) {\n    return previousRect\n      ? currentRect.top - (previousRect.top + previousRect.height)\n      : nextRect\n      ? nextRect.top - (currentRect.top + currentRect.height)\n      : 0;\n  }\n\n  return nextRect\n    ? nextRect.top - (currentRect.top + currentRect.height)\n    : previousRect\n    ? currentRect.top - (previousRect.top + previousRect.height)\n    : 0;\n}\n","import React, {useEffect, useMemo, useRef} from 'react';\nimport {useDndContext, ClientRect, UniqueIdentifier} from '@dnd-kit/core';\nimport {useIsomorphicLayoutEffect, useUniqueId} from '@dnd-kit/utilities';\n\nimport type {Disabled, SortingStrategy} from '../types';\nimport {getSortedRects, itemsEqual, normalizeDisabled} from '../utilities';\nimport {rectSortingStrategy} from '../strategies';\n\nexport interface Props {\n  children: React.ReactNode;\n  items: (UniqueIdentifier | {id: UniqueIdentifier})[];\n  strategy?: SortingStrategy;\n  id?: string;\n  disabled?: boolean | Disabled;\n}\n\nconst ID_PREFIX = 'Sortable';\n\ninterface ContextDescriptor {\n  activeIndex: number;\n  containerId: string;\n  disabled: Disabled;\n  disableTransforms: boolean;\n  items: UniqueIdentifier[];\n  overIndex: number;\n  useDragOverlay: boolean;\n  sortedRects: ClientRect[];\n  strategy: SortingStrategy;\n}\n\nexport const Context = React.createContext<ContextDescriptor>({\n  activeIndex: -1,\n  containerId: ID_PREFIX,\n  disableTransforms: false,\n  items: [],\n  overIndex: -1,\n  useDragOverlay: false,\n  sortedRects: [],\n  strategy: rectSortingStrategy,\n  disabled: {\n    draggable: false,\n    droppable: false,\n  },\n});\n\nexport function SortableContext({\n  children,\n  id,\n  items: userDefinedItems,\n  strategy = rectSortingStrategy,\n  disabled: disabledProp = false,\n}: Props) {\n  const {\n    active,\n    dragOverlay,\n    droppableRects,\n    over,\n    measureDroppableContainers,\n    measuringScheduled,\n  } = useDndContext();\n  const containerId = useUniqueId(ID_PREFIX, id);\n  const useDragOverlay = Boolean(dragOverlay.rect !== null);\n  const items = useMemo<UniqueIdentifier[]>(\n    () =>\n      userDefinedItems.map((item) =>\n        typeof item === 'object' && 'id' in item ? item.id : item\n      ),\n    [userDefinedItems]\n  );\n  const isDragging = active != null;\n  const activeIndex = active ? items.indexOf(active.id) : -1;\n  const overIndex = over ? items.indexOf(over.id) : -1;\n  const previousItemsRef = useRef(items);\n  const itemsHaveChanged = !itemsEqual(items, previousItemsRef.current);\n  const disableTransforms =\n    (overIndex !== -1 && activeIndex === -1) || itemsHaveChanged;\n  const disabled = normalizeDisabled(disabledProp);\n\n  useIsomorphicLayoutEffect(() => {\n    if (itemsHaveChanged && isDragging && !measuringScheduled) {\n      measureDroppableContainers(items);\n    }\n  }, [\n    itemsHaveChanged,\n    items,\n    isDragging,\n    measureDroppableContainers,\n    measuringScheduled,\n  ]);\n\n  useEffect(() => {\n    previousItemsRef.current = items;\n  }, [items]);\n\n  const contextValue = useMemo(\n    (): ContextDescriptor => ({\n      activeIndex,\n      containerId,\n      disabled,\n      disableTransforms,\n      items,\n      overIndex,\n      useDragOverlay,\n      sortedRects: getSortedRects(items, droppableRects),\n      strategy,\n    }),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n      activeIndex,\n      containerId,\n      disabled.draggable,\n      disabled.droppable,\n      disableTransforms,\n      items,\n      overIndex,\n      droppableRects,\n      useDragOverlay,\n      strategy,\n    ]\n  );\n\n  return <Context.Provider value={contextValue}>{children}</Context.Provider>;\n}\n","import {CSS} from '@dnd-kit/utilities';\n\nimport {arrayMove} from '../utilities';\n\nimport type {\n  AnimateLayoutChanges,\n  NewIndexGetter,\n  SortableTransition,\n} from './types';\n\nexport const defaultNewIndexGetter: NewIndexGetter = ({\n  id,\n  items,\n  activeIndex,\n  overIndex,\n}) => arrayMove(items, activeIndex, overIndex).indexOf(id);\n\nexport const defaultAnimateLayoutChanges: AnimateLayoutChanges = ({\n  containerId,\n  isSorting,\n  wasDragging,\n  index,\n  items,\n  newIndex,\n  previousItems,\n  previousContainerId,\n  transition,\n}) => {\n  if (!transition || !wasDragging) {\n    return false;\n  }\n\n  if (previousItems !== items && index === newIndex) {\n    return false;\n  }\n\n  if (isSorting) {\n    return true;\n  }\n\n  return newIndex !== index && containerId === previousContainerId;\n};\n\nexport const defaultTransition: SortableTransition = {\n  duration: 200,\n  easing: 'ease',\n};\n\nexport const transitionProperty = 'transform';\n\nexport const disabledTransition = CSS.Transition.toString({\n  property: transitionProperty,\n  duration: 0,\n  easing: 'linear',\n});\n\nexport const defaultAttributes = {\n  roleDescription: 'sortable',\n};\n","import {useEffect, useRef, useState} from 'react';\nimport {getClientRect, ClientRect} from '@dnd-kit/core';\nimport {Transform, useIsomorphicLayoutEffect} from '@dnd-kit/utilities';\n\ninterface Arguments {\n  rect: React.MutableRefObject<ClientRect | null>;\n  disabled: boolean;\n  index: number;\n  node: React.MutableRefObject<HTMLElement | null>;\n}\n\n/*\n * When the index of an item changes while sorting,\n * we need to temporarily disable the transforms\n */\nexport function useDerivedTransform({disabled, index, node, rect}: Arguments) {\n  const [derivedTransform, setDerivedtransform] = useState<Transform | null>(\n    null\n  );\n  const previousIndex = useRef(index);\n\n  useIsomorphicLayoutEffect(() => {\n    if (!disabled && index !== previousIndex.current && node.current) {\n      const initial = rect.current;\n\n      if (initial) {\n        const current = getClientRect(node.current, {\n          ignoreTransform: true,\n        });\n\n        const delta = {\n          x: initial.left - current.left,\n          y: initial.top - current.top,\n          scaleX: initial.width / current.width,\n          scaleY: initial.height / current.height,\n        };\n\n        if (delta.x || delta.y) {\n          setDerivedtransform(delta);\n        }\n      }\n    }\n\n    if (index !== previousIndex.current) {\n      previousIndex.current = index;\n    }\n  }, [disabled, index, node, rect]);\n\n  useEffect(() => {\n    if (derivedTransform) {\n      requestAnimationFrame(() => {\n        setDerivedtransform(null);\n      });\n    }\n  }, [derivedTransform]);\n\n  return derivedTransform;\n}\n","import {useContext, useEffect, useMemo, useRef} from 'react';\nimport {\n  useDraggable,\n  useDroppable,\n  UseDraggableArguments,\n  UseDroppableArguments,\n} from '@dnd-kit/core';\nimport type {Data} from '@dnd-kit/core';\nimport {CSS, isKeyboardEvent, useCombinedRefs} from '@dnd-kit/utilities';\n\nimport {Context} from '../components';\nimport type {Disabled, SortableData, SortingStrategy} from '../types';\nimport {isValidIndex} from '../utilities';\nimport {\n  defaultAnimateLayoutChanges,\n  defaultAttributes,\n  defaultNewIndexGetter,\n  defaultTransition,\n  disabledTransition,\n  transitionProperty,\n} from './defaults';\nimport type {\n  AnimateLayoutChanges,\n  NewIndexGetter,\n  SortableTransition,\n} from './types';\nimport {useDerivedTransform} from './utilities';\n\nexport interface Arguments\n  extends Omit<UseDraggableArguments, 'disabled'>,\n    Pick<UseDroppableArguments, 'resizeObserverConfig'> {\n  animateLayoutChanges?: AnimateLayoutChanges;\n  disabled?: boolean | Disabled;\n  getNewIndex?: NewIndexGetter;\n  strategy?: SortingStrategy;\n  transition?: SortableTransition | null;\n}\n\nexport function useSortable({\n  animateLayoutChanges = defaultAnimateLayoutChanges,\n  attributes: userDefinedAttributes,\n  disabled: localDisabled,\n  data: customData,\n  getNewIndex = defaultNewIndexGetter,\n  id,\n  strategy: localStrategy,\n  resizeObserverConfig,\n  transition = defaultTransition,\n}: Arguments) {\n  const {\n    items,\n    containerId,\n    activeIndex,\n    disabled: globalDisabled,\n    disableTransforms,\n    sortedRects,\n    overIndex,\n    useDragOverlay,\n    strategy: globalStrategy,\n  } = useContext(Context);\n  const disabled: Disabled = normalizeLocalDisabled(\n    localDisabled,\n    globalDisabled\n  );\n  const index = items.indexOf(id);\n  const data = useMemo<SortableData & Data>(\n    () => ({sortable: {containerId, index, items}, ...customData}),\n    [containerId, customData, index, items]\n  );\n  const itemsAfterCurrentSortable = useMemo(\n    () => items.slice(items.indexOf(id)),\n    [items, id]\n  );\n  const {rect, node, isOver, setNodeRef: setDroppableNodeRef} = useDroppable({\n    id,\n    data,\n    disabled: disabled.droppable,\n    resizeObserverConfig: {\n      updateMeasurementsFor: itemsAfterCurrentSortable,\n      ...resizeObserverConfig,\n    },\n  });\n  const {\n    active,\n    activatorEvent,\n    activeNodeRect,\n    attributes,\n    setNodeRef: setDraggableNodeRef,\n    listeners,\n    isDragging,\n    over,\n    setActivatorNodeRef,\n    transform,\n  } = useDraggable({\n    id,\n    data,\n    attributes: {\n      ...defaultAttributes,\n      ...userDefinedAttributes,\n    },\n    disabled: disabled.draggable,\n  });\n  const setNodeRef = useCombinedRefs(setDroppableNodeRef, setDraggableNodeRef);\n  const isSorting = Boolean(active);\n  const displaceItem =\n    isSorting &&\n    !disableTransforms &&\n    isValidIndex(activeIndex) &&\n    isValidIndex(overIndex);\n  const shouldDisplaceDragSource = !useDragOverlay && isDragging;\n  const dragSourceDisplacement =\n    shouldDisplaceDragSource && displaceItem ? transform : null;\n  const strategy = localStrategy ?? globalStrategy;\n  const finalTransform = displaceItem\n    ? dragSourceDisplacement ??\n      strategy({\n        rects: sortedRects,\n        activeNodeRect,\n        activeIndex,\n        overIndex,\n        index,\n      })\n    : null;\n  const newIndex =\n    isValidIndex(activeIndex) && isValidIndex(overIndex)\n      ? getNewIndex({id, items, activeIndex, overIndex})\n      : index;\n  const activeId = active?.id;\n  const previous = useRef({\n    activeId,\n    items,\n    newIndex,\n    containerId,\n  });\n  const itemsHaveChanged = items !== previous.current.items;\n  const shouldAnimateLayoutChanges = animateLayoutChanges({\n    active,\n    containerId,\n    isDragging,\n    isSorting,\n    id,\n    index,\n    items,\n    newIndex: previous.current.newIndex,\n    previousItems: previous.current.items,\n    previousContainerId: previous.current.containerId,\n    transition,\n    wasDragging: previous.current.activeId != null,\n  });\n\n  const derivedTransform = useDerivedTransform({\n    disabled: !shouldAnimateLayoutChanges,\n    index,\n    node,\n    rect,\n  });\n\n  useEffect(() => {\n    if (isSorting && previous.current.newIndex !== newIndex) {\n      previous.current.newIndex = newIndex;\n    }\n\n    if (containerId !== previous.current.containerId) {\n      previous.current.containerId = containerId;\n    }\n\n    if (items !== previous.current.items) {\n      previous.current.items = items;\n    }\n  }, [isSorting, newIndex, containerId, items]);\n\n  useEffect(() => {\n    if (activeId === previous.current.activeId) {\n      return;\n    }\n\n    if (activeId && !previous.current.activeId) {\n      previous.current.activeId = activeId;\n      return;\n    }\n\n    const timeoutId = setTimeout(() => {\n      previous.current.activeId = activeId;\n    }, 50);\n\n    return () => clearTimeout(timeoutId);\n  }, [activeId]);\n\n  return {\n    active,\n    activeIndex,\n    attributes,\n    data,\n    rect,\n    index,\n    newIndex,\n    items,\n    isOver,\n    isSorting,\n    isDragging,\n    listeners,\n    node,\n    overIndex,\n    over,\n    setNodeRef,\n    setActivatorNodeRef,\n    setDroppableNodeRef,\n    setDraggableNodeRef,\n    transform: derivedTransform ?? finalTransform,\n    transition: getTransition(),\n  };\n\n  function getTransition() {\n    if (\n      // Temporarily disable transitions for a single frame to set up derived transforms\n      derivedTransform ||\n      // Or to prevent items jumping to back to their \"new\" position when items change\n      (itemsHaveChanged && previous.current.newIndex === index)\n    ) {\n      return disabledTransition;\n    }\n\n    if (\n      (shouldDisplaceDragSource && !isKeyboardEvent(activatorEvent)) ||\n      !transition\n    ) {\n      return undefined;\n    }\n\n    if (isSorting || shouldAnimateLayoutChanges) {\n      return CSS.Transition.toString({\n        ...transition,\n        property: transitionProperty,\n      });\n    }\n\n    return undefined;\n  }\n}\n\nfunction normalizeLocalDisabled(\n  localDisabled: Arguments['disabled'],\n  globalDisabled: Disabled\n) {\n  if (typeof localDisabled === 'boolean') {\n    return {\n      draggable: localDisabled,\n      // Backwards compatibility\n      droppable: false,\n    };\n  }\n\n  return {\n    draggable: localDisabled?.draggable ?? globalDisabled.draggable,\n    droppable: localDisabled?.droppable ?? globalDisabled.droppable,\n  };\n}\n","import type {Data, DroppableContainer, DraggableNode} from '@dnd-kit/core';\n\nimport type {SortableData} from './data';\n\nexport function hasSortableData<T extends DraggableNode | DroppableContainer>(\n  entry: T | null | undefined\n): entry is T & {data: {current: Data<SortableData>}} {\n  if (!entry) {\n    return false;\n  }\n\n  const data = entry.data.current;\n\n  if (\n    data &&\n    'sortable' in data &&\n    typeof data.sortable === 'object' &&\n    'containerId' in data.sortable &&\n    'items' in data.sortable &&\n    'index' in data.sortable\n  ) {\n    return true;\n  }\n\n  return false;\n}\n","import {\n  closestCorners,\n  getScrollableAncestors,\n  getFirstCollision,\n  KeyboardCode,\n  DroppableContainer,\n  KeyboardCoordinateGetter,\n} from '@dnd-kit/core';\nimport {subtract} from '@dnd-kit/utilities';\n\nimport {hasSortableData} from '../../types';\n\nconst directions: string[] = [\n  KeyboardCode.Down,\n  KeyboardCode.Right,\n  KeyboardCode.Up,\n  KeyboardCode.Left,\n];\n\nexport const sortableKeyboardCoordinates: KeyboardCoordinateGetter = (\n  event,\n  {\n    context: {\n      active,\n      collisionRect,\n      droppableRects,\n      droppableContainers,\n      over,\n      scrollableAncestors,\n    },\n  }\n) => {\n  if (directions.includes(event.code)) {\n    event.preventDefault();\n\n    if (!active || !collisionRect) {\n      return;\n    }\n\n    const filteredContainers: DroppableContainer[] = [];\n\n    droppableContainers.getEnabled().forEach((entry) => {\n      if (!entry || entry?.disabled) {\n        return;\n      }\n\n      const rect = droppableRects.get(entry.id);\n\n      if (!rect) {\n        return;\n      }\n\n      switch (event.code) {\n        case KeyboardCode.Down:\n          if (collisionRect.top < rect.top) {\n            filteredContainers.push(entry);\n          }\n          break;\n        case KeyboardCode.Up:\n          if (collisionRect.top > rect.top) {\n            filteredContainers.push(entry);\n          }\n          break;\n        case KeyboardCode.Left:\n          if (collisionRect.left > rect.left) {\n            filteredContainers.push(entry);\n          }\n          break;\n        case KeyboardCode.Right:\n          if (collisionRect.left < rect.left) {\n            filteredContainers.push(entry);\n          }\n          break;\n      }\n    });\n\n    const collisions = closestCorners({\n      active,\n      collisionRect: collisionRect,\n      droppableRects,\n      droppableContainers: filteredContainers,\n      pointerCoordinates: null,\n    });\n    let closestId = getFirstCollision(collisions, 'id');\n\n    if (closestId === over?.id && collisions.length > 1) {\n      closestId = collisions[1].id;\n    }\n\n    if (closestId != null) {\n      const activeDroppable = droppableContainers.get(active.id);\n      const newDroppable = droppableContainers.get(closestId);\n      const newRect = newDroppable ? droppableRects.get(newDroppable.id) : null;\n      const newNode = newDroppable?.node.current;\n\n      if (newNode && newRect && activeDroppable && newDroppable) {\n        const newScrollAncestors = getScrollableAncestors(newNode);\n        const hasDifferentScrollAncestors = newScrollAncestors.some(\n          (element, index) => scrollableAncestors[index] !== element\n        );\n        const hasSameContainer = isSameContainer(activeDroppable, newDroppable);\n        const isAfterActive = isAfter(activeDroppable, newDroppable);\n        const offset =\n          hasDifferentScrollAncestors || !hasSameContainer\n            ? {\n                x: 0,\n                y: 0,\n              }\n            : {\n                x: isAfterActive ? collisionRect.width - newRect.width : 0,\n                y: isAfterActive ? collisionRect.height - newRect.height : 0,\n              };\n        const rectCoordinates = {\n          x: newRect.left,\n          y: newRect.top,\n        };\n\n        const newCoordinates =\n          offset.x && offset.y\n            ? rectCoordinates\n            : subtract(rectCoordinates, offset);\n\n        return newCoordinates;\n      }\n    }\n  }\n\n  return undefined;\n};\n\nfunction isSameContainer(a: DroppableContainer, b: DroppableContainer) {\n  if (!hasSortableData(a) || !hasSortableData(b)) {\n    return false;\n  }\n\n  return (\n    a.data.current.sortable.containerId === b.data.current.sortable.containerId\n  );\n}\n\nfunction isAfter(a: DroppableContainer, b: DroppableContainer) {\n  if (!hasSortableData(a) || !hasSortableData(b)) {\n    return false;\n  }\n\n  if (!isSameContainer(a, b)) {\n    return false;\n  }\n\n  return a.data.current.sortable.index < b.data.current.sortable.index;\n}\n"]},"metadata":{},"sourceType":"module"}