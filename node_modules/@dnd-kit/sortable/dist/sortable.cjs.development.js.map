{"version":3,"file":"sortable.cjs.development.js","sources":["../src/utilities/arrayMove.ts","../src/utilities/arraySwap.ts","../src/utilities/getSortedRects.ts","../src/utilities/isValidIndex.ts","../src/utilities/itemsEqual.ts","../src/utilities/normalizeDisabled.ts","../src/strategies/horizontalListSorting.ts","../src/strategies/rectSorting.ts","../src/strategies/rectSwapping.ts","../src/strategies/verticalListSorting.ts","../src/components/SortableContext.tsx","../src/hooks/defaults.ts","../src/hooks/utilities/useDerivedTransform.ts","../src/hooks/useSortable.ts","../src/types/type-guard.ts","../src/sensors/keyboard/sortableKeyboardCoordinates.ts"],"sourcesContent":["/**\n * Move an array item to a different position. Returns a new array with the item moved to the new position.\n */\nexport function arrayMove<T>(array: T[], from: number, to: number): T[] {\n  const newArray = array.slice();\n  newArray.splice(\n    to < 0 ? newArray.length + to : to,\n    0,\n    newArray.splice(from, 1)[0]\n  );\n\n  return newArray;\n}\n","/**\n * Swap an array item to a different position. Returns a new array with the item swapped to the new position.\n */\nexport function arraySwap<T>(array: T[], from: number, to: number): T[] {\n  const newArray = array.slice();\n\n  newArray[from] = array[to];\n  newArray[to] = array[from];\n\n  return newArray;\n}\n","import type {\n  ClientRect,\n  UniqueIdentifier,\n  UseDndContextReturnValue,\n} from '@dnd-kit/core';\n\nexport function getSortedRects(\n  items: UniqueIdentifier[],\n  rects: UseDndContextReturnValue['droppableRects']\n) {\n  return items.reduce<ClientRect[]>((accumulator, id, index) => {\n    const rect = rects.get(id);\n\n    if (rect) {\n      accumulator[index] = rect;\n    }\n\n    return accumulator;\n  }, Array(items.length));\n}\n","export function isValidIndex(index: number | null): index is number {\n  return index !== null && index >= 0;\n}\n","import type {UniqueIdentifier} from '@dnd-kit/core';\n\nexport function itemsEqual(a: UniqueIdentifier[], b: UniqueIdentifier[]) {\n  if (a === b) {\n    return true;\n  }\n\n  if (a.length !== b.length) {\n    return false;\n  }\n\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] !== b[i]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n","import type {Disabled} from '../types';\n\nexport function normalizeDisabled(disabled: boolean | Disabled): Disabled {\n  if (typeof disabled === 'boolean') {\n    return {\n      draggable: disabled,\n      droppable: disabled,\n    };\n  }\n\n  return disabled;\n}\n","import type {ClientRect} from '@dnd-kit/core';\nimport type {SortingStrategy} from '../types';\n\n// To-do: We should be calculating scale transformation\nconst defaultScale = {\n  scaleX: 1,\n  scaleY: 1,\n};\n\nexport const horizontalListSortingStrategy: SortingStrategy = ({\n  rects,\n  activeNodeRect: fallbackActiveRect,\n  activeIndex,\n  overIndex,\n  index,\n}) => {\n  const activeNodeRect = rects[activeIndex] ?? fallbackActiveRect;\n\n  if (!activeNodeRect) {\n    return null;\n  }\n\n  const itemGap = getItemGap(rects, index, activeIndex);\n\n  if (index === activeIndex) {\n    const newIndexRect = rects[overIndex];\n\n    if (!newIndexRect) {\n      return null;\n    }\n\n    return {\n      x:\n        activeIndex < overIndex\n          ? newIndexRect.left +\n            newIndexRect.width -\n            (activeNodeRect.left + activeNodeRect.width)\n          : newIndexRect.left - activeNodeRect.left,\n      y: 0,\n      ...defaultScale,\n    };\n  }\n\n  if (index > activeIndex && index <= overIndex) {\n    return {\n      x: -activeNodeRect.width - itemGap,\n      y: 0,\n      ...defaultScale,\n    };\n  }\n\n  if (index < activeIndex && index >= overIndex) {\n    return {\n      x: activeNodeRect.width + itemGap,\n      y: 0,\n      ...defaultScale,\n    };\n  }\n\n  return {\n    x: 0,\n    y: 0,\n    ...defaultScale,\n  };\n};\n\nfunction getItemGap(rects: ClientRect[], index: number, activeIndex: number) {\n  const currentRect: ClientRect | undefined = rects[index];\n  const previousRect: ClientRect | undefined = rects[index - 1];\n  const nextRect: ClientRect | undefined = rects[index + 1];\n\n  if (!currentRect || (!previousRect && !nextRect)) {\n    return 0;\n  }\n\n  if (activeIndex < index) {\n    return previousRect\n      ? currentRect.left - (previousRect.left + previousRect.width)\n      : nextRect.left - (currentRect.left + currentRect.width);\n  }\n\n  return nextRect\n    ? nextRect.left - (currentRect.left + currentRect.width)\n    : currentRect.left - (previousRect.left + previousRect.width);\n}\n","import {arrayMove} from '../utilities';\nimport type {SortingStrategy} from '../types';\n\nexport const rectSortingStrategy: SortingStrategy = ({\n  rects,\n  activeIndex,\n  overIndex,\n  index,\n}) => {\n  const newRects = arrayMove(rects, overIndex, activeIndex);\n\n  const oldRect = rects[index];\n  const newRect = newRects[index];\n\n  if (!newRect || !oldRect) {\n    return null;\n  }\n\n  return {\n    x: newRect.left - oldRect.left,\n    y: newRect.top - oldRect.top,\n    scaleX: newRect.width / oldRect.width,\n    scaleY: newRect.height / oldRect.height,\n  };\n};\n","import type {SortingStrategy} from '../types';\n\nexport const rectSwappingStrategy: SortingStrategy = ({\n  activeIndex,\n  index,\n  rects,\n  overIndex,\n}) => {\n  let oldRect;\n  let newRect;\n\n  if (index === activeIndex) {\n    oldRect = rects[index];\n    newRect = rects[overIndex];\n  }\n\n  if (index === overIndex) {\n    oldRect = rects[index];\n    newRect = rects[activeIndex];\n  }\n\n  if (!newRect || !oldRect) {\n    return null;\n  }\n\n  return {\n    x: newRect.left - oldRect.left,\n    y: newRect.top - oldRect.top,\n    scaleX: newRect.width / oldRect.width,\n    scaleY: newRect.height / oldRect.height,\n  };\n};\n","import type {ClientRect} from '@dnd-kit/core';\nimport type {SortingStrategy} from '../types';\n\n// To-do: We should be calculating scale transformation\nconst defaultScale = {\n  scaleX: 1,\n  scaleY: 1,\n};\n\nexport const verticalListSortingStrategy: SortingStrategy = ({\n  activeIndex,\n  activeNodeRect: fallbackActiveRect,\n  index,\n  rects,\n  overIndex,\n}) => {\n  const activeNodeRect = rects[activeIndex] ?? fallbackActiveRect;\n\n  if (!activeNodeRect) {\n    return null;\n  }\n\n  if (index === activeIndex) {\n    const overIndexRect = rects[overIndex];\n\n    if (!overIndexRect) {\n      return null;\n    }\n\n    return {\n      x: 0,\n      y:\n        activeIndex < overIndex\n          ? overIndexRect.top +\n            overIndexRect.height -\n            (activeNodeRect.top + activeNodeRect.height)\n          : overIndexRect.top - activeNodeRect.top,\n      ...defaultScale,\n    };\n  }\n\n  const itemGap = getItemGap(rects, index, activeIndex);\n\n  if (index > activeIndex && index <= overIndex) {\n    return {\n      x: 0,\n      y: -activeNodeRect.height - itemGap,\n      ...defaultScale,\n    };\n  }\n\n  if (index < activeIndex && index >= overIndex) {\n    return {\n      x: 0,\n      y: activeNodeRect.height + itemGap,\n      ...defaultScale,\n    };\n  }\n\n  return {\n    x: 0,\n    y: 0,\n    ...defaultScale,\n  };\n};\n\nfunction getItemGap(\n  clientRects: ClientRect[],\n  index: number,\n  activeIndex: number\n) {\n  const currentRect: ClientRect | undefined = clientRects[index];\n  const previousRect: ClientRect | undefined = clientRects[index - 1];\n  const nextRect: ClientRect | undefined = clientRects[index + 1];\n\n  if (!currentRect) {\n    return 0;\n  }\n\n  if (activeIndex < index) {\n    return previousRect\n      ? currentRect.top - (previousRect.top + previousRect.height)\n      : nextRect\n      ? nextRect.top - (currentRect.top + currentRect.height)\n      : 0;\n  }\n\n  return nextRect\n    ? nextRect.top - (currentRect.top + currentRect.height)\n    : previousRect\n    ? currentRect.top - (previousRect.top + previousRect.height)\n    : 0;\n}\n","import React, {useEffect, useMemo, useRef} from 'react';\nimport {useDndContext, ClientRect, UniqueIdentifier} from '@dnd-kit/core';\nimport {useIsomorphicLayoutEffect, useUniqueId} from '@dnd-kit/utilities';\n\nimport type {Disabled, SortingStrategy} from '../types';\nimport {getSortedRects, itemsEqual, normalizeDisabled} from '../utilities';\nimport {rectSortingStrategy} from '../strategies';\n\nexport interface Props {\n  children: React.ReactNode;\n  items: (UniqueIdentifier | {id: UniqueIdentifier})[];\n  strategy?: SortingStrategy;\n  id?: string;\n  disabled?: boolean | Disabled;\n}\n\nconst ID_PREFIX = 'Sortable';\n\ninterface ContextDescriptor {\n  activeIndex: number;\n  containerId: string;\n  disabled: Disabled;\n  disableTransforms: boolean;\n  items: UniqueIdentifier[];\n  overIndex: number;\n  useDragOverlay: boolean;\n  sortedRects: ClientRect[];\n  strategy: SortingStrategy;\n}\n\nexport const Context = React.createContext<ContextDescriptor>({\n  activeIndex: -1,\n  containerId: ID_PREFIX,\n  disableTransforms: false,\n  items: [],\n  overIndex: -1,\n  useDragOverlay: false,\n  sortedRects: [],\n  strategy: rectSortingStrategy,\n  disabled: {\n    draggable: false,\n    droppable: false,\n  },\n});\n\nexport function SortableContext({\n  children,\n  id,\n  items: userDefinedItems,\n  strategy = rectSortingStrategy,\n  disabled: disabledProp = false,\n}: Props) {\n  const {\n    active,\n    dragOverlay,\n    droppableRects,\n    over,\n    measureDroppableContainers,\n    measuringScheduled,\n  } = useDndContext();\n  const containerId = useUniqueId(ID_PREFIX, id);\n  const useDragOverlay = Boolean(dragOverlay.rect !== null);\n  const items = useMemo<UniqueIdentifier[]>(\n    () =>\n      userDefinedItems.map((item) =>\n        typeof item === 'object' && 'id' in item ? item.id : item\n      ),\n    [userDefinedItems]\n  );\n  const isDragging = active != null;\n  const activeIndex = active ? items.indexOf(active.id) : -1;\n  const overIndex = over ? items.indexOf(over.id) : -1;\n  const previousItemsRef = useRef(items);\n  const itemsHaveChanged = !itemsEqual(items, previousItemsRef.current);\n  const disableTransforms =\n    (overIndex !== -1 && activeIndex === -1) || itemsHaveChanged;\n  const disabled = normalizeDisabled(disabledProp);\n\n  useIsomorphicLayoutEffect(() => {\n    if (itemsHaveChanged && isDragging && !measuringScheduled) {\n      measureDroppableContainers(items);\n    }\n  }, [\n    itemsHaveChanged,\n    items,\n    isDragging,\n    measureDroppableContainers,\n    measuringScheduled,\n  ]);\n\n  useEffect(() => {\n    previousItemsRef.current = items;\n  }, [items]);\n\n  const contextValue = useMemo(\n    (): ContextDescriptor => ({\n      activeIndex,\n      containerId,\n      disabled,\n      disableTransforms,\n      items,\n      overIndex,\n      useDragOverlay,\n      sortedRects: getSortedRects(items, droppableRects),\n      strategy,\n    }),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n      activeIndex,\n      containerId,\n      disabled.draggable,\n      disabled.droppable,\n      disableTransforms,\n      items,\n      overIndex,\n      droppableRects,\n      useDragOverlay,\n      strategy,\n    ]\n  );\n\n  return <Context.Provider value={contextValue}>{children}</Context.Provider>;\n}\n","import {CSS} from '@dnd-kit/utilities';\n\nimport {arrayMove} from '../utilities';\n\nimport type {\n  AnimateLayoutChanges,\n  NewIndexGetter,\n  SortableTransition,\n} from './types';\n\nexport const defaultNewIndexGetter: NewIndexGetter = ({\n  id,\n  items,\n  activeIndex,\n  overIndex,\n}) => arrayMove(items, activeIndex, overIndex).indexOf(id);\n\nexport const defaultAnimateLayoutChanges: AnimateLayoutChanges = ({\n  containerId,\n  isSorting,\n  wasDragging,\n  index,\n  items,\n  newIndex,\n  previousItems,\n  previousContainerId,\n  transition,\n}) => {\n  if (!transition || !wasDragging) {\n    return false;\n  }\n\n  if (previousItems !== items && index === newIndex) {\n    return false;\n  }\n\n  if (isSorting) {\n    return true;\n  }\n\n  return newIndex !== index && containerId === previousContainerId;\n};\n\nexport const defaultTransition: SortableTransition = {\n  duration: 200,\n  easing: 'ease',\n};\n\nexport const transitionProperty = 'transform';\n\nexport const disabledTransition = CSS.Transition.toString({\n  property: transitionProperty,\n  duration: 0,\n  easing: 'linear',\n});\n\nexport const defaultAttributes = {\n  roleDescription: 'sortable',\n};\n","import {useEffect, useRef, useState} from 'react';\nimport {getClientRect, ClientRect} from '@dnd-kit/core';\nimport {Transform, useIsomorphicLayoutEffect} from '@dnd-kit/utilities';\n\ninterface Arguments {\n  rect: React.MutableRefObject<ClientRect | null>;\n  disabled: boolean;\n  index: number;\n  node: React.MutableRefObject<HTMLElement | null>;\n}\n\n/*\n * When the index of an item changes while sorting,\n * we need to temporarily disable the transforms\n */\nexport function useDerivedTransform({disabled, index, node, rect}: Arguments) {\n  const [derivedTransform, setDerivedtransform] = useState<Transform | null>(\n    null\n  );\n  const previousIndex = useRef(index);\n\n  useIsomorphicLayoutEffect(() => {\n    if (!disabled && index !== previousIndex.current && node.current) {\n      const initial = rect.current;\n\n      if (initial) {\n        const current = getClientRect(node.current, {\n          ignoreTransform: true,\n        });\n\n        const delta = {\n          x: initial.left - current.left,\n          y: initial.top - current.top,\n          scaleX: initial.width / current.width,\n          scaleY: initial.height / current.height,\n        };\n\n        if (delta.x || delta.y) {\n          setDerivedtransform(delta);\n        }\n      }\n    }\n\n    if (index !== previousIndex.current) {\n      previousIndex.current = index;\n    }\n  }, [disabled, index, node, rect]);\n\n  useEffect(() => {\n    if (derivedTransform) {\n      requestAnimationFrame(() => {\n        setDerivedtransform(null);\n      });\n    }\n  }, [derivedTransform]);\n\n  return derivedTransform;\n}\n","import {useContext, useEffect, useMemo, useRef} from 'react';\nimport {\n  useDraggable,\n  useDroppable,\n  UseDraggableArguments,\n  UseDroppableArguments,\n} from '@dnd-kit/core';\nimport type {Data} from '@dnd-kit/core';\nimport {CSS, isKeyboardEvent, useCombinedRefs} from '@dnd-kit/utilities';\n\nimport {Context} from '../components';\nimport type {Disabled, SortableData, SortingStrategy} from '../types';\nimport {isValidIndex} from '../utilities';\nimport {\n  defaultAnimateLayoutChanges,\n  defaultAttributes,\n  defaultNewIndexGetter,\n  defaultTransition,\n  disabledTransition,\n  transitionProperty,\n} from './defaults';\nimport type {\n  AnimateLayoutChanges,\n  NewIndexGetter,\n  SortableTransition,\n} from './types';\nimport {useDerivedTransform} from './utilities';\n\nexport interface Arguments\n  extends Omit<UseDraggableArguments, 'disabled'>,\n    Pick<UseDroppableArguments, 'resizeObserverConfig'> {\n  animateLayoutChanges?: AnimateLayoutChanges;\n  disabled?: boolean | Disabled;\n  getNewIndex?: NewIndexGetter;\n  strategy?: SortingStrategy;\n  transition?: SortableTransition | null;\n}\n\nexport function useSortable({\n  animateLayoutChanges = defaultAnimateLayoutChanges,\n  attributes: userDefinedAttributes,\n  disabled: localDisabled,\n  data: customData,\n  getNewIndex = defaultNewIndexGetter,\n  id,\n  strategy: localStrategy,\n  resizeObserverConfig,\n  transition = defaultTransition,\n}: Arguments) {\n  const {\n    items,\n    containerId,\n    activeIndex,\n    disabled: globalDisabled,\n    disableTransforms,\n    sortedRects,\n    overIndex,\n    useDragOverlay,\n    strategy: globalStrategy,\n  } = useContext(Context);\n  const disabled: Disabled = normalizeLocalDisabled(\n    localDisabled,\n    globalDisabled\n  );\n  const index = items.indexOf(id);\n  const data = useMemo<SortableData & Data>(\n    () => ({sortable: {containerId, index, items}, ...customData}),\n    [containerId, customData, index, items]\n  );\n  const itemsAfterCurrentSortable = useMemo(\n    () => items.slice(items.indexOf(id)),\n    [items, id]\n  );\n  const {rect, node, isOver, setNodeRef: setDroppableNodeRef} = useDroppable({\n    id,\n    data,\n    disabled: disabled.droppable,\n    resizeObserverConfig: {\n      updateMeasurementsFor: itemsAfterCurrentSortable,\n      ...resizeObserverConfig,\n    },\n  });\n  const {\n    active,\n    activatorEvent,\n    activeNodeRect,\n    attributes,\n    setNodeRef: setDraggableNodeRef,\n    listeners,\n    isDragging,\n    over,\n    setActivatorNodeRef,\n    transform,\n  } = useDraggable({\n    id,\n    data,\n    attributes: {\n      ...defaultAttributes,\n      ...userDefinedAttributes,\n    },\n    disabled: disabled.draggable,\n  });\n  const setNodeRef = useCombinedRefs(setDroppableNodeRef, setDraggableNodeRef);\n  const isSorting = Boolean(active);\n  const displaceItem =\n    isSorting &&\n    !disableTransforms &&\n    isValidIndex(activeIndex) &&\n    isValidIndex(overIndex);\n  const shouldDisplaceDragSource = !useDragOverlay && isDragging;\n  const dragSourceDisplacement =\n    shouldDisplaceDragSource && displaceItem ? transform : null;\n  const strategy = localStrategy ?? globalStrategy;\n  const finalTransform = displaceItem\n    ? dragSourceDisplacement ??\n      strategy({\n        rects: sortedRects,\n        activeNodeRect,\n        activeIndex,\n        overIndex,\n        index,\n      })\n    : null;\n  const newIndex =\n    isValidIndex(activeIndex) && isValidIndex(overIndex)\n      ? getNewIndex({id, items, activeIndex, overIndex})\n      : index;\n  const activeId = active?.id;\n  const previous = useRef({\n    activeId,\n    items,\n    newIndex,\n    containerId,\n  });\n  const itemsHaveChanged = items !== previous.current.items;\n  const shouldAnimateLayoutChanges = animateLayoutChanges({\n    active,\n    containerId,\n    isDragging,\n    isSorting,\n    id,\n    index,\n    items,\n    newIndex: previous.current.newIndex,\n    previousItems: previous.current.items,\n    previousContainerId: previous.current.containerId,\n    transition,\n    wasDragging: previous.current.activeId != null,\n  });\n\n  const derivedTransform = useDerivedTransform({\n    disabled: !shouldAnimateLayoutChanges,\n    index,\n    node,\n    rect,\n  });\n\n  useEffect(() => {\n    if (isSorting && previous.current.newIndex !== newIndex) {\n      previous.current.newIndex = newIndex;\n    }\n\n    if (containerId !== previous.current.containerId) {\n      previous.current.containerId = containerId;\n    }\n\n    if (items !== previous.current.items) {\n      previous.current.items = items;\n    }\n  }, [isSorting, newIndex, containerId, items]);\n\n  useEffect(() => {\n    if (activeId === previous.current.activeId) {\n      return;\n    }\n\n    if (activeId && !previous.current.activeId) {\n      previous.current.activeId = activeId;\n      return;\n    }\n\n    const timeoutId = setTimeout(() => {\n      previous.current.activeId = activeId;\n    }, 50);\n\n    return () => clearTimeout(timeoutId);\n  }, [activeId]);\n\n  return {\n    active,\n    activeIndex,\n    attributes,\n    data,\n    rect,\n    index,\n    newIndex,\n    items,\n    isOver,\n    isSorting,\n    isDragging,\n    listeners,\n    node,\n    overIndex,\n    over,\n    setNodeRef,\n    setActivatorNodeRef,\n    setDroppableNodeRef,\n    setDraggableNodeRef,\n    transform: derivedTransform ?? finalTransform,\n    transition: getTransition(),\n  };\n\n  function getTransition() {\n    if (\n      // Temporarily disable transitions for a single frame to set up derived transforms\n      derivedTransform ||\n      // Or to prevent items jumping to back to their \"new\" position when items change\n      (itemsHaveChanged && previous.current.newIndex === index)\n    ) {\n      return disabledTransition;\n    }\n\n    if (\n      (shouldDisplaceDragSource && !isKeyboardEvent(activatorEvent)) ||\n      !transition\n    ) {\n      return undefined;\n    }\n\n    if (isSorting || shouldAnimateLayoutChanges) {\n      return CSS.Transition.toString({\n        ...transition,\n        property: transitionProperty,\n      });\n    }\n\n    return undefined;\n  }\n}\n\nfunction normalizeLocalDisabled(\n  localDisabled: Arguments['disabled'],\n  globalDisabled: Disabled\n) {\n  if (typeof localDisabled === 'boolean') {\n    return {\n      draggable: localDisabled,\n      // Backwards compatibility\n      droppable: false,\n    };\n  }\n\n  return {\n    draggable: localDisabled?.draggable ?? globalDisabled.draggable,\n    droppable: localDisabled?.droppable ?? globalDisabled.droppable,\n  };\n}\n","import type {Data, DroppableContainer, DraggableNode} from '@dnd-kit/core';\n\nimport type {SortableData} from './data';\n\nexport function hasSortableData<T extends DraggableNode | DroppableContainer>(\n  entry: T | null | undefined\n): entry is T & {data: {current: Data<SortableData>}} {\n  if (!entry) {\n    return false;\n  }\n\n  const data = entry.data.current;\n\n  if (\n    data &&\n    'sortable' in data &&\n    typeof data.sortable === 'object' &&\n    'containerId' in data.sortable &&\n    'items' in data.sortable &&\n    'index' in data.sortable\n  ) {\n    return true;\n  }\n\n  return false;\n}\n","import {\n  closestCorners,\n  getScrollableAncestors,\n  getFirstCollision,\n  KeyboardCode,\n  DroppableContainer,\n  KeyboardCoordinateGetter,\n} from '@dnd-kit/core';\nimport {subtract} from '@dnd-kit/utilities';\n\nimport {hasSortableData} from '../../types';\n\nconst directions: string[] = [\n  KeyboardCode.Down,\n  KeyboardCode.Right,\n  KeyboardCode.Up,\n  KeyboardCode.Left,\n];\n\nexport const sortableKeyboardCoordinates: KeyboardCoordinateGetter = (\n  event,\n  {\n    context: {\n      active,\n      collisionRect,\n      droppableRects,\n      droppableContainers,\n      over,\n      scrollableAncestors,\n    },\n  }\n) => {\n  if (directions.includes(event.code)) {\n    event.preventDefault();\n\n    if (!active || !collisionRect) {\n      return;\n    }\n\n    const filteredContainers: DroppableContainer[] = [];\n\n    droppableContainers.getEnabled().forEach((entry) => {\n      if (!entry || entry?.disabled) {\n        return;\n      }\n\n      const rect = droppableRects.get(entry.id);\n\n      if (!rect) {\n        return;\n      }\n\n      switch (event.code) {\n        case KeyboardCode.Down:\n          if (collisionRect.top < rect.top) {\n            filteredContainers.push(entry);\n          }\n          break;\n        case KeyboardCode.Up:\n          if (collisionRect.top > rect.top) {\n            filteredContainers.push(entry);\n          }\n          break;\n        case KeyboardCode.Left:\n          if (collisionRect.left > rect.left) {\n            filteredContainers.push(entry);\n          }\n          break;\n        case KeyboardCode.Right:\n          if (collisionRect.left < rect.left) {\n            filteredContainers.push(entry);\n          }\n          break;\n      }\n    });\n\n    const collisions = closestCorners({\n      active,\n      collisionRect: collisionRect,\n      droppableRects,\n      droppableContainers: filteredContainers,\n      pointerCoordinates: null,\n    });\n    let closestId = getFirstCollision(collisions, 'id');\n\n    if (closestId === over?.id && collisions.length > 1) {\n      closestId = collisions[1].id;\n    }\n\n    if (closestId != null) {\n      const activeDroppable = droppableContainers.get(active.id);\n      const newDroppable = droppableContainers.get(closestId);\n      const newRect = newDroppable ? droppableRects.get(newDroppable.id) : null;\n      const newNode = newDroppable?.node.current;\n\n      if (newNode && newRect && activeDroppable && newDroppable) {\n        const newScrollAncestors = getScrollableAncestors(newNode);\n        const hasDifferentScrollAncestors = newScrollAncestors.some(\n          (element, index) => scrollableAncestors[index] !== element\n        );\n        const hasSameContainer = isSameContainer(activeDroppable, newDroppable);\n        const isAfterActive = isAfter(activeDroppable, newDroppable);\n        const offset =\n          hasDifferentScrollAncestors || !hasSameContainer\n            ? {\n                x: 0,\n                y: 0,\n              }\n            : {\n                x: isAfterActive ? collisionRect.width - newRect.width : 0,\n                y: isAfterActive ? collisionRect.height - newRect.height : 0,\n              };\n        const rectCoordinates = {\n          x: newRect.left,\n          y: newRect.top,\n        };\n\n        const newCoordinates =\n          offset.x && offset.y\n            ? rectCoordinates\n            : subtract(rectCoordinates, offset);\n\n        return newCoordinates;\n      }\n    }\n  }\n\n  return undefined;\n};\n\nfunction isSameContainer(a: DroppableContainer, b: DroppableContainer) {\n  if (!hasSortableData(a) || !hasSortableData(b)) {\n    return false;\n  }\n\n  return (\n    a.data.current.sortable.containerId === b.data.current.sortable.containerId\n  );\n}\n\nfunction isAfter(a: DroppableContainer, b: DroppableContainer) {\n  if (!hasSortableData(a) || !hasSortableData(b)) {\n    return false;\n  }\n\n  if (!isSameContainer(a, b)) {\n    return false;\n  }\n\n  return a.data.current.sortable.index < b.data.current.sortable.index;\n}\n"],"names":["arrayMove","array","from","to","newArray","slice","splice","length","arraySwap","getSortedRects","items","rects","reduce","accumulator","id","index","rect","get","Array","isValidIndex","itemsEqual","a","b","i","normalizeDisabled","disabled","draggable","droppable","defaultScale","scaleX","scaleY","horizontalListSortingStrategy","activeNodeRect","fallbackActiveRect","activeIndex","overIndex","itemGap","getItemGap","newIndexRect","x","left","width","y","currentRect","previousRect","nextRect","rectSortingStrategy","newRects","oldRect","newRect","top","height","rectSwappingStrategy","verticalListSortingStrategy","overIndexRect","clientRects","ID_PREFIX","Context","React","createContext","containerId","disableTransforms","useDragOverlay","sortedRects","strategy","SortableContext","children","userDefinedItems","disabledProp","active","dragOverlay","droppableRects","over","measureDroppableContainers","measuringScheduled","useDndContext","useUniqueId","Boolean","useMemo","map","item","isDragging","indexOf","previousItemsRef","useRef","itemsHaveChanged","current","useIsomorphicLayoutEffect","useEffect","contextValue","Provider","value","defaultNewIndexGetter","defaultAnimateLayoutChanges","isSorting","wasDragging","newIndex","previousItems","previousContainerId","transition","defaultTransition","duration","easing","transitionProperty","disabledTransition","CSS","Transition","toString","property","defaultAttributes","roleDescription","useDerivedTransform","node","derivedTransform","setDerivedtransform","useState","previousIndex","initial","getClientRect","ignoreTransform","delta","requestAnimationFrame","useSortable","animateLayoutChanges","attributes","userDefinedAttributes","localDisabled","data","customData","getNewIndex","localStrategy","resizeObserverConfig","globalDisabled","globalStrategy","useContext","normalizeLocalDisabled","sortable","itemsAfterCurrentSortable","isOver","setNodeRef","setDroppableNodeRef","useDroppable","updateMeasurementsFor","activatorEvent","setDraggableNodeRef","listeners","setActivatorNodeRef","transform","useDraggable","useCombinedRefs","displaceItem","shouldDisplaceDragSource","dragSourceDisplacement","finalTransform","activeId","previous","shouldAnimateLayoutChanges","timeoutId","setTimeout","clearTimeout","getTransition","isKeyboardEvent","undefined","hasSortableData","entry","directions","KeyboardCode","Down","Right","Up","Left","sortableKeyboardCoordinates","event","context","collisionRect","droppableContainers","scrollableAncestors","includes","code","preventDefault","filteredContainers","getEnabled","forEach","push","collisions","closestCorners","pointerCoordinates","closestId","getFirstCollision","activeDroppable","newDroppable","newNode","newScrollAncestors","getScrollableAncestors","hasDifferentScrollAncestors","some","element","hasSameContainer","isSameContainer","isAfterActive","isAfter","offset","rectCoordinates","newCoordinates","subtract"],"mappings":"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"}