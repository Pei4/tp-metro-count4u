{"version":3,"file":"sortable.cjs.production.min.js","sources":["../src/utilities/arrayMove.ts","../src/utilities/getSortedRects.ts","../src/utilities/isValidIndex.ts","../src/strategies/horizontalListSorting.ts","../src/strategies/rectSorting.ts","../src/strategies/verticalListSorting.ts","../src/components/SortableContext.tsx","../src/hooks/defaults.ts","../src/types/type-guard.ts","../src/sensors/keyboard/sortableKeyboardCoordinates.ts","../src/utilities/itemsEqual.ts","../src/utilities/normalizeDisabled.ts","../src/utilities/arraySwap.ts","../src/strategies/rectSwapping.ts","../src/hooks/useSortable.ts","../src/hooks/utilities/useDerivedTransform.ts"],"sourcesContent":["/**\n * Move an array item to a different position. Returns a new array with the item moved to the new position.\n */\nexport function arrayMove<T>(array: T[], from: number, to: number): T[] {\n  const newArray = array.slice();\n  newArray.splice(\n    to < 0 ? newArray.length + to : to,\n    0,\n    newArray.splice(from, 1)[0]\n  );\n\n  return newArray;\n}\n","import type {\n  ClientRect,\n  UniqueIdentifier,\n  UseDndContextReturnValue,\n} from '@dnd-kit/core';\n\nexport function getSortedRects(\n  items: UniqueIdentifier[],\n  rects: UseDndContextReturnValue['droppableRects']\n) {\n  return items.reduce<ClientRect[]>((accumulator, id, index) => {\n    const rect = rects.get(id);\n\n    if (rect) {\n      accumulator[index] = rect;\n    }\n\n    return accumulator;\n  }, Array(items.length));\n}\n","export function isValidIndex(index: number | null): index is number {\n  return index !== null && index >= 0;\n}\n","import type {ClientRect} from '@dnd-kit/core';\nimport type {SortingStrategy} from '../types';\n\n// To-do: We should be calculating scale transformation\nconst defaultScale = {\n  scaleX: 1,\n  scaleY: 1,\n};\n\nexport const horizontalListSortingStrategy: SortingStrategy = ({\n  rects,\n  activeNodeRect: fallbackActiveRect,\n  activeIndex,\n  overIndex,\n  index,\n}) => {\n  const activeNodeRect = rects[activeIndex] ?? fallbackActiveRect;\n\n  if (!activeNodeRect) {\n    return null;\n  }\n\n  const itemGap = getItemGap(rects, index, activeIndex);\n\n  if (index === activeIndex) {\n    const newIndexRect = rects[overIndex];\n\n    if (!newIndexRect) {\n      return null;\n    }\n\n    return {\n      x:\n        activeIndex < overIndex\n          ? newIndexRect.left +\n            newIndexRect.width -\n            (activeNodeRect.left + activeNodeRect.width)\n          : newIndexRect.left - activeNodeRect.left,\n      y: 0,\n      ...defaultScale,\n    };\n  }\n\n  if (index > activeIndex && index <= overIndex) {\n    return {\n      x: -activeNodeRect.width - itemGap,\n      y: 0,\n      ...defaultScale,\n    };\n  }\n\n  if (index < activeIndex && index >= overIndex) {\n    return {\n      x: activeNodeRect.width + itemGap,\n      y: 0,\n      ...defaultScale,\n    };\n  }\n\n  return {\n    x: 0,\n    y: 0,\n    ...defaultScale,\n  };\n};\n\nfunction getItemGap(rects: ClientRect[], index: number, activeIndex: number) {\n  const currentRect: ClientRect | undefined = rects[index];\n  const previousRect: ClientRect | undefined = rects[index - 1];\n  const nextRect: ClientRect | undefined = rects[index + 1];\n\n  if (!currentRect || (!previousRect && !nextRect)) {\n    return 0;\n  }\n\n  if (activeIndex < index) {\n    return previousRect\n      ? currentRect.left - (previousRect.left + previousRect.width)\n      : nextRect.left - (currentRect.left + currentRect.width);\n  }\n\n  return nextRect\n    ? nextRect.left - (currentRect.left + currentRect.width)\n    : currentRect.left - (previousRect.left + previousRect.width);\n}\n","import {arrayMove} from '../utilities';\nimport type {SortingStrategy} from '../types';\n\nexport const rectSortingStrategy: SortingStrategy = ({\n  rects,\n  activeIndex,\n  overIndex,\n  index,\n}) => {\n  const newRects = arrayMove(rects, overIndex, activeIndex);\n\n  const oldRect = rects[index];\n  const newRect = newRects[index];\n\n  if (!newRect || !oldRect) {\n    return null;\n  }\n\n  return {\n    x: newRect.left - oldRect.left,\n    y: newRect.top - oldRect.top,\n    scaleX: newRect.width / oldRect.width,\n    scaleY: newRect.height / oldRect.height,\n  };\n};\n","import type {ClientRect} from '@dnd-kit/core';\nimport type {SortingStrategy} from '../types';\n\n// To-do: We should be calculating scale transformation\nconst defaultScale = {\n  scaleX: 1,\n  scaleY: 1,\n};\n\nexport const verticalListSortingStrategy: SortingStrategy = ({\n  activeIndex,\n  activeNodeRect: fallbackActiveRect,\n  index,\n  rects,\n  overIndex,\n}) => {\n  const activeNodeRect = rects[activeIndex] ?? fallbackActiveRect;\n\n  if (!activeNodeRect) {\n    return null;\n  }\n\n  if (index === activeIndex) {\n    const overIndexRect = rects[overIndex];\n\n    if (!overIndexRect) {\n      return null;\n    }\n\n    return {\n      x: 0,\n      y:\n        activeIndex < overIndex\n          ? overIndexRect.top +\n            overIndexRect.height -\n            (activeNodeRect.top + activeNodeRect.height)\n          : overIndexRect.top - activeNodeRect.top,\n      ...defaultScale,\n    };\n  }\n\n  const itemGap = getItemGap(rects, index, activeIndex);\n\n  if (index > activeIndex && index <= overIndex) {\n    return {\n      x: 0,\n      y: -activeNodeRect.height - itemGap,\n      ...defaultScale,\n    };\n  }\n\n  if (index < activeIndex && index >= overIndex) {\n    return {\n      x: 0,\n      y: activeNodeRect.height + itemGap,\n      ...defaultScale,\n    };\n  }\n\n  return {\n    x: 0,\n    y: 0,\n    ...defaultScale,\n  };\n};\n\nfunction getItemGap(\n  clientRects: ClientRect[],\n  index: number,\n  activeIndex: number\n) {\n  const currentRect: ClientRect | undefined = clientRects[index];\n  const previousRect: ClientRect | undefined = clientRects[index - 1];\n  const nextRect: ClientRect | undefined = clientRects[index + 1];\n\n  if (!currentRect) {\n    return 0;\n  }\n\n  if (activeIndex < index) {\n    return previousRect\n      ? currentRect.top - (previousRect.top + previousRect.height)\n      : nextRect\n      ? nextRect.top - (currentRect.top + currentRect.height)\n      : 0;\n  }\n\n  return nextRect\n    ? nextRect.top - (currentRect.top + currentRect.height)\n    : previousRect\n    ? currentRect.top - (previousRect.top + previousRect.height)\n    : 0;\n}\n","import React, {useEffect, useMemo, useRef} from 'react';\nimport {useDndContext, ClientRect, UniqueIdentifier} from '@dnd-kit/core';\nimport {useIsomorphicLayoutEffect, useUniqueId} from '@dnd-kit/utilities';\n\nimport type {Disabled, SortingStrategy} from '../types';\nimport {getSortedRects, itemsEqual, normalizeDisabled} from '../utilities';\nimport {rectSortingStrategy} from '../strategies';\n\nexport interface Props {\n  children: React.ReactNode;\n  items: (UniqueIdentifier | {id: UniqueIdentifier})[];\n  strategy?: SortingStrategy;\n  id?: string;\n  disabled?: boolean | Disabled;\n}\n\nconst ID_PREFIX = 'Sortable';\n\ninterface ContextDescriptor {\n  activeIndex: number;\n  containerId: string;\n  disabled: Disabled;\n  disableTransforms: boolean;\n  items: UniqueIdentifier[];\n  overIndex: number;\n  useDragOverlay: boolean;\n  sortedRects: ClientRect[];\n  strategy: SortingStrategy;\n}\n\nexport const Context = React.createContext<ContextDescriptor>({\n  activeIndex: -1,\n  containerId: ID_PREFIX,\n  disableTransforms: false,\n  items: [],\n  overIndex: -1,\n  useDragOverlay: false,\n  sortedRects: [],\n  strategy: rectSortingStrategy,\n  disabled: {\n    draggable: false,\n    droppable: false,\n  },\n});\n\nexport function SortableContext({\n  children,\n  id,\n  items: userDefinedItems,\n  strategy = rectSortingStrategy,\n  disabled: disabledProp = false,\n}: Props) {\n  const {\n    active,\n    dragOverlay,\n    droppableRects,\n    over,\n    measureDroppableContainers,\n    measuringScheduled,\n  } = useDndContext();\n  const containerId = useUniqueId(ID_PREFIX, id);\n  const useDragOverlay = Boolean(dragOverlay.rect !== null);\n  const items = useMemo<UniqueIdentifier[]>(\n    () =>\n      userDefinedItems.map((item) =>\n        typeof item === 'object' && 'id' in item ? item.id : item\n      ),\n    [userDefinedItems]\n  );\n  const isDragging = active != null;\n  const activeIndex = active ? items.indexOf(active.id) : -1;\n  const overIndex = over ? items.indexOf(over.id) : -1;\n  const previousItemsRef = useRef(items);\n  const itemsHaveChanged = !itemsEqual(items, previousItemsRef.current);\n  const disableTransforms =\n    (overIndex !== -1 && activeIndex === -1) || itemsHaveChanged;\n  const disabled = normalizeDisabled(disabledProp);\n\n  useIsomorphicLayoutEffect(() => {\n    if (itemsHaveChanged && isDragging && !measuringScheduled) {\n      measureDroppableContainers(items);\n    }\n  }, [\n    itemsHaveChanged,\n    items,\n    isDragging,\n    measureDroppableContainers,\n    measuringScheduled,\n  ]);\n\n  useEffect(() => {\n    previousItemsRef.current = items;\n  }, [items]);\n\n  const contextValue = useMemo(\n    (): ContextDescriptor => ({\n      activeIndex,\n      containerId,\n      disabled,\n      disableTransforms,\n      items,\n      overIndex,\n      useDragOverlay,\n      sortedRects: getSortedRects(items, droppableRects),\n      strategy,\n    }),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n      activeIndex,\n      containerId,\n      disabled.draggable,\n      disabled.droppable,\n      disableTransforms,\n      items,\n      overIndex,\n      droppableRects,\n      useDragOverlay,\n      strategy,\n    ]\n  );\n\n  return <Context.Provider value={contextValue}>{children}</Context.Provider>;\n}\n","import {CSS} from '@dnd-kit/utilities';\n\nimport {arrayMove} from '../utilities';\n\nimport type {\n  AnimateLayoutChanges,\n  NewIndexGetter,\n  SortableTransition,\n} from './types';\n\nexport const defaultNewIndexGetter: NewIndexGetter = ({\n  id,\n  items,\n  activeIndex,\n  overIndex,\n}) => arrayMove(items, activeIndex, overIndex).indexOf(id);\n\nexport const defaultAnimateLayoutChanges: AnimateLayoutChanges = ({\n  containerId,\n  isSorting,\n  wasDragging,\n  index,\n  items,\n  newIndex,\n  previousItems,\n  previousContainerId,\n  transition,\n}) => {\n  if (!transition || !wasDragging) {\n    return false;\n  }\n\n  if (previousItems !== items && index === newIndex) {\n    return false;\n  }\n\n  if (isSorting) {\n    return true;\n  }\n\n  return newIndex !== index && containerId === previousContainerId;\n};\n\nexport const defaultTransition: SortableTransition = {\n  duration: 200,\n  easing: 'ease',\n};\n\nexport const transitionProperty = 'transform';\n\nexport const disabledTransition = CSS.Transition.toString({\n  property: transitionProperty,\n  duration: 0,\n  easing: 'linear',\n});\n\nexport const defaultAttributes = {\n  roleDescription: 'sortable',\n};\n","import type {Data, DroppableContainer, DraggableNode} from '@dnd-kit/core';\n\nimport type {SortableData} from './data';\n\nexport function hasSortableData<T extends DraggableNode | DroppableContainer>(\n  entry: T | null | undefined\n): entry is T & {data: {current: Data<SortableData>}} {\n  if (!entry) {\n    return false;\n  }\n\n  const data = entry.data.current;\n\n  if (\n    data &&\n    'sortable' in data &&\n    typeof data.sortable === 'object' &&\n    'containerId' in data.sortable &&\n    'items' in data.sortable &&\n    'index' in data.sortable\n  ) {\n    return true;\n  }\n\n  return false;\n}\n","import {\n  closestCorners,\n  getScrollableAncestors,\n  getFirstCollision,\n  KeyboardCode,\n  DroppableContainer,\n  KeyboardCoordinateGetter,\n} from '@dnd-kit/core';\nimport {subtract} from '@dnd-kit/utilities';\n\nimport {hasSortableData} from '../../types';\n\nconst directions: string[] = [\n  KeyboardCode.Down,\n  KeyboardCode.Right,\n  KeyboardCode.Up,\n  KeyboardCode.Left,\n];\n\nexport const sortableKeyboardCoordinates: KeyboardCoordinateGetter = (\n  event,\n  {\n    context: {\n      active,\n      collisionRect,\n      droppableRects,\n      droppableContainers,\n      over,\n      scrollableAncestors,\n    },\n  }\n) => {\n  if (directions.includes(event.code)) {\n    event.preventDefault();\n\n    if (!active || !collisionRect) {\n      return;\n    }\n\n    const filteredContainers: DroppableContainer[] = [];\n\n    droppableContainers.getEnabled().forEach((entry) => {\n      if (!entry || entry?.disabled) {\n        return;\n      }\n\n      const rect = droppableRects.get(entry.id);\n\n      if (!rect) {\n        return;\n      }\n\n      switch (event.code) {\n        case KeyboardCode.Down:\n          if (collisionRect.top < rect.top) {\n            filteredContainers.push(entry);\n          }\n          break;\n        case KeyboardCode.Up:\n          if (collisionRect.top > rect.top) {\n            filteredContainers.push(entry);\n          }\n          break;\n        case KeyboardCode.Left:\n          if (collisionRect.left > rect.left) {\n            filteredContainers.push(entry);\n          }\n          break;\n        case KeyboardCode.Right:\n          if (collisionRect.left < rect.left) {\n            filteredContainers.push(entry);\n          }\n          break;\n      }\n    });\n\n    const collisions = closestCorners({\n      active,\n      collisionRect: collisionRect,\n      droppableRects,\n      droppableContainers: filteredContainers,\n      pointerCoordinates: null,\n    });\n    let closestId = getFirstCollision(collisions, 'id');\n\n    if (closestId === over?.id && collisions.length > 1) {\n      closestId = collisions[1].id;\n    }\n\n    if (closestId != null) {\n      const activeDroppable = droppableContainers.get(active.id);\n      const newDroppable = droppableContainers.get(closestId);\n      const newRect = newDroppable ? droppableRects.get(newDroppable.id) : null;\n      const newNode = newDroppable?.node.current;\n\n      if (newNode && newRect && activeDroppable && newDroppable) {\n        const newScrollAncestors = getScrollableAncestors(newNode);\n        const hasDifferentScrollAncestors = newScrollAncestors.some(\n          (element, index) => scrollableAncestors[index] !== element\n        );\n        const hasSameContainer = isSameContainer(activeDroppable, newDroppable);\n        const isAfterActive = isAfter(activeDroppable, newDroppable);\n        const offset =\n          hasDifferentScrollAncestors || !hasSameContainer\n            ? {\n                x: 0,\n                y: 0,\n              }\n            : {\n                x: isAfterActive ? collisionRect.width - newRect.width : 0,\n                y: isAfterActive ? collisionRect.height - newRect.height : 0,\n              };\n        const rectCoordinates = {\n          x: newRect.left,\n          y: newRect.top,\n        };\n\n        const newCoordinates =\n          offset.x && offset.y\n            ? rectCoordinates\n            : subtract(rectCoordinates, offset);\n\n        return newCoordinates;\n      }\n    }\n  }\n\n  return undefined;\n};\n\nfunction isSameContainer(a: DroppableContainer, b: DroppableContainer) {\n  if (!hasSortableData(a) || !hasSortableData(b)) {\n    return false;\n  }\n\n  return (\n    a.data.current.sortable.containerId === b.data.current.sortable.containerId\n  );\n}\n\nfunction isAfter(a: DroppableContainer, b: DroppableContainer) {\n  if (!hasSortableData(a) || !hasSortableData(b)) {\n    return false;\n  }\n\n  if (!isSameContainer(a, b)) {\n    return false;\n  }\n\n  return a.data.current.sortable.index < b.data.current.sortable.index;\n}\n","import type {UniqueIdentifier} from '@dnd-kit/core';\n\nexport function itemsEqual(a: UniqueIdentifier[], b: UniqueIdentifier[]) {\n  if (a === b) {\n    return true;\n  }\n\n  if (a.length !== b.length) {\n    return false;\n  }\n\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] !== b[i]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n","import type {Disabled} from '../types';\n\nexport function normalizeDisabled(disabled: boolean | Disabled): Disabled {\n  if (typeof disabled === 'boolean') {\n    return {\n      draggable: disabled,\n      droppable: disabled,\n    };\n  }\n\n  return disabled;\n}\n","/**\n * Swap an array item to a different position. Returns a new array with the item swapped to the new position.\n */\nexport function arraySwap<T>(array: T[], from: number, to: number): T[] {\n  const newArray = array.slice();\n\n  newArray[from] = array[to];\n  newArray[to] = array[from];\n\n  return newArray;\n}\n","import type {SortingStrategy} from '../types';\n\nexport const rectSwappingStrategy: SortingStrategy = ({\n  activeIndex,\n  index,\n  rects,\n  overIndex,\n}) => {\n  let oldRect;\n  let newRect;\n\n  if (index === activeIndex) {\n    oldRect = rects[index];\n    newRect = rects[overIndex];\n  }\n\n  if (index === overIndex) {\n    oldRect = rects[index];\n    newRect = rects[activeIndex];\n  }\n\n  if (!newRect || !oldRect) {\n    return null;\n  }\n\n  return {\n    x: newRect.left - oldRect.left,\n    y: newRect.top - oldRect.top,\n    scaleX: newRect.width / oldRect.width,\n    scaleY: newRect.height / oldRect.height,\n  };\n};\n","import {useContext, useEffect, useMemo, useRef} from 'react';\nimport {\n  useDraggable,\n  useDroppable,\n  UseDraggableArguments,\n  UseDroppableArguments,\n} from '@dnd-kit/core';\nimport type {Data} from '@dnd-kit/core';\nimport {CSS, isKeyboardEvent, useCombinedRefs} from '@dnd-kit/utilities';\n\nimport {Context} from '../components';\nimport type {Disabled, SortableData, SortingStrategy} from '../types';\nimport {isValidIndex} from '../utilities';\nimport {\n  defaultAnimateLayoutChanges,\n  defaultAttributes,\n  defaultNewIndexGetter,\n  defaultTransition,\n  disabledTransition,\n  transitionProperty,\n} from './defaults';\nimport type {\n  AnimateLayoutChanges,\n  NewIndexGetter,\n  SortableTransition,\n} from './types';\nimport {useDerivedTransform} from './utilities';\n\nexport interface Arguments\n  extends Omit<UseDraggableArguments, 'disabled'>,\n    Pick<UseDroppableArguments, 'resizeObserverConfig'> {\n  animateLayoutChanges?: AnimateLayoutChanges;\n  disabled?: boolean | Disabled;\n  getNewIndex?: NewIndexGetter;\n  strategy?: SortingStrategy;\n  transition?: SortableTransition | null;\n}\n\nexport function useSortable({\n  animateLayoutChanges = defaultAnimateLayoutChanges,\n  attributes: userDefinedAttributes,\n  disabled: localDisabled,\n  data: customData,\n  getNewIndex = defaultNewIndexGetter,\n  id,\n  strategy: localStrategy,\n  resizeObserverConfig,\n  transition = defaultTransition,\n}: Arguments) {\n  const {\n    items,\n    containerId,\n    activeIndex,\n    disabled: globalDisabled,\n    disableTransforms,\n    sortedRects,\n    overIndex,\n    useDragOverlay,\n    strategy: globalStrategy,\n  } = useContext(Context);\n  const disabled: Disabled = normalizeLocalDisabled(\n    localDisabled,\n    globalDisabled\n  );\n  const index = items.indexOf(id);\n  const data = useMemo<SortableData & Data>(\n    () => ({sortable: {containerId, index, items}, ...customData}),\n    [containerId, customData, index, items]\n  );\n  const itemsAfterCurrentSortable = useMemo(\n    () => items.slice(items.indexOf(id)),\n    [items, id]\n  );\n  const {rect, node, isOver, setNodeRef: setDroppableNodeRef} = useDroppable({\n    id,\n    data,\n    disabled: disabled.droppable,\n    resizeObserverConfig: {\n      updateMeasurementsFor: itemsAfterCurrentSortable,\n      ...resizeObserverConfig,\n    },\n  });\n  const {\n    active,\n    activatorEvent,\n    activeNodeRect,\n    attributes,\n    setNodeRef: setDraggableNodeRef,\n    listeners,\n    isDragging,\n    over,\n    setActivatorNodeRef,\n    transform,\n  } = useDraggable({\n    id,\n    data,\n    attributes: {\n      ...defaultAttributes,\n      ...userDefinedAttributes,\n    },\n    disabled: disabled.draggable,\n  });\n  const setNodeRef = useCombinedRefs(setDroppableNodeRef, setDraggableNodeRef);\n  const isSorting = Boolean(active);\n  const displaceItem =\n    isSorting &&\n    !disableTransforms &&\n    isValidIndex(activeIndex) &&\n    isValidIndex(overIndex);\n  const shouldDisplaceDragSource = !useDragOverlay && isDragging;\n  const dragSourceDisplacement =\n    shouldDisplaceDragSource && displaceItem ? transform : null;\n  const strategy = localStrategy ?? globalStrategy;\n  const finalTransform = displaceItem\n    ? dragSourceDisplacement ??\n      strategy({\n        rects: sortedRects,\n        activeNodeRect,\n        activeIndex,\n        overIndex,\n        index,\n      })\n    : null;\n  const newIndex =\n    isValidIndex(activeIndex) && isValidIndex(overIndex)\n      ? getNewIndex({id, items, activeIndex, overIndex})\n      : index;\n  const activeId = active?.id;\n  const previous = useRef({\n    activeId,\n    items,\n    newIndex,\n    containerId,\n  });\n  const itemsHaveChanged = items !== previous.current.items;\n  const shouldAnimateLayoutChanges = animateLayoutChanges({\n    active,\n    containerId,\n    isDragging,\n    isSorting,\n    id,\n    index,\n    items,\n    newIndex: previous.current.newIndex,\n    previousItems: previous.current.items,\n    previousContainerId: previous.current.containerId,\n    transition,\n    wasDragging: previous.current.activeId != null,\n  });\n\n  const derivedTransform = useDerivedTransform({\n    disabled: !shouldAnimateLayoutChanges,\n    index,\n    node,\n    rect,\n  });\n\n  useEffect(() => {\n    if (isSorting && previous.current.newIndex !== newIndex) {\n      previous.current.newIndex = newIndex;\n    }\n\n    if (containerId !== previous.current.containerId) {\n      previous.current.containerId = containerId;\n    }\n\n    if (items !== previous.current.items) {\n      previous.current.items = items;\n    }\n  }, [isSorting, newIndex, containerId, items]);\n\n  useEffect(() => {\n    if (activeId === previous.current.activeId) {\n      return;\n    }\n\n    if (activeId && !previous.current.activeId) {\n      previous.current.activeId = activeId;\n      return;\n    }\n\n    const timeoutId = setTimeout(() => {\n      previous.current.activeId = activeId;\n    }, 50);\n\n    return () => clearTimeout(timeoutId);\n  }, [activeId]);\n\n  return {\n    active,\n    activeIndex,\n    attributes,\n    data,\n    rect,\n    index,\n    newIndex,\n    items,\n    isOver,\n    isSorting,\n    isDragging,\n    listeners,\n    node,\n    overIndex,\n    over,\n    setNodeRef,\n    setActivatorNodeRef,\n    setDroppableNodeRef,\n    setDraggableNodeRef,\n    transform: derivedTransform ?? finalTransform,\n    transition: getTransition(),\n  };\n\n  function getTransition() {\n    if (\n      // Temporarily disable transitions for a single frame to set up derived transforms\n      derivedTransform ||\n      // Or to prevent items jumping to back to their \"new\" position when items change\n      (itemsHaveChanged && previous.current.newIndex === index)\n    ) {\n      return disabledTransition;\n    }\n\n    if (\n      (shouldDisplaceDragSource && !isKeyboardEvent(activatorEvent)) ||\n      !transition\n    ) {\n      return undefined;\n    }\n\n    if (isSorting || shouldAnimateLayoutChanges) {\n      return CSS.Transition.toString({\n        ...transition,\n        property: transitionProperty,\n      });\n    }\n\n    return undefined;\n  }\n}\n\nfunction normalizeLocalDisabled(\n  localDisabled: Arguments['disabled'],\n  globalDisabled: Disabled\n) {\n  if (typeof localDisabled === 'boolean') {\n    return {\n      draggable: localDisabled,\n      // Backwards compatibility\n      droppable: false,\n    };\n  }\n\n  return {\n    draggable: localDisabled?.draggable ?? globalDisabled.draggable,\n    droppable: localDisabled?.droppable ?? globalDisabled.droppable,\n  };\n}\n","import {useEffect, useRef, useState} from 'react';\nimport {getClientRect, ClientRect} from '@dnd-kit/core';\nimport {Transform, useIsomorphicLayoutEffect} from '@dnd-kit/utilities';\n\ninterface Arguments {\n  rect: React.MutableRefObject<ClientRect | null>;\n  disabled: boolean;\n  index: number;\n  node: React.MutableRefObject<HTMLElement | null>;\n}\n\n/*\n * When the index of an item changes while sorting,\n * we need to temporarily disable the transforms\n */\nexport function useDerivedTransform({disabled, index, node, rect}: Arguments) {\n  const [derivedTransform, setDerivedtransform] = useState<Transform | null>(\n    null\n  );\n  const previousIndex = useRef(index);\n\n  useIsomorphicLayoutEffect(() => {\n    if (!disabled && index !== previousIndex.current && node.current) {\n      const initial = rect.current;\n\n      if (initial) {\n        const current = getClientRect(node.current, {\n          ignoreTransform: true,\n        });\n\n        const delta = {\n          x: initial.left - current.left,\n          y: initial.top - current.top,\n          scaleX: initial.width / current.width,\n          scaleY: initial.height / current.height,\n        };\n\n        if (delta.x || delta.y) {\n          setDerivedtransform(delta);\n        }\n      }\n    }\n\n    if (index !== previousIndex.current) {\n      previousIndex.current = index;\n    }\n  }, [disabled, index, node, rect]);\n\n  useEffect(() => {\n    if (derivedTransform) {\n      requestAnimationFrame(() => {\n        setDerivedtransform(null);\n      });\n    }\n  }, [derivedTransform]);\n\n  return derivedTransform;\n}\n"],"names":["arrayMove","array","from","to","newArray","slice","splice","length","getSortedRects","items","rects","reduce","accumulator","id","index","rect","get","Array","isValidIndex","defaultScale","scaleX","scaleY","rectSortingStrategy","activeIndex","overIndex","newRects","oldRect","newRect","x","left","y","top","width","height","Context","React","createContext","containerId","disableTransforms","useDragOverlay","sortedRects","strategy","disabled","draggable","droppable","defaultNewIndexGetter","indexOf","defaultAnimateLayoutChanges","isSorting","wasDragging","newIndex","previousItems","previousContainerId","transition","defaultTransition","duration","easing","disabledTransition","CSS","Transition","toString","property","defaultAttributes","roleDescription","hasSortableData","entry","data","current","sortable","directions","KeyboardCode","Down","Right","Up","Left","isSameContainer","a","b","children","userDefinedItems","disabledProp","active","dragOverlay","droppableRects","over","measureDroppableContainers","measuringScheduled","useDndContext","useUniqueId","Boolean","useMemo","map","item","isDragging","previousItemsRef","useRef","itemsHaveChanged","i","itemsEqual","normalizeDisabled","useIsomorphicLayoutEffect","useEffect","contextValue","Provider","value","activeNodeRect","fallbackActiveRect","itemGap","currentRect","previousRect","nextRect","getItemGap","newIndexRect","event","context","collisionRect","droppableContainers","scrollableAncestors","includes","code","preventDefault","filteredContainers","getEnabled","forEach","push","collisions","closestCorners","pointerCoordinates","closestId","getFirstCollision","activeDroppable","newDroppable","newNode","node","hasDifferentScrollAncestors","getScrollableAncestors","some","element","hasSameContainer","isAfterActive","offset","rectCoordinates","subtract","animateLayoutChanges","attributes","userDefinedAttributes","localDisabled","customData","getNewIndex","localStrategy","resizeObserverConfig","globalDisabled","globalStrategy","useContext","normalizeLocalDisabled","itemsAfterCurrentSortable","isOver","setNodeRef","setDroppableNodeRef","useDroppable","updateMeasurementsFor","activatorEvent","setDraggableNodeRef","listeners","setActivatorNodeRef","transform","useDraggable","useCombinedRefs","displaceItem","shouldDisplaceDragSource","dragSourceDisplacement","finalTransform","activeId","previous","shouldAnimateLayoutChanges","derivedTransform","setDerivedtransform","useState","previousIndex","initial","getClientRect","ignoreTransform","delta","requestAnimationFrame","useDerivedTransform","timeoutId","setTimeout","clearTimeout","isKeyboardEvent","overIndexRect","clientRects"],"mappings":"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"}